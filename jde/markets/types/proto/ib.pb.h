// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ib.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ib_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ib_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ib_2eproto JDE_MARKETS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct JDE_MARKETS_EXPORT TableStruct_ib_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ib_2eproto;
namespace Jde {
namespace Markets {
namespace Proto {
class ComboLeg;
struct ComboLegDefaultTypeInternal;
JDE_MARKETS_EXPORT extern ComboLegDefaultTypeInternal _ComboLeg_default_instance_;
class Contract;
struct ContractDefaultTypeInternal;
JDE_MARKETS_EXPORT extern ContractDefaultTypeInternal _Contract_default_instance_;
class DeltaNeutralContract;
struct DeltaNeutralContractDefaultTypeInternal;
JDE_MARKETS_EXPORT extern DeltaNeutralContractDefaultTypeInternal _DeltaNeutralContract_default_instance_;
class Order;
struct OrderDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OrderDefaultTypeInternal _Order_default_instance_;
}  // namespace Proto
}  // namespace Markets
}  // namespace Jde
PROTOBUF_NAMESPACE_OPEN
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::ComboLeg* Arena::CreateMaybeMessage<::Jde::Markets::Proto::ComboLeg>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Contract* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Contract>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::DeltaNeutralContract* Arena::CreateMaybeMessage<::Jde::Markets::Proto::DeltaNeutralContract>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Order* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Order>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Jde {
namespace Markets {
namespace Proto {

enum SecurityRight : int {
  None = 0,
  Call = 1,
  Put = 2,
  SecurityRight_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SecurityRight_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
JDE_MARKETS_EXPORT bool SecurityRight_IsValid(int value);
constexpr SecurityRight SecurityRight_MIN = None;
constexpr SecurityRight SecurityRight_MAX = Put;
constexpr int SecurityRight_ARRAYSIZE = SecurityRight_MAX + 1;

JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityRight_descriptor();
template<typename T>
inline const std::string& SecurityRight_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityRight>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityRight_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecurityRight_descriptor(), enum_t_value);
}
inline bool SecurityRight_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SecurityRight* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecurityRight>(
    SecurityRight_descriptor(), name, value);
}
enum SecurityType : int {
  Unknown = 0,
  Stock = 1,
  MutualFund = 2,
  Etf = 3,
  Future = 4,
  Commodity = 5,
  Bag = 6,
  Cash = 7,
  Fop = 8,
  Index = 9,
  Option = 10,
  Warrant = 11,
  SecurityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SecurityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
JDE_MARKETS_EXPORT bool SecurityType_IsValid(int value);
constexpr SecurityType SecurityType_MIN = Unknown;
constexpr SecurityType SecurityType_MAX = Warrant;
constexpr int SecurityType_ARRAYSIZE = SecurityType_MAX + 1;

JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityType_descriptor();
template<typename T>
inline const std::string& SecurityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecurityType_descriptor(), enum_t_value);
}
inline bool SecurityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SecurityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecurityType>(
    SecurityType_descriptor(), name, value);
}
enum Exchanges : int {
  Smart = 0,
  Nyse = 1,
  Nasdaq = 2,
  Amex = 3,
  Arca = 4,
  Bats = 5,
  PinkSheets = 6,
  Value = 7,
  Ibis = 8,
  Cboe = 9,
  Ise = 10,
  Pse = 11,
  Pearl = 12,
  Miax = 13,
  Mercury = 14,
  Edgx = 15,
  Gemini = 16,
  Box = 17,
  Emerald = 18,
  NasdaqOM = 19,
  NasdaqBX = 20,
  Phlx = 21,
  Cboe2 = 22,
  Ebs = 23,
  Iex = 24,
  Venture = 25,
  UnknownExchange = -1,
  Exchanges_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Exchanges_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
JDE_MARKETS_EXPORT bool Exchanges_IsValid(int value);
constexpr Exchanges Exchanges_MIN = UnknownExchange;
constexpr Exchanges Exchanges_MAX = Venture;
constexpr int Exchanges_ARRAYSIZE = Exchanges_MAX + 1;

JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Exchanges_descriptor();
template<typename T>
inline const std::string& Exchanges_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Exchanges>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Exchanges_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Exchanges_descriptor(), enum_t_value);
}
inline bool Exchanges_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Exchanges* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Exchanges>(
    Exchanges_descriptor(), name, value);
}
enum Currencies : int {
  NoCurrency = 0,
  ArgentinaPeso = 1,
  BrazilReal = 2,
  CanadaDollar = 3,
  ChilePeso = 4,
  ColombiaPeso = 5,
  EcuadorUsDollar = 6,
  MexicoPeso = 7,
  PeruNewSol = 8,
  UruguayPeso = 9,
  VenezuelaBolivar = 10,
  AustralianDollar = 11,
  ChinaYuan = 12,
  HongKongDollar = 13,
  IndiaRupee = 14,
  IndonesiaRupiah = 15,
  JapanYen = 16,
  MalaysiaRinggit = 17,
  NewZealandDollar = 18,
  PakistanRupee = 19,
  PhilippinesPeso = 20,
  SingaporeDollar = 21,
  SouthKoreaWon = 22,
  TaiwanDollar = 23,
  ThailandBaht = 24,
  CzechRepKoruna = 25,
  DenmarkKrone = 26,
  EuroAreaEuro = 27,
  HungaryForint = 28,
  MaltaLira = 29,
  NorwayKrone = 30,
  PolandZloty = 31,
  RussiaRuble = 32,
  SlovakRepKoruna = 33,
  SwedenKrona = 34,
  SwitzerlandFranc = 35,
  TurkeyLira = 36,
  UKPound = 37,
  BahrainDinar = 38,
  EgyptPound = 39,
  IsraelShekel = 40,
  JordanDinar = 41,
  KuwaitDinar = 42,
  LebanonPound = 43,
  SaudiArabiaRiyal = 44,
  SouthAfricaRand = 45,
  UaeDirham = 46,
  Sdr = 47,
  UsDollar = 48,
  VenezuelaBolivarFuerte = 49,
  VietnamDong = 50,
  RomaniaLeu = 51,
  KenyaShilling = 52,
  Currencies_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Currencies_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
JDE_MARKETS_EXPORT bool Currencies_IsValid(int value);
constexpr Currencies Currencies_MIN = NoCurrency;
constexpr Currencies Currencies_MAX = KenyaShilling;
constexpr int Currencies_ARRAYSIZE = Currencies_MAX + 1;

JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Currencies_descriptor();
template<typename T>
inline const std::string& Currencies_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Currencies>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Currencies_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Currencies_descriptor(), enum_t_value);
}
inline bool Currencies_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Currencies* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Currencies>(
    Currencies_descriptor(), name, value);
}
enum EOrderType : int {
  Limit = 0,
  Market = 1,
  MarketToLimit = 2,
  MarketIfTouched = 3,
  MarketOnClose = 4,
  PeggedToMarket = 5,
  PeggedToStock = 6,
  PeggedToPrimary = 7,
  BoxTop = 8,
  LimitIfTouched = 9,
  LimitOnClose = 10,
  PassiveRelative = 11,
  PeggedToMidpoint = 12,
  Stop = 13,
  StopLimit = 14,
  StopWithProtection = 15,
  TrailingStop = 16,
  TrailLimit = 17,
  RelativeLimit = 18,
  RelativeMarket = 19,
  Volatility = 20,
  PeggedToBenchmark = 21,
  EOrderType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EOrderType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
JDE_MARKETS_EXPORT bool EOrderType_IsValid(int value);
constexpr EOrderType EOrderType_MIN = Limit;
constexpr EOrderType EOrderType_MAX = PeggedToBenchmark;
constexpr int EOrderType_ARRAYSIZE = EOrderType_MAX + 1;

JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOrderType_descriptor();
template<typename T>
inline const std::string& EOrderType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EOrderType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EOrderType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EOrderType_descriptor(), enum_t_value);
}
inline bool EOrderType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EOrderType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EOrderType>(
    EOrderType_descriptor(), name, value);
}
enum ETimeInForce : int {
  DayTif = 0,
  Gtc = 1,
  Ioc = 2,
  Gtd = 3,
  Opg = 4,
  Fok = 5,
  Dtc = 6,
  ETimeInForce_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ETimeInForce_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
JDE_MARKETS_EXPORT bool ETimeInForce_IsValid(int value);
constexpr ETimeInForce ETimeInForce_MIN = DayTif;
constexpr ETimeInForce ETimeInForce_MAX = Dtc;
constexpr int ETimeInForce_ARRAYSIZE = ETimeInForce_MAX + 1;

JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETimeInForce_descriptor();
template<typename T>
inline const std::string& ETimeInForce_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETimeInForce>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETimeInForce_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETimeInForce_descriptor(), enum_t_value);
}
inline bool ETimeInForce_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETimeInForce* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETimeInForce>(
    ETimeInForce_descriptor(), name, value);
}
// ===================================================================

class JDE_MARKETS_EXPORT ComboLeg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.ComboLeg) */ {
 public:
  inline ComboLeg() : ComboLeg(nullptr) {}
  ~ComboLeg() override;
  explicit constexpr ComboLeg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ComboLeg(const ComboLeg& from);
  ComboLeg(ComboLeg&& from) noexcept
    : ComboLeg() {
    *this = ::std::move(from);
  }

  inline ComboLeg& operator=(const ComboLeg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComboLeg& operator=(ComboLeg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComboLeg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComboLeg* internal_default_instance() {
    return reinterpret_cast<const ComboLeg*>(
               &_ComboLeg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ComboLeg& a, ComboLeg& b) {
    a.Swap(&b);
  }
  inline void Swap(ComboLeg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComboLeg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ComboLeg* New() const final {
    return new ComboLeg();
  }

  ComboLeg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ComboLeg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ComboLeg& from);
  void MergeFrom(const ComboLeg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ComboLeg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.ComboLeg";
  }
  protected:
  explicit ComboLeg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 3,
    kExchangeFieldNumber = 4,
    kDesignatedLocationFieldNumber = 7,
    kContractIdFieldNumber = 1,
    kRatioFieldNumber = 2,
    kOpenCloseFieldNumber = 5,
    kShortSalesLotFieldNumber = 6,
    kExemptCodeFieldNumber = 8,
  };
  // string action = 3;
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string exchange = 4;
  void clear_exchange();
  const std::string& exchange() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string designated_location = 7;
  void clear_designated_location();
  const std::string& designated_location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_designated_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_designated_location();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_designated_location();
  void set_allocated_designated_location(std::string* designated_location);
  private:
  const std::string& _internal_designated_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_designated_location(const std::string& value);
  std::string* _internal_mutable_designated_location();
  public:

  // uint32 contract_id = 1;
  void clear_contract_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 contract_id() const;
  void set_contract_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contract_id() const;
  void _internal_set_contract_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 ratio = 2;
  void clear_ratio();
  ::PROTOBUF_NAMESPACE_ID::int32 ratio() const;
  void set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ratio() const;
  void _internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 open_close = 5;
  void clear_open_close();
  ::PROTOBUF_NAMESPACE_ID::int32 open_close() const;
  void set_open_close(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_open_close() const;
  void _internal_set_open_close(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 short_sales_lot = 6;
  void clear_short_sales_lot();
  ::PROTOBUF_NAMESPACE_ID::int32 short_sales_lot() const;
  void set_short_sales_lot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_short_sales_lot() const;
  void _internal_set_short_sales_lot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 exempt_code = 8;
  void clear_exempt_code();
  ::PROTOBUF_NAMESPACE_ID::int32 exempt_code() const;
  void set_exempt_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exempt_code() const;
  void _internal_set_exempt_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.ComboLeg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr designated_location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contract_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 ratio_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_close_;
  ::PROTOBUF_NAMESPACE_ID::int32 short_sales_lot_;
  ::PROTOBUF_NAMESPACE_ID::int32 exempt_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ib_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT DeltaNeutralContract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.DeltaNeutralContract) */ {
 public:
  inline DeltaNeutralContract() : DeltaNeutralContract(nullptr) {}
  ~DeltaNeutralContract() override;
  explicit constexpr DeltaNeutralContract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeltaNeutralContract(const DeltaNeutralContract& from);
  DeltaNeutralContract(DeltaNeutralContract&& from) noexcept
    : DeltaNeutralContract() {
    *this = ::std::move(from);
  }

  inline DeltaNeutralContract& operator=(const DeltaNeutralContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeltaNeutralContract& operator=(DeltaNeutralContract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeltaNeutralContract& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeltaNeutralContract* internal_default_instance() {
    return reinterpret_cast<const DeltaNeutralContract*>(
               &_DeltaNeutralContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeltaNeutralContract& a, DeltaNeutralContract& b) {
    a.Swap(&b);
  }
  inline void Swap(DeltaNeutralContract* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeltaNeutralContract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeltaNeutralContract* New() const final {
    return new DeltaNeutralContract();
  }

  DeltaNeutralContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeltaNeutralContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeltaNeutralContract& from);
  void MergeFrom(const DeltaNeutralContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeltaNeutralContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.DeltaNeutralContract";
  }
  protected:
  explicit DeltaNeutralContract(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeltaFieldNumber = 2,
    kPriceFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // double delta = 2;
  void clear_delta();
  double delta() const;
  void set_delta(double value);
  private:
  double _internal_delta() const;
  void _internal_set_delta(double value);
  public:

  // double price = 3;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.DeltaNeutralContract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double delta_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ib_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Contract final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Contract) */ {
 public:
  inline Contract() : Contract(nullptr) {}
  ~Contract() override;
  explicit constexpr Contract(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Contract(const Contract& from);
  Contract(Contract&& from) noexcept
    : Contract() {
    *this = ::std::move(from);
  }

  inline Contract& operator=(const Contract& from) {
    CopyFrom(from);
    return *this;
  }
  inline Contract& operator=(Contract&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Contract& default_instance() {
    return *internal_default_instance();
  }
  static inline const Contract* internal_default_instance() {
    return reinterpret_cast<const Contract*>(
               &_Contract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Contract& a, Contract& b) {
    a.Swap(&b);
  }
  inline void Swap(Contract* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Contract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Contract* New() const final {
    return new Contract();
  }

  Contract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Contract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Contract& from);
  void MergeFrom(const Contract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Contract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Contract";
  }
  protected:
  explicit Contract(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComboLegsFieldNumber = 17,
    kSymbolFieldNumber = 2,
    kLocalSymbolFieldNumber = 11,
    kTradingClassFieldNumber = 12,
    kSecIdTypeFieldNumber = 14,
    kSecIdFieldNumber = 15,
    kComboLegsDescriptionFieldNumber = 16,
    kNameFieldNumber = 19,
    kDeltaNeutralFieldNumber = 18,
    kIdFieldNumber = 1,
    kSecurityTypeFieldNumber = 3,
    kStrikeFieldNumber = 5,
    kExpirationFieldNumber = 4,
    kRightFieldNumber = 6,
    kMultiplierFieldNumber = 7,
    kExchangeFieldNumber = 8,
    kPrimaryExchangeFieldNumber = 9,
    kCurrencyFieldNumber = 10,
    kIncludeExpiredFieldNumber = 13,
    kFlagsFieldNumber = 20,
    kUnderlyingIdFieldNumber = 21,
  };
  // repeated .Jde.Markets.Proto.ComboLeg combo_Legs = 17;
  int combo_legs_size() const;
  private:
  int _internal_combo_legs_size() const;
  public:
  void clear_combo_legs();
  ::Jde::Markets::Proto::ComboLeg* mutable_combo_legs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::ComboLeg >*
      mutable_combo_legs();
  private:
  const ::Jde::Markets::Proto::ComboLeg& _internal_combo_legs(int index) const;
  ::Jde::Markets::Proto::ComboLeg* _internal_add_combo_legs();
  public:
  const ::Jde::Markets::Proto::ComboLeg& combo_legs(int index) const;
  ::Jde::Markets::Proto::ComboLeg* add_combo_legs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::ComboLeg >&
      combo_legs() const;

  // string symbol = 2;
  void clear_symbol();
  const std::string& symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_symbol();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_symbol();
  void set_allocated_symbol(std::string* symbol);
  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(const std::string& value);
  std::string* _internal_mutable_symbol();
  public:

  // string local_symbol = 11;
  void clear_local_symbol();
  const std::string& local_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_local_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_local_symbol();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_local_symbol();
  void set_allocated_local_symbol(std::string* local_symbol);
  private:
  const std::string& _internal_local_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_local_symbol(const std::string& value);
  std::string* _internal_mutable_local_symbol();
  public:

  // string trading_class = 12;
  void clear_trading_class();
  const std::string& trading_class() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trading_class(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trading_class();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_trading_class();
  void set_allocated_trading_class(std::string* trading_class);
  private:
  const std::string& _internal_trading_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trading_class(const std::string& value);
  std::string* _internal_mutable_trading_class();
  public:

  // string sec_id_type = 14;
  void clear_sec_id_type();
  const std::string& sec_id_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sec_id_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sec_id_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sec_id_type();
  void set_allocated_sec_id_type(std::string* sec_id_type);
  private:
  const std::string& _internal_sec_id_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sec_id_type(const std::string& value);
  std::string* _internal_mutable_sec_id_type();
  public:

  // string sec_id = 15;
  void clear_sec_id();
  const std::string& sec_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sec_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sec_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sec_id();
  void set_allocated_sec_id(std::string* sec_id);
  private:
  const std::string& _internal_sec_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sec_id(const std::string& value);
  std::string* _internal_mutable_sec_id();
  public:

  // string combo_legs_description = 16;
  void clear_combo_legs_description();
  const std::string& combo_legs_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_combo_legs_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_combo_legs_description();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_combo_legs_description();
  void set_allocated_combo_legs_description(std::string* combo_legs_description);
  private:
  const std::string& _internal_combo_legs_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_combo_legs_description(const std::string& value);
  std::string* _internal_mutable_combo_legs_description();
  public:

  // string name = 19;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Jde.Markets.Proto.DeltaNeutralContract delta_neutral = 18;
  bool has_delta_neutral() const;
  private:
  bool _internal_has_delta_neutral() const;
  public:
  void clear_delta_neutral();
  const ::Jde::Markets::Proto::DeltaNeutralContract& delta_neutral() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::DeltaNeutralContract* release_delta_neutral();
  ::Jde::Markets::Proto::DeltaNeutralContract* mutable_delta_neutral();
  void set_allocated_delta_neutral(::Jde::Markets::Proto::DeltaNeutralContract* delta_neutral);
  private:
  const ::Jde::Markets::Proto::DeltaNeutralContract& _internal_delta_neutral() const;
  ::Jde::Markets::Proto::DeltaNeutralContract* _internal_mutable_delta_neutral();
  public:
  void unsafe_arena_set_allocated_delta_neutral(
      ::Jde::Markets::Proto::DeltaNeutralContract* delta_neutral);
  ::Jde::Markets::Proto::DeltaNeutralContract* unsafe_arena_release_delta_neutral();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Jde.Markets.Proto.SecurityType security_type = 3;
  void clear_security_type();
  ::Jde::Markets::Proto::SecurityType security_type() const;
  void set_security_type(::Jde::Markets::Proto::SecurityType value);
  private:
  ::Jde::Markets::Proto::SecurityType _internal_security_type() const;
  void _internal_set_security_type(::Jde::Markets::Proto::SecurityType value);
  public:

  // double strike = 5;
  void clear_strike();
  double strike() const;
  void set_strike(double value);
  private:
  double _internal_strike() const;
  void _internal_set_strike(double value);
  public:

  // uint32 expiration = 4;
  void clear_expiration();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration() const;
  void set_expiration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiration() const;
  void _internal_set_expiration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Jde.Markets.Proto.SecurityRight right = 6;
  void clear_right();
  ::Jde::Markets::Proto::SecurityRight right() const;
  void set_right(::Jde::Markets::Proto::SecurityRight value);
  private:
  ::Jde::Markets::Proto::SecurityRight _internal_right() const;
  void _internal_set_right(::Jde::Markets::Proto::SecurityRight value);
  public:

  // uint32 multiplier = 7;
  void clear_multiplier();
  ::PROTOBUF_NAMESPACE_ID::uint32 multiplier() const;
  void set_multiplier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_multiplier() const;
  void _internal_set_multiplier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Jde.Markets.Proto.Exchanges exchange = 8;
  void clear_exchange();
  ::Jde::Markets::Proto::Exchanges exchange() const;
  void set_exchange(::Jde::Markets::Proto::Exchanges value);
  private:
  ::Jde::Markets::Proto::Exchanges _internal_exchange() const;
  void _internal_set_exchange(::Jde::Markets::Proto::Exchanges value);
  public:

  // .Jde.Markets.Proto.Exchanges primary_exchange = 9;
  void clear_primary_exchange();
  ::Jde::Markets::Proto::Exchanges primary_exchange() const;
  void set_primary_exchange(::Jde::Markets::Proto::Exchanges value);
  private:
  ::Jde::Markets::Proto::Exchanges _internal_primary_exchange() const;
  void _internal_set_primary_exchange(::Jde::Markets::Proto::Exchanges value);
  public:

  // .Jde.Markets.Proto.Currencies currency = 10;
  void clear_currency();
  ::Jde::Markets::Proto::Currencies currency() const;
  void set_currency(::Jde::Markets::Proto::Currencies value);
  private:
  ::Jde::Markets::Proto::Currencies _internal_currency() const;
  void _internal_set_currency(::Jde::Markets::Proto::Currencies value);
  public:

  // bool include_expired = 13;
  void clear_include_expired();
  bool include_expired() const;
  void set_include_expired(bool value);
  private:
  bool _internal_include_expired() const;
  void _internal_set_include_expired(bool value);
  public:

  // uint32 flags = 20;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 underlying_id = 21;
  void clear_underlying_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 underlying_id() const;
  void set_underlying_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_underlying_id() const;
  void _internal_set_underlying_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Contract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::ComboLeg > combo_legs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sec_id_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sec_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr combo_legs_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Jde::Markets::Proto::DeltaNeutralContract* delta_neutral_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int security_type_;
  double strike_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_;
  int right_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multiplier_;
  int exchange_;
  int primary_exchange_;
  int currency_;
  bool include_expired_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 underlying_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ib_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Order final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  ~Order() override;
  explicit constexpr Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return new Order();
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOcaGroupFieldNumber = 12,
    kOrderRefFieldNumber = 14,
    kRule80AFieldNumber = 25,
    kFaGroupFieldNumber = 32,
    kFaProfileFieldNumber = 33,
    kFaMethodFieldNumber = 34,
    kFaPercentageFieldNumber = 35,
    kOpenCloseFieldNumber = 36,
    kDesignatedLocationFieldNumber = 39,
    kDeltaNeutralOrderTypeFieldNumber = 56,
    kAccountFieldNumber = 71,
    kIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kPermIdFieldNumber = 3,
    kTypeFieldNumber = 6,
    kQuantityFieldNumber = 5,
    kLimitFieldNumber = 7,
    kAuxFieldNumber = 8,
    kTimeInForceFieldNumber = 9,
    kActiveStartTimeFieldNumber = 10,
    kActiveStopTimeFieldNumber = 11,
    kOcaTypeFieldNumber = 13,
    kIsBuyFieldNumber = 4,
    kTransmitFieldNumber = 15,
    kBlockOrderFieldNumber = 17,
    kSweepToFillFieldNumber = 18,
    kParentIdFieldNumber = 16,
    kDisplaySizeFieldNumber = 19,
    kTriggerMethodFieldNumber = 20,
    kGoodAfterTimeFieldNumber = 23,
    kGoodTillDateFieldNumber = 24,
    kOutsideRthFieldNumber = 21,
    kHiddenFieldNumber = 22,
    kAllOrNoneFieldNumber = 26,
    kOverridePercentageConstraintsFieldNumber = 29,
    kMinQtyFieldNumber = 27,
    kPercentOffsetFieldNumber = 28,
    kTrailStopPriceFieldNumber = 30,
    kTrailingPercentFieldNumber = 31,
    kOriginFieldNumber = 37,
    kShortSaleSlotFieldNumber = 38,
    kDiscretionaryAmtFieldNumber = 41,
    kNbboPriceCapFieldNumber = 44,
    kExemptCodeFieldNumber = 40,
    kEtradeOnlyFieldNumber = 42,
    kFirmQuoteOnlyFieldNumber = 43,
    kOptOutSmartRoutingFieldNumber = 45,
    kRandomizeSizeFieldNumber = 52,
    kStartingPriceFieldNumber = 47,
    kStockRefPriceFieldNumber = 48,
    kDeltaFieldNumber = 49,
    kStockRangeLowerFieldNumber = 50,
    kAuctionStrategyFieldNumber = 46,
    kVolatilityTypeFieldNumber = 55,
    kStockRangeUpperFieldNumber = 51,
    kVolatilityFieldNumber = 54,
    kDeltaNeutralAuxPriceFieldNumber = 57,
    kDeltaNeutralConIdFieldNumber = 58,
    kRandomizePriceFieldNumber = 53,
    kWhatIfFieldNumber = 70,
    kUsePriceMngmntAlgrthmFieldNumber = 99,
  };
  // string oca_group = 12;
  void clear_oca_group();
  const std::string& oca_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oca_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oca_group();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_oca_group();
  void set_allocated_oca_group(std::string* oca_group);
  private:
  const std::string& _internal_oca_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oca_group(const std::string& value);
  std::string* _internal_mutable_oca_group();
  public:

  // string order_ref = 14;
  void clear_order_ref();
  const std::string& order_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_ref();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_order_ref();
  void set_allocated_order_ref(std::string* order_ref);
  private:
  const std::string& _internal_order_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_ref(const std::string& value);
  std::string* _internal_mutable_order_ref();
  public:

  // string rule_80a = 25;
  void clear_rule_80a();
  const std::string& rule_80a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rule_80a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rule_80a();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_rule_80a();
  void set_allocated_rule_80a(std::string* rule_80a);
  private:
  const std::string& _internal_rule_80a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rule_80a(const std::string& value);
  std::string* _internal_mutable_rule_80a();
  public:

  // string fa_group = 32;
  void clear_fa_group();
  const std::string& fa_group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fa_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fa_group();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_fa_group();
  void set_allocated_fa_group(std::string* fa_group);
  private:
  const std::string& _internal_fa_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fa_group(const std::string& value);
  std::string* _internal_mutable_fa_group();
  public:

  // string fa_profile = 33;
  void clear_fa_profile();
  const std::string& fa_profile() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fa_profile(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fa_profile();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_fa_profile();
  void set_allocated_fa_profile(std::string* fa_profile);
  private:
  const std::string& _internal_fa_profile() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fa_profile(const std::string& value);
  std::string* _internal_mutable_fa_profile();
  public:

  // string fa_method = 34;
  void clear_fa_method();
  const std::string& fa_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fa_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fa_method();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_fa_method();
  void set_allocated_fa_method(std::string* fa_method);
  private:
  const std::string& _internal_fa_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fa_method(const std::string& value);
  std::string* _internal_mutable_fa_method();
  public:

  // string fa_percentage = 35;
  void clear_fa_percentage();
  const std::string& fa_percentage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fa_percentage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fa_percentage();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_fa_percentage();
  void set_allocated_fa_percentage(std::string* fa_percentage);
  private:
  const std::string& _internal_fa_percentage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fa_percentage(const std::string& value);
  std::string* _internal_mutable_fa_percentage();
  public:

  // string open_close = 36;
  void clear_open_close();
  const std::string& open_close() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_open_close(ArgT0&& arg0, ArgT... args);
  std::string* mutable_open_close();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_open_close();
  void set_allocated_open_close(std::string* open_close);
  private:
  const std::string& _internal_open_close() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_open_close(const std::string& value);
  std::string* _internal_mutable_open_close();
  public:

  // string designated_location = 39;
  void clear_designated_location();
  const std::string& designated_location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_designated_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_designated_location();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_designated_location();
  void set_allocated_designated_location(std::string* designated_location);
  private:
  const std::string& _internal_designated_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_designated_location(const std::string& value);
  std::string* _internal_mutable_designated_location();
  public:

  // string delta_neutral_order_type = 56;
  void clear_delta_neutral_order_type();
  const std::string& delta_neutral_order_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delta_neutral_order_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delta_neutral_order_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_delta_neutral_order_type();
  void set_allocated_delta_neutral_order_type(std::string* delta_neutral_order_type);
  private:
  const std::string& _internal_delta_neutral_order_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delta_neutral_order_type(const std::string& value);
  std::string* _internal_mutable_delta_neutral_order_type();
  public:

  // string account = 71;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 client_id = 2;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 perm_id = 3;
  void clear_perm_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 perm_id() const;
  void set_perm_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_perm_id() const;
  void _internal_set_perm_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Jde.Markets.Proto.EOrderType type = 6;
  void clear_type();
  ::Jde::Markets::Proto::EOrderType type() const;
  void set_type(::Jde::Markets::Proto::EOrderType value);
  private:
  ::Jde::Markets::Proto::EOrderType _internal_type() const;
  void _internal_set_type(::Jde::Markets::Proto::EOrderType value);
  public:

  // double quantity = 5;
  void clear_quantity();
  double quantity() const;
  void set_quantity(double value);
  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);
  public:

  // double limit = 7;
  void clear_limit();
  double limit() const;
  void set_limit(double value);
  private:
  double _internal_limit() const;
  void _internal_set_limit(double value);
  public:

  // double aux = 8;
  void clear_aux();
  double aux() const;
  void set_aux(double value);
  private:
  double _internal_aux() const;
  void _internal_set_aux(double value);
  public:

  // .Jde.Markets.Proto.ETimeInForce time_in_force = 9;
  void clear_time_in_force();
  ::Jde::Markets::Proto::ETimeInForce time_in_force() const;
  void set_time_in_force(::Jde::Markets::Proto::ETimeInForce value);
  private:
  ::Jde::Markets::Proto::ETimeInForce _internal_time_in_force() const;
  void _internal_set_time_in_force(::Jde::Markets::Proto::ETimeInForce value);
  public:

  // int32 active_start_time = 10;
  void clear_active_start_time();
  ::PROTOBUF_NAMESPACE_ID::int32 active_start_time() const;
  void set_active_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_active_start_time() const;
  void _internal_set_active_start_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 active_stop_time = 11;
  void clear_active_stop_time();
  ::PROTOBUF_NAMESPACE_ID::int32 active_stop_time() const;
  void set_active_stop_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_active_stop_time() const;
  void _internal_set_active_stop_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 oca_type = 13;
  void clear_oca_type();
  ::PROTOBUF_NAMESPACE_ID::int32 oca_type() const;
  void set_oca_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oca_type() const;
  void _internal_set_oca_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_buy = 4;
  void clear_is_buy();
  bool is_buy() const;
  void set_is_buy(bool value);
  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);
  public:

  // bool transmit = 15;
  void clear_transmit();
  bool transmit() const;
  void set_transmit(bool value);
  private:
  bool _internal_transmit() const;
  void _internal_set_transmit(bool value);
  public:

  // bool block_order = 17;
  void clear_block_order();
  bool block_order() const;
  void set_block_order(bool value);
  private:
  bool _internal_block_order() const;
  void _internal_set_block_order(bool value);
  public:

  // bool sweep_to_fill = 18;
  void clear_sweep_to_fill();
  bool sweep_to_fill() const;
  void set_sweep_to_fill(bool value);
  private:
  bool _internal_sweep_to_fill() const;
  void _internal_set_sweep_to_fill(bool value);
  public:

  // int32 parent_id = 16;
  void clear_parent_id();
  ::PROTOBUF_NAMESPACE_ID::int32 parent_id() const;
  void set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parent_id() const;
  void _internal_set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 display_size = 19;
  void clear_display_size();
  ::PROTOBUF_NAMESPACE_ID::int32 display_size() const;
  void set_display_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_display_size() const;
  void _internal_set_display_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 trigger_method = 20;
  void clear_trigger_method();
  ::PROTOBUF_NAMESPACE_ID::int32 trigger_method() const;
  void set_trigger_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trigger_method() const;
  void _internal_set_trigger_method(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 good_after_time = 23;
  void clear_good_after_time();
  ::PROTOBUF_NAMESPACE_ID::int32 good_after_time() const;
  void set_good_after_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_good_after_time() const;
  void _internal_set_good_after_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 good_till_date = 24;
  void clear_good_till_date();
  ::PROTOBUF_NAMESPACE_ID::int32 good_till_date() const;
  void set_good_till_date(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_good_till_date() const;
  void _internal_set_good_till_date(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool outside_rth = 21;
  void clear_outside_rth();
  bool outside_rth() const;
  void set_outside_rth(bool value);
  private:
  bool _internal_outside_rth() const;
  void _internal_set_outside_rth(bool value);
  public:

  // bool hidden = 22;
  void clear_hidden();
  bool hidden() const;
  void set_hidden(bool value);
  private:
  bool _internal_hidden() const;
  void _internal_set_hidden(bool value);
  public:

  // bool all_or_none = 26;
  void clear_all_or_none();
  bool all_or_none() const;
  void set_all_or_none(bool value);
  private:
  bool _internal_all_or_none() const;
  void _internal_set_all_or_none(bool value);
  public:

  // bool override_percentage_constraints = 29;
  void clear_override_percentage_constraints();
  bool override_percentage_constraints() const;
  void set_override_percentage_constraints(bool value);
  private:
  bool _internal_override_percentage_constraints() const;
  void _internal_set_override_percentage_constraints(bool value);
  public:

  // int32 min_qty = 27;
  void clear_min_qty();
  ::PROTOBUF_NAMESPACE_ID::int32 min_qty() const;
  void set_min_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_qty() const;
  void _internal_set_min_qty(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double percent_offset = 28;
  void clear_percent_offset();
  double percent_offset() const;
  void set_percent_offset(double value);
  private:
  double _internal_percent_offset() const;
  void _internal_set_percent_offset(double value);
  public:

  // double trail_stop_price = 30;
  void clear_trail_stop_price();
  double trail_stop_price() const;
  void set_trail_stop_price(double value);
  private:
  double _internal_trail_stop_price() const;
  void _internal_set_trail_stop_price(double value);
  public:

  // double trailing_percent = 31;
  void clear_trailing_percent();
  double trailing_percent() const;
  void set_trailing_percent(double value);
  private:
  double _internal_trailing_percent() const;
  void _internal_set_trailing_percent(double value);
  public:

  // uint32 origin = 37;
  void clear_origin();
  ::PROTOBUF_NAMESPACE_ID::uint32 origin() const;
  void set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_origin() const;
  void _internal_set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 short_sale_slot = 38;
  void clear_short_sale_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 short_sale_slot() const;
  void set_short_sale_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_short_sale_slot() const;
  void _internal_set_short_sale_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double discretionary_amt = 41;
  void clear_discretionary_amt();
  double discretionary_amt() const;
  void set_discretionary_amt(double value);
  private:
  double _internal_discretionary_amt() const;
  void _internal_set_discretionary_amt(double value);
  public:

  // double nbbo_price_cap = 44;
  void clear_nbbo_price_cap();
  double nbbo_price_cap() const;
  void set_nbbo_price_cap(double value);
  private:
  double _internal_nbbo_price_cap() const;
  void _internal_set_nbbo_price_cap(double value);
  public:

  // int32 exempt_code = 40;
  void clear_exempt_code();
  ::PROTOBUF_NAMESPACE_ID::int32 exempt_code() const;
  void set_exempt_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exempt_code() const;
  void _internal_set_exempt_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool etrade_only = 42;
  void clear_etrade_only();
  bool etrade_only() const;
  void set_etrade_only(bool value);
  private:
  bool _internal_etrade_only() const;
  void _internal_set_etrade_only(bool value);
  public:

  // bool firm_quote_only = 43;
  void clear_firm_quote_only();
  bool firm_quote_only() const;
  void set_firm_quote_only(bool value);
  private:
  bool _internal_firm_quote_only() const;
  void _internal_set_firm_quote_only(bool value);
  public:

  // bool opt_out_smart_routing = 45;
  void clear_opt_out_smart_routing();
  bool opt_out_smart_routing() const;
  void set_opt_out_smart_routing(bool value);
  private:
  bool _internal_opt_out_smart_routing() const;
  void _internal_set_opt_out_smart_routing(bool value);
  public:

  // bool randomize_size = 52;
  void clear_randomize_size();
  bool randomize_size() const;
  void set_randomize_size(bool value);
  private:
  bool _internal_randomize_size() const;
  void _internal_set_randomize_size(bool value);
  public:

  // double starting_price = 47;
  void clear_starting_price();
  double starting_price() const;
  void set_starting_price(double value);
  private:
  double _internal_starting_price() const;
  void _internal_set_starting_price(double value);
  public:

  // double stock_ref_price = 48;
  void clear_stock_ref_price();
  double stock_ref_price() const;
  void set_stock_ref_price(double value);
  private:
  double _internal_stock_ref_price() const;
  void _internal_set_stock_ref_price(double value);
  public:

  // double delta = 49;
  void clear_delta();
  double delta() const;
  void set_delta(double value);
  private:
  double _internal_delta() const;
  void _internal_set_delta(double value);
  public:

  // double stock_range_lower = 50;
  void clear_stock_range_lower();
  double stock_range_lower() const;
  void set_stock_range_lower(double value);
  private:
  double _internal_stock_range_lower() const;
  void _internal_set_stock_range_lower(double value);
  public:

  // int32 auction_strategy = 46;
  void clear_auction_strategy();
  ::PROTOBUF_NAMESPACE_ID::int32 auction_strategy() const;
  void set_auction_strategy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auction_strategy() const;
  void _internal_set_auction_strategy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 volatility_type = 55;
  void clear_volatility_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 volatility_type() const;
  void set_volatility_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volatility_type() const;
  void _internal_set_volatility_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double stock_range_upper = 51;
  void clear_stock_range_upper();
  double stock_range_upper() const;
  void set_stock_range_upper(double value);
  private:
  double _internal_stock_range_upper() const;
  void _internal_set_stock_range_upper(double value);
  public:

  // double volatility = 54;
  void clear_volatility();
  double volatility() const;
  void set_volatility(double value);
  private:
  double _internal_volatility() const;
  void _internal_set_volatility(double value);
  public:

  // double delta_neutral_aux_price = 57;
  void clear_delta_neutral_aux_price();
  double delta_neutral_aux_price() const;
  void set_delta_neutral_aux_price(double value);
  private:
  double _internal_delta_neutral_aux_price() const;
  void _internal_set_delta_neutral_aux_price(double value);
  public:

  // int32 delta_neutral_con_id = 58;
  void clear_delta_neutral_con_id();
  ::PROTOBUF_NAMESPACE_ID::int32 delta_neutral_con_id() const;
  void set_delta_neutral_con_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delta_neutral_con_id() const;
  void _internal_set_delta_neutral_con_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool randomize_price = 53;
  void clear_randomize_price();
  bool randomize_price() const;
  void set_randomize_price(bool value);
  private:
  bool _internal_randomize_price() const;
  void _internal_set_randomize_price(bool value);
  public:

  // bool what_if = 70;
  void clear_what_if();
  bool what_if() const;
  void set_what_if(bool value);
  private:
  bool _internal_what_if() const;
  void _internal_set_what_if(bool value);
  public:

  // int32 use_price_mngmnt_algrthm = 99;
  void clear_use_price_mngmnt_algrthm();
  ::PROTOBUF_NAMESPACE_ID::int32 use_price_mngmnt_algrthm() const;
  void set_use_price_mngmnt_algrthm(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_use_price_mngmnt_algrthm() const;
  void _internal_set_use_price_mngmnt_algrthm(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oca_group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rule_80a_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fa_group_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fa_profile_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fa_method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fa_percentage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr open_close_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr designated_location_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delta_neutral_order_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 perm_id_;
  int type_;
  double quantity_;
  double limit_;
  double aux_;
  int time_in_force_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_start_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_stop_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 oca_type_;
  bool is_buy_;
  bool transmit_;
  bool block_order_;
  bool sweep_to_fill_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 trigger_method_;
  ::PROTOBUF_NAMESPACE_ID::int32 good_after_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 good_till_date_;
  bool outside_rth_;
  bool hidden_;
  bool all_or_none_;
  bool override_percentage_constraints_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_qty_;
  double percent_offset_;
  double trail_stop_price_;
  double trailing_percent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 origin_;
  ::PROTOBUF_NAMESPACE_ID::int32 short_sale_slot_;
  double discretionary_amt_;
  double nbbo_price_cap_;
  ::PROTOBUF_NAMESPACE_ID::int32 exempt_code_;
  bool etrade_only_;
  bool firm_quote_only_;
  bool opt_out_smart_routing_;
  bool randomize_size_;
  double starting_price_;
  double stock_ref_price_;
  double delta_;
  double stock_range_lower_;
  ::PROTOBUF_NAMESPACE_ID::int32 auction_strategy_;
  ::PROTOBUF_NAMESPACE_ID::uint32 volatility_type_;
  double stock_range_upper_;
  double volatility_;
  double delta_neutral_aux_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 delta_neutral_con_id_;
  bool randomize_price_;
  bool what_if_;
  ::PROTOBUF_NAMESPACE_ID::int32 use_price_mngmnt_algrthm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ib_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ComboLeg

// uint32 contract_id = 1;
inline void ComboLeg::clear_contract_id() {
  contract_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ComboLeg::_internal_contract_id() const {
  return contract_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ComboLeg::contract_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.contract_id)
  return _internal_contract_id();
}
inline void ComboLeg::_internal_set_contract_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  contract_id_ = value;
}
inline void ComboLeg::set_contract_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.contract_id)
}

// int32 ratio = 2;
inline void ComboLeg::clear_ratio() {
  ratio_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::_internal_ratio() const {
  return ratio_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::ratio() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.ratio)
  return _internal_ratio();
}
inline void ComboLeg::_internal_set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ratio_ = value;
}
inline void ComboLeg::set_ratio(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.ratio)
}

// string action = 3;
inline void ComboLeg::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& ComboLeg::action() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComboLeg::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.action)
}
inline std::string* ComboLeg::mutable_action() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.ComboLeg.action)
  return _internal_mutable_action();
}
inline const std::string& ComboLeg::_internal_action() const {
  return action_.Get();
}
inline void ComboLeg::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComboLeg::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComboLeg::release_action() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.ComboLeg.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComboLeg::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.ComboLeg.action)
}

// string exchange = 4;
inline void ComboLeg::clear_exchange() {
  exchange_.ClearToEmpty();
}
inline const std::string& ComboLeg::exchange() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.exchange)
  return _internal_exchange();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComboLeg::set_exchange(ArgT0&& arg0, ArgT... args) {
 
 exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.exchange)
}
inline std::string* ComboLeg::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.ComboLeg.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& ComboLeg::_internal_exchange() const {
  return exchange_.Get();
}
inline void ComboLeg::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComboLeg::_internal_mutable_exchange() {
  
  return exchange_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComboLeg::release_exchange() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.ComboLeg.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComboLeg::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.ComboLeg.exchange)
}

// int32 open_close = 5;
inline void ComboLeg::clear_open_close() {
  open_close_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::_internal_open_close() const {
  return open_close_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::open_close() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.open_close)
  return _internal_open_close();
}
inline void ComboLeg::_internal_set_open_close(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_close_ = value;
}
inline void ComboLeg::set_open_close(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_open_close(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.open_close)
}

// int32 short_sales_lot = 6;
inline void ComboLeg::clear_short_sales_lot() {
  short_sales_lot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::_internal_short_sales_lot() const {
  return short_sales_lot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::short_sales_lot() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.short_sales_lot)
  return _internal_short_sales_lot();
}
inline void ComboLeg::_internal_set_short_sales_lot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  short_sales_lot_ = value;
}
inline void ComboLeg::set_short_sales_lot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_short_sales_lot(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.short_sales_lot)
}

// string designated_location = 7;
inline void ComboLeg::clear_designated_location() {
  designated_location_.ClearToEmpty();
}
inline const std::string& ComboLeg::designated_location() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.designated_location)
  return _internal_designated_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ComboLeg::set_designated_location(ArgT0&& arg0, ArgT... args) {
 
 designated_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.designated_location)
}
inline std::string* ComboLeg::mutable_designated_location() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.ComboLeg.designated_location)
  return _internal_mutable_designated_location();
}
inline const std::string& ComboLeg::_internal_designated_location() const {
  return designated_location_.Get();
}
inline void ComboLeg::_internal_set_designated_location(const std::string& value) {
  
  designated_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ComboLeg::_internal_mutable_designated_location() {
  
  return designated_location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ComboLeg::release_designated_location() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.ComboLeg.designated_location)
  return designated_location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ComboLeg::set_allocated_designated_location(std::string* designated_location) {
  if (designated_location != nullptr) {
    
  } else {
    
  }
  designated_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), designated_location,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.ComboLeg.designated_location)
}

// int32 exempt_code = 8;
inline void ComboLeg::clear_exempt_code() {
  exempt_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::_internal_exempt_code() const {
  return exempt_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ComboLeg::exempt_code() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.ComboLeg.exempt_code)
  return _internal_exempt_code();
}
inline void ComboLeg::_internal_set_exempt_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exempt_code_ = value;
}
inline void ComboLeg::set_exempt_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exempt_code(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.ComboLeg.exempt_code)
}

// -------------------------------------------------------------------

// DeltaNeutralContract

// int32 id = 1;
inline void DeltaNeutralContract::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeltaNeutralContract::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeltaNeutralContract::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.DeltaNeutralContract.id)
  return _internal_id();
}
inline void DeltaNeutralContract::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DeltaNeutralContract::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.DeltaNeutralContract.id)
}

// double delta = 2;
inline void DeltaNeutralContract::clear_delta() {
  delta_ = 0;
}
inline double DeltaNeutralContract::_internal_delta() const {
  return delta_;
}
inline double DeltaNeutralContract::delta() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.DeltaNeutralContract.delta)
  return _internal_delta();
}
inline void DeltaNeutralContract::_internal_set_delta(double value) {
  
  delta_ = value;
}
inline void DeltaNeutralContract::set_delta(double value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.DeltaNeutralContract.delta)
}

// double price = 3;
inline void DeltaNeutralContract::clear_price() {
  price_ = 0;
}
inline double DeltaNeutralContract::_internal_price() const {
  return price_;
}
inline double DeltaNeutralContract::price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.DeltaNeutralContract.price)
  return _internal_price();
}
inline void DeltaNeutralContract::_internal_set_price(double value) {
  
  price_ = value;
}
inline void DeltaNeutralContract::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.DeltaNeutralContract.price)
}

// -------------------------------------------------------------------

// Contract

// uint32 id = 1;
inline void Contract::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.id)
  return _internal_id();
}
inline void Contract::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Contract::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.id)
}

// string symbol = 2;
inline void Contract::clear_symbol() {
  symbol_.ClearToEmpty();
}
inline const std::string& Contract::symbol() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.symbol)
  return _internal_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Contract::set_symbol(ArgT0&& arg0, ArgT... args) {
 
 symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.symbol)
}
inline std::string* Contract::mutable_symbol() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.symbol)
  return _internal_mutable_symbol();
}
inline const std::string& Contract::_internal_symbol() const {
  return symbol_.Get();
}
inline void Contract::_internal_set_symbol(const std::string& value) {
  
  symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Contract::_internal_mutable_symbol() {
  
  return symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Contract::release_symbol() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.symbol)
  return symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Contract::set_allocated_symbol(std::string* symbol) {
  if (symbol != nullptr) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.symbol)
}

// .Jde.Markets.Proto.SecurityType security_type = 3;
inline void Contract::clear_security_type() {
  security_type_ = 0;
}
inline ::Jde::Markets::Proto::SecurityType Contract::_internal_security_type() const {
  return static_cast< ::Jde::Markets::Proto::SecurityType >(security_type_);
}
inline ::Jde::Markets::Proto::SecurityType Contract::security_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.security_type)
  return _internal_security_type();
}
inline void Contract::_internal_set_security_type(::Jde::Markets::Proto::SecurityType value) {
  
  security_type_ = value;
}
inline void Contract::set_security_type(::Jde::Markets::Proto::SecurityType value) {
  _internal_set_security_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.security_type)
}

// uint32 expiration = 4;
inline void Contract::clear_expiration() {
  expiration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::_internal_expiration() const {
  return expiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::expiration() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.expiration)
  return _internal_expiration();
}
inline void Contract::_internal_set_expiration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiration_ = value;
}
inline void Contract::set_expiration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiration(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.expiration)
}

// double strike = 5;
inline void Contract::clear_strike() {
  strike_ = 0;
}
inline double Contract::_internal_strike() const {
  return strike_;
}
inline double Contract::strike() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.strike)
  return _internal_strike();
}
inline void Contract::_internal_set_strike(double value) {
  
  strike_ = value;
}
inline void Contract::set_strike(double value) {
  _internal_set_strike(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.strike)
}

// .Jde.Markets.Proto.SecurityRight right = 6;
inline void Contract::clear_right() {
  right_ = 0;
}
inline ::Jde::Markets::Proto::SecurityRight Contract::_internal_right() const {
  return static_cast< ::Jde::Markets::Proto::SecurityRight >(right_);
}
inline ::Jde::Markets::Proto::SecurityRight Contract::right() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.right)
  return _internal_right();
}
inline void Contract::_internal_set_right(::Jde::Markets::Proto::SecurityRight value) {
  
  right_ = value;
}
inline void Contract::set_right(::Jde::Markets::Proto::SecurityRight value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.right)
}

// uint32 multiplier = 7;
inline void Contract::clear_multiplier() {
  multiplier_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::_internal_multiplier() const {
  return multiplier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::multiplier() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.multiplier)
  return _internal_multiplier();
}
inline void Contract::_internal_set_multiplier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  multiplier_ = value;
}
inline void Contract::set_multiplier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_multiplier(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.multiplier)
}

// .Jde.Markets.Proto.Exchanges exchange = 8;
inline void Contract::clear_exchange() {
  exchange_ = 0;
}
inline ::Jde::Markets::Proto::Exchanges Contract::_internal_exchange() const {
  return static_cast< ::Jde::Markets::Proto::Exchanges >(exchange_);
}
inline ::Jde::Markets::Proto::Exchanges Contract::exchange() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.exchange)
  return _internal_exchange();
}
inline void Contract::_internal_set_exchange(::Jde::Markets::Proto::Exchanges value) {
  
  exchange_ = value;
}
inline void Contract::set_exchange(::Jde::Markets::Proto::Exchanges value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.exchange)
}

// .Jde.Markets.Proto.Exchanges primary_exchange = 9;
inline void Contract::clear_primary_exchange() {
  primary_exchange_ = 0;
}
inline ::Jde::Markets::Proto::Exchanges Contract::_internal_primary_exchange() const {
  return static_cast< ::Jde::Markets::Proto::Exchanges >(primary_exchange_);
}
inline ::Jde::Markets::Proto::Exchanges Contract::primary_exchange() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.primary_exchange)
  return _internal_primary_exchange();
}
inline void Contract::_internal_set_primary_exchange(::Jde::Markets::Proto::Exchanges value) {
  
  primary_exchange_ = value;
}
inline void Contract::set_primary_exchange(::Jde::Markets::Proto::Exchanges value) {
  _internal_set_primary_exchange(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.primary_exchange)
}

// .Jde.Markets.Proto.Currencies currency = 10;
inline void Contract::clear_currency() {
  currency_ = 0;
}
inline ::Jde::Markets::Proto::Currencies Contract::_internal_currency() const {
  return static_cast< ::Jde::Markets::Proto::Currencies >(currency_);
}
inline ::Jde::Markets::Proto::Currencies Contract::currency() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.currency)
  return _internal_currency();
}
inline void Contract::_internal_set_currency(::Jde::Markets::Proto::Currencies value) {
  
  currency_ = value;
}
inline void Contract::set_currency(::Jde::Markets::Proto::Currencies value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.currency)
}

// string local_symbol = 11;
inline void Contract::clear_local_symbol() {
  local_symbol_.ClearToEmpty();
}
inline const std::string& Contract::local_symbol() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.local_symbol)
  return _internal_local_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Contract::set_local_symbol(ArgT0&& arg0, ArgT... args) {
 
 local_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.local_symbol)
}
inline std::string* Contract::mutable_local_symbol() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.local_symbol)
  return _internal_mutable_local_symbol();
}
inline const std::string& Contract::_internal_local_symbol() const {
  return local_symbol_.Get();
}
inline void Contract::_internal_set_local_symbol(const std::string& value) {
  
  local_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Contract::_internal_mutable_local_symbol() {
  
  return local_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Contract::release_local_symbol() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.local_symbol)
  return local_symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Contract::set_allocated_local_symbol(std::string* local_symbol) {
  if (local_symbol != nullptr) {
    
  } else {
    
  }
  local_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.local_symbol)
}

// string trading_class = 12;
inline void Contract::clear_trading_class() {
  trading_class_.ClearToEmpty();
}
inline const std::string& Contract::trading_class() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.trading_class)
  return _internal_trading_class();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Contract::set_trading_class(ArgT0&& arg0, ArgT... args) {
 
 trading_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.trading_class)
}
inline std::string* Contract::mutable_trading_class() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.trading_class)
  return _internal_mutable_trading_class();
}
inline const std::string& Contract::_internal_trading_class() const {
  return trading_class_.Get();
}
inline void Contract::_internal_set_trading_class(const std::string& value) {
  
  trading_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Contract::_internal_mutable_trading_class() {
  
  return trading_class_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Contract::release_trading_class() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.trading_class)
  return trading_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Contract::set_allocated_trading_class(std::string* trading_class) {
  if (trading_class != nullptr) {
    
  } else {
    
  }
  trading_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_class,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.trading_class)
}

// bool include_expired = 13;
inline void Contract::clear_include_expired() {
  include_expired_ = false;
}
inline bool Contract::_internal_include_expired() const {
  return include_expired_;
}
inline bool Contract::include_expired() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.include_expired)
  return _internal_include_expired();
}
inline void Contract::_internal_set_include_expired(bool value) {
  
  include_expired_ = value;
}
inline void Contract::set_include_expired(bool value) {
  _internal_set_include_expired(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.include_expired)
}

// string sec_id_type = 14;
inline void Contract::clear_sec_id_type() {
  sec_id_type_.ClearToEmpty();
}
inline const std::string& Contract::sec_id_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.sec_id_type)
  return _internal_sec_id_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Contract::set_sec_id_type(ArgT0&& arg0, ArgT... args) {
 
 sec_id_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.sec_id_type)
}
inline std::string* Contract::mutable_sec_id_type() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.sec_id_type)
  return _internal_mutable_sec_id_type();
}
inline const std::string& Contract::_internal_sec_id_type() const {
  return sec_id_type_.Get();
}
inline void Contract::_internal_set_sec_id_type(const std::string& value) {
  
  sec_id_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Contract::_internal_mutable_sec_id_type() {
  
  return sec_id_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Contract::release_sec_id_type() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.sec_id_type)
  return sec_id_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Contract::set_allocated_sec_id_type(std::string* sec_id_type) {
  if (sec_id_type != nullptr) {
    
  } else {
    
  }
  sec_id_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sec_id_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.sec_id_type)
}

// string sec_id = 15;
inline void Contract::clear_sec_id() {
  sec_id_.ClearToEmpty();
}
inline const std::string& Contract::sec_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.sec_id)
  return _internal_sec_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Contract::set_sec_id(ArgT0&& arg0, ArgT... args) {
 
 sec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.sec_id)
}
inline std::string* Contract::mutable_sec_id() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.sec_id)
  return _internal_mutable_sec_id();
}
inline const std::string& Contract::_internal_sec_id() const {
  return sec_id_.Get();
}
inline void Contract::_internal_set_sec_id(const std::string& value) {
  
  sec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Contract::_internal_mutable_sec_id() {
  
  return sec_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Contract::release_sec_id() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.sec_id)
  return sec_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Contract::set_allocated_sec_id(std::string* sec_id) {
  if (sec_id != nullptr) {
    
  } else {
    
  }
  sec_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sec_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.sec_id)
}

// string combo_legs_description = 16;
inline void Contract::clear_combo_legs_description() {
  combo_legs_description_.ClearToEmpty();
}
inline const std::string& Contract::combo_legs_description() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.combo_legs_description)
  return _internal_combo_legs_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Contract::set_combo_legs_description(ArgT0&& arg0, ArgT... args) {
 
 combo_legs_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.combo_legs_description)
}
inline std::string* Contract::mutable_combo_legs_description() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.combo_legs_description)
  return _internal_mutable_combo_legs_description();
}
inline const std::string& Contract::_internal_combo_legs_description() const {
  return combo_legs_description_.Get();
}
inline void Contract::_internal_set_combo_legs_description(const std::string& value) {
  
  combo_legs_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Contract::_internal_mutable_combo_legs_description() {
  
  return combo_legs_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Contract::release_combo_legs_description() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.combo_legs_description)
  return combo_legs_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Contract::set_allocated_combo_legs_description(std::string* combo_legs_description) {
  if (combo_legs_description != nullptr) {
    
  } else {
    
  }
  combo_legs_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), combo_legs_description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.combo_legs_description)
}

// repeated .Jde.Markets.Proto.ComboLeg combo_Legs = 17;
inline int Contract::_internal_combo_legs_size() const {
  return combo_legs_.size();
}
inline int Contract::combo_legs_size() const {
  return _internal_combo_legs_size();
}
inline void Contract::clear_combo_legs() {
  combo_legs_.Clear();
}
inline ::Jde::Markets::Proto::ComboLeg* Contract::mutable_combo_legs(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.combo_Legs)
  return combo_legs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::ComboLeg >*
Contract::mutable_combo_legs() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Contract.combo_Legs)
  return &combo_legs_;
}
inline const ::Jde::Markets::Proto::ComboLeg& Contract::_internal_combo_legs(int index) const {
  return combo_legs_.Get(index);
}
inline const ::Jde::Markets::Proto::ComboLeg& Contract::combo_legs(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.combo_Legs)
  return _internal_combo_legs(index);
}
inline ::Jde::Markets::Proto::ComboLeg* Contract::_internal_add_combo_legs() {
  return combo_legs_.Add();
}
inline ::Jde::Markets::Proto::ComboLeg* Contract::add_combo_legs() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Contract.combo_Legs)
  return _internal_add_combo_legs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::ComboLeg >&
Contract::combo_legs() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Contract.combo_Legs)
  return combo_legs_;
}

// .Jde.Markets.Proto.DeltaNeutralContract delta_neutral = 18;
inline bool Contract::_internal_has_delta_neutral() const {
  return this != internal_default_instance() && delta_neutral_ != nullptr;
}
inline bool Contract::has_delta_neutral() const {
  return _internal_has_delta_neutral();
}
inline void Contract::clear_delta_neutral() {
  if (GetArenaForAllocation() == nullptr && delta_neutral_ != nullptr) {
    delete delta_neutral_;
  }
  delta_neutral_ = nullptr;
}
inline const ::Jde::Markets::Proto::DeltaNeutralContract& Contract::_internal_delta_neutral() const {
  const ::Jde::Markets::Proto::DeltaNeutralContract* p = delta_neutral_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::DeltaNeutralContract&>(
      ::Jde::Markets::Proto::_DeltaNeutralContract_default_instance_);
}
inline const ::Jde::Markets::Proto::DeltaNeutralContract& Contract::delta_neutral() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.delta_neutral)
  return _internal_delta_neutral();
}
inline void Contract::unsafe_arena_set_allocated_delta_neutral(
    ::Jde::Markets::Proto::DeltaNeutralContract* delta_neutral) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delta_neutral_);
  }
  delta_neutral_ = delta_neutral;
  if (delta_neutral) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Contract.delta_neutral)
}
inline ::Jde::Markets::Proto::DeltaNeutralContract* Contract::release_delta_neutral() {
  
  ::Jde::Markets::Proto::DeltaNeutralContract* temp = delta_neutral_;
  delta_neutral_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::DeltaNeutralContract* Contract::unsafe_arena_release_delta_neutral() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.delta_neutral)
  
  ::Jde::Markets::Proto::DeltaNeutralContract* temp = delta_neutral_;
  delta_neutral_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::DeltaNeutralContract* Contract::_internal_mutable_delta_neutral() {
  
  if (delta_neutral_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::DeltaNeutralContract>(GetArenaForAllocation());
    delta_neutral_ = p;
  }
  return delta_neutral_;
}
inline ::Jde::Markets::Proto::DeltaNeutralContract* Contract::mutable_delta_neutral() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.delta_neutral)
  return _internal_mutable_delta_neutral();
}
inline void Contract::set_allocated_delta_neutral(::Jde::Markets::Proto::DeltaNeutralContract* delta_neutral) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete delta_neutral_;
  }
  if (delta_neutral) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Jde::Markets::Proto::DeltaNeutralContract>::GetOwningArena(delta_neutral);
    if (message_arena != submessage_arena) {
      delta_neutral = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delta_neutral, submessage_arena);
    }
    
  } else {
    
  }
  delta_neutral_ = delta_neutral;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.delta_neutral)
}

// string name = 19;
inline void Contract::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Contract::name() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Contract::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.name)
}
inline std::string* Contract::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Contract.name)
  return _internal_mutable_name();
}
inline const std::string& Contract::_internal_name() const {
  return name_.Get();
}
inline void Contract::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Contract::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Contract::release_name() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Contract.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Contract::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Contract.name)
}

// uint32 flags = 20;
inline void Contract::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::flags() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.flags)
  return _internal_flags();
}
inline void Contract::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void Contract::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.flags)
}

// uint32 underlying_id = 21;
inline void Contract::clear_underlying_id() {
  underlying_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::_internal_underlying_id() const {
  return underlying_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Contract::underlying_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Contract.underlying_id)
  return _internal_underlying_id();
}
inline void Contract::_internal_set_underlying_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  underlying_id_ = value;
}
inline void Contract::set_underlying_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_underlying_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Contract.underlying_id)
}

// -------------------------------------------------------------------

// Order

// uint32 id = 1;
inline void Order::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.id)
  return _internal_id();
}
inline void Order::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Order::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.id)
}

// uint32 client_id = 2;
inline void Order::clear_client_id() {
  client_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::client_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.client_id)
  return _internal_client_id();
}
inline void Order::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  client_id_ = value;
}
inline void Order::set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.client_id)
}

// uint32 perm_id = 3;
inline void Order::clear_perm_id() {
  perm_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::_internal_perm_id() const {
  return perm_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::perm_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.perm_id)
  return _internal_perm_id();
}
inline void Order::_internal_set_perm_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  perm_id_ = value;
}
inline void Order::set_perm_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_perm_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.perm_id)
}

// bool is_buy = 4;
inline void Order::clear_is_buy() {
  is_buy_ = false;
}
inline bool Order::_internal_is_buy() const {
  return is_buy_;
}
inline bool Order::is_buy() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.is_buy)
  return _internal_is_buy();
}
inline void Order::_internal_set_is_buy(bool value) {
  
  is_buy_ = value;
}
inline void Order::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.is_buy)
}

// double quantity = 5;
inline void Order::clear_quantity() {
  quantity_ = 0;
}
inline double Order::_internal_quantity() const {
  return quantity_;
}
inline double Order::quantity() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.quantity)
  return _internal_quantity();
}
inline void Order::_internal_set_quantity(double value) {
  
  quantity_ = value;
}
inline void Order::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.quantity)
}

// .Jde.Markets.Proto.EOrderType type = 6;
inline void Order::clear_type() {
  type_ = 0;
}
inline ::Jde::Markets::Proto::EOrderType Order::_internal_type() const {
  return static_cast< ::Jde::Markets::Proto::EOrderType >(type_);
}
inline ::Jde::Markets::Proto::EOrderType Order::type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.type)
  return _internal_type();
}
inline void Order::_internal_set_type(::Jde::Markets::Proto::EOrderType value) {
  
  type_ = value;
}
inline void Order::set_type(::Jde::Markets::Proto::EOrderType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.type)
}

// double limit = 7;
inline void Order::clear_limit() {
  limit_ = 0;
}
inline double Order::_internal_limit() const {
  return limit_;
}
inline double Order::limit() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.limit)
  return _internal_limit();
}
inline void Order::_internal_set_limit(double value) {
  
  limit_ = value;
}
inline void Order::set_limit(double value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.limit)
}

// double aux = 8;
inline void Order::clear_aux() {
  aux_ = 0;
}
inline double Order::_internal_aux() const {
  return aux_;
}
inline double Order::aux() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.aux)
  return _internal_aux();
}
inline void Order::_internal_set_aux(double value) {
  
  aux_ = value;
}
inline void Order::set_aux(double value) {
  _internal_set_aux(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.aux)
}

// .Jde.Markets.Proto.ETimeInForce time_in_force = 9;
inline void Order::clear_time_in_force() {
  time_in_force_ = 0;
}
inline ::Jde::Markets::Proto::ETimeInForce Order::_internal_time_in_force() const {
  return static_cast< ::Jde::Markets::Proto::ETimeInForce >(time_in_force_);
}
inline ::Jde::Markets::Proto::ETimeInForce Order::time_in_force() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.time_in_force)
  return _internal_time_in_force();
}
inline void Order::_internal_set_time_in_force(::Jde::Markets::Proto::ETimeInForce value) {
  
  time_in_force_ = value;
}
inline void Order::set_time_in_force(::Jde::Markets::Proto::ETimeInForce value) {
  _internal_set_time_in_force(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.time_in_force)
}

// int32 active_start_time = 10;
inline void Order::clear_active_start_time() {
  active_start_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_active_start_time() const {
  return active_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::active_start_time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.active_start_time)
  return _internal_active_start_time();
}
inline void Order::_internal_set_active_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  active_start_time_ = value;
}
inline void Order::set_active_start_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_active_start_time(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.active_start_time)
}

// int32 active_stop_time = 11;
inline void Order::clear_active_stop_time() {
  active_stop_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_active_stop_time() const {
  return active_stop_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::active_stop_time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.active_stop_time)
  return _internal_active_stop_time();
}
inline void Order::_internal_set_active_stop_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  active_stop_time_ = value;
}
inline void Order::set_active_stop_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_active_stop_time(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.active_stop_time)
}

// string oca_group = 12;
inline void Order::clear_oca_group() {
  oca_group_.ClearToEmpty();
}
inline const std::string& Order::oca_group() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.oca_group)
  return _internal_oca_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_oca_group(ArgT0&& arg0, ArgT... args) {
 
 oca_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.oca_group)
}
inline std::string* Order::mutable_oca_group() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Order.oca_group)
  return _internal_mutable_oca_group();
}
inline const std::string& Order::_internal_oca_group() const {
  return oca_group_.Get();
}
inline void Order::_internal_set_oca_group(const std::string& value) {
  
  oca_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_oca_group() {
  
  return oca_group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Order::release_oca_group() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Order.oca_group)
  return oca_group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Order::set_allocated_oca_group(std::string* oca_group) {
  if (oca_group != nullptr) {
    
  } else {
    
  }
  oca_group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oca_group,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Order.oca_group)
}

// int32 oca_type = 13;
inline void Order::clear_oca_type() {
  oca_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_oca_type() const {
  return oca_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::oca_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.oca_type)
  return _internal_oca_type();
}
inline void Order::_internal_set_oca_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oca_type_ = value;
}
inline void Order::set_oca_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oca_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.oca_type)
}

// string order_ref = 14;
inline void Order::clear_order_ref() {
  order_ref_.ClearToEmpty();
}
inline const std::string& Order::order_ref() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.order_ref)
  return _internal_order_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_order_ref(ArgT0&& arg0, ArgT... args) {
 
 order_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.order_ref)
}
inline std::string* Order::mutable_order_ref() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Order.order_ref)
  return _internal_mutable_order_ref();
}
inline const std::string& Order::_internal_order_ref() const {
  return order_ref_.Get();
}
inline void Order::_internal_set_order_ref(const std::string& value) {
  
  order_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_order_ref() {
  
  return order_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Order::release_order_ref() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Order.order_ref)
  return order_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Order::set_allocated_order_ref(std::string* order_ref) {
  if (order_ref != nullptr) {
    
  } else {
    
  }
  order_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_ref,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Order.order_ref)
}

// bool transmit = 15;
inline void Order::clear_transmit() {
  transmit_ = false;
}
inline bool Order::_internal_transmit() const {
  return transmit_;
}
inline bool Order::transmit() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.transmit)
  return _internal_transmit();
}
inline void Order::_internal_set_transmit(bool value) {
  
  transmit_ = value;
}
inline void Order::set_transmit(bool value) {
  _internal_set_transmit(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.transmit)
}

// int32 parent_id = 16;
inline void Order::clear_parent_id() {
  parent_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_parent_id() const {
  return parent_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::parent_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.parent_id)
  return _internal_parent_id();
}
inline void Order::_internal_set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parent_id_ = value;
}
inline void Order::set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.parent_id)
}

// bool block_order = 17;
inline void Order::clear_block_order() {
  block_order_ = false;
}
inline bool Order::_internal_block_order() const {
  return block_order_;
}
inline bool Order::block_order() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.block_order)
  return _internal_block_order();
}
inline void Order::_internal_set_block_order(bool value) {
  
  block_order_ = value;
}
inline void Order::set_block_order(bool value) {
  _internal_set_block_order(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.block_order)
}

// bool sweep_to_fill = 18;
inline void Order::clear_sweep_to_fill() {
  sweep_to_fill_ = false;
}
inline bool Order::_internal_sweep_to_fill() const {
  return sweep_to_fill_;
}
inline bool Order::sweep_to_fill() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.sweep_to_fill)
  return _internal_sweep_to_fill();
}
inline void Order::_internal_set_sweep_to_fill(bool value) {
  
  sweep_to_fill_ = value;
}
inline void Order::set_sweep_to_fill(bool value) {
  _internal_set_sweep_to_fill(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.sweep_to_fill)
}

// int32 display_size = 19;
inline void Order::clear_display_size() {
  display_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_display_size() const {
  return display_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::display_size() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.display_size)
  return _internal_display_size();
}
inline void Order::_internal_set_display_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  display_size_ = value;
}
inline void Order::set_display_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_display_size(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.display_size)
}

// int32 trigger_method = 20;
inline void Order::clear_trigger_method() {
  trigger_method_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_trigger_method() const {
  return trigger_method_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::trigger_method() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.trigger_method)
  return _internal_trigger_method();
}
inline void Order::_internal_set_trigger_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trigger_method_ = value;
}
inline void Order::set_trigger_method(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trigger_method(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.trigger_method)
}

// bool outside_rth = 21;
inline void Order::clear_outside_rth() {
  outside_rth_ = false;
}
inline bool Order::_internal_outside_rth() const {
  return outside_rth_;
}
inline bool Order::outside_rth() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.outside_rth)
  return _internal_outside_rth();
}
inline void Order::_internal_set_outside_rth(bool value) {
  
  outside_rth_ = value;
}
inline void Order::set_outside_rth(bool value) {
  _internal_set_outside_rth(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.outside_rth)
}

// bool hidden = 22;
inline void Order::clear_hidden() {
  hidden_ = false;
}
inline bool Order::_internal_hidden() const {
  return hidden_;
}
inline bool Order::hidden() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.hidden)
  return _internal_hidden();
}
inline void Order::_internal_set_hidden(bool value) {
  
  hidden_ = value;
}
inline void Order::set_hidden(bool value) {
  _internal_set_hidden(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.hidden)
}

// int32 good_after_time = 23;
inline void Order::clear_good_after_time() {
  good_after_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_good_after_time() const {
  return good_after_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::good_after_time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.good_after_time)
  return _internal_good_after_time();
}
inline void Order::_internal_set_good_after_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  good_after_time_ = value;
}
inline void Order::set_good_after_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_good_after_time(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.good_after_time)
}

// int32 good_till_date = 24;
inline void Order::clear_good_till_date() {
  good_till_date_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_good_till_date() const {
  return good_till_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::good_till_date() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.good_till_date)
  return _internal_good_till_date();
}
inline void Order::_internal_set_good_till_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  good_till_date_ = value;
}
inline void Order::set_good_till_date(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_good_till_date(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.good_till_date)
}

// string rule_80a = 25;
inline void Order::clear_rule_80a() {
  rule_80a_.ClearToEmpty();
}
inline const std::string& Order::rule_80a() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.rule_80a)
  return _internal_rule_80a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_rule_80a(ArgT0&& arg0, ArgT... args) {
 
 rule_80a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.rule_80a)
}
inline std::string* Order::mutable_rule_80a() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Order.rule_80a)
  return _internal_mutable_rule_80a();
}
inline const std::string& Order::_internal_rule_80a() const {
  return rule_80a_.Get();
}
inline void Order::_internal_set_rule_80a(const std::string& value) {
  
  rule_80a_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_rule_80a() {
  
  return rule_80a_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Order::release_rule_80a() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Order.rule_80a)
  return rule_80a_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Order::set_allocated_rule_80a(std::string* rule_80a) {
  if (rule_80a != nullptr) {
    
  } else {
    
  }
  rule_80a_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rule_80a,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Order.rule_80a)
}

// bool all_or_none = 26;
inline void Order::clear_all_or_none() {
  all_or_none_ = false;
}
inline bool Order::_internal_all_or_none() const {
  return all_or_none_;
}
inline bool Order::all_or_none() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.all_or_none)
  return _internal_all_or_none();
}
inline void Order::_internal_set_all_or_none(bool value) {
  
  all_or_none_ = value;
}
inline void Order::set_all_or_none(bool value) {
  _internal_set_all_or_none(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.all_or_none)
}

// int32 min_qty = 27;
inline void Order::clear_min_qty() {
  min_qty_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_min_qty() const {
  return min_qty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::min_qty() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.min_qty)
  return _internal_min_qty();
}
inline void Order::_internal_set_min_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_qty_ = value;
}
inline void Order::set_min_qty(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_qty(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.min_qty)
}

// double percent_offset = 28;
inline void Order::clear_percent_offset() {
  percent_offset_ = 0;
}
inline double Order::_internal_percent_offset() const {
  return percent_offset_;
}
inline double Order::percent_offset() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.percent_offset)
  return _internal_percent_offset();
}
inline void Order::_internal_set_percent_offset(double value) {
  
  percent_offset_ = value;
}
inline void Order::set_percent_offset(double value) {
  _internal_set_percent_offset(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.percent_offset)
}

// bool override_percentage_constraints = 29;
inline void Order::clear_override_percentage_constraints() {
  override_percentage_constraints_ = false;
}
inline bool Order::_internal_override_percentage_constraints() const {
  return override_percentage_constraints_;
}
inline bool Order::override_percentage_constraints() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.override_percentage_constraints)
  return _internal_override_percentage_constraints();
}
inline void Order::_internal_set_override_percentage_constraints(bool value) {
  
  override_percentage_constraints_ = value;
}
inline void Order::set_override_percentage_constraints(bool value) {
  _internal_set_override_percentage_constraints(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.override_percentage_constraints)
}

// double trail_stop_price = 30;
inline void Order::clear_trail_stop_price() {
  trail_stop_price_ = 0;
}
inline double Order::_internal_trail_stop_price() const {
  return trail_stop_price_;
}
inline double Order::trail_stop_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.trail_stop_price)
  return _internal_trail_stop_price();
}
inline void Order::_internal_set_trail_stop_price(double value) {
  
  trail_stop_price_ = value;
}
inline void Order::set_trail_stop_price(double value) {
  _internal_set_trail_stop_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.trail_stop_price)
}

// double trailing_percent = 31;
inline void Order::clear_trailing_percent() {
  trailing_percent_ = 0;
}
inline double Order::_internal_trailing_percent() const {
  return trailing_percent_;
}
inline double Order::trailing_percent() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.trailing_percent)
  return _internal_trailing_percent();
}
inline void Order::_internal_set_trailing_percent(double value) {
  
  trailing_percent_ = value;
}
inline void Order::set_trailing_percent(double value) {
  _internal_set_trailing_percent(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.trailing_percent)
}

// string fa_group = 32;
inline void Order::clear_fa_group() {
  fa_group_.ClearToEmpty();
}
inline const std::string& Order::fa_group() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.fa_group)
  return _internal_fa_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_fa_group(ArgT0&& arg0, ArgT... args) {
 
 fa_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.fa_group)
}
inline std::string* Order::mutable_fa_group() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Order.fa_group)
  return _internal_mutable_fa_group();
}
inline const std::string& Order::_internal_fa_group() const {
  return fa_group_.Get();
}
inline void Order::_internal_set_fa_group(const std::string& value) {
  
  fa_group_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_fa_group() {
  
  return fa_group_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Order::release_fa_group() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Order.fa_group)
  return fa_group_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Order::set_allocated_fa_group(std::string* fa_group) {
  if (fa_group != nullptr) {
    
  } else {
    
  }
  fa_group_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fa_group,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Order.fa_group)
}

// string fa_profile = 33;
inline void Order::clear_fa_profile() {
  fa_profile_.ClearToEmpty();
}
inline const std::string& Order::fa_profile() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.fa_profile)
  return _internal_fa_profile();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_fa_profile(ArgT0&& arg0, ArgT... args) {
 
 fa_profile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.fa_profile)
}
inline std::string* Order::mutable_fa_profile() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Order.fa_profile)
  return _internal_mutable_fa_profile();
}
inline const std::string& Order::_internal_fa_profile() const {
  return fa_profile_.Get();
}
inline void Order::_internal_set_fa_profile(const std::string& value) {
  
  fa_profile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_fa_profile() {
  
  return fa_profile_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Order::release_fa_profile() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Order.fa_profile)
  return fa_profile_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Order::set_allocated_fa_profile(std::string* fa_profile) {
  if (fa_profile != nullptr) {
    
  } else {
    
  }
  fa_profile_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fa_profile,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Order.fa_profile)
}

// string fa_method = 34;
inline void Order::clear_fa_method() {
  fa_method_.ClearToEmpty();
}
inline const std::string& Order::fa_method() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.fa_method)
  return _internal_fa_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_fa_method(ArgT0&& arg0, ArgT... args) {
 
 fa_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.fa_method)
}
inline std::string* Order::mutable_fa_method() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Order.fa_method)
  return _internal_mutable_fa_method();
}
inline const std::string& Order::_internal_fa_method() const {
  return fa_method_.Get();
}
inline void Order::_internal_set_fa_method(const std::string& value) {
  
  fa_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_fa_method() {
  
  return fa_method_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Order::release_fa_method() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Order.fa_method)
  return fa_method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Order::set_allocated_fa_method(std::string* fa_method) {
  if (fa_method != nullptr) {
    
  } else {
    
  }
  fa_method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fa_method,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Order.fa_method)
}

// string fa_percentage = 35;
inline void Order::clear_fa_percentage() {
  fa_percentage_.ClearToEmpty();
}
inline const std::string& Order::fa_percentage() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.fa_percentage)
  return _internal_fa_percentage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_fa_percentage(ArgT0&& arg0, ArgT... args) {
 
 fa_percentage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.fa_percentage)
}
inline std::string* Order::mutable_fa_percentage() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Order.fa_percentage)
  return _internal_mutable_fa_percentage();
}
inline const std::string& Order::_internal_fa_percentage() const {
  return fa_percentage_.Get();
}
inline void Order::_internal_set_fa_percentage(const std::string& value) {
  
  fa_percentage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_fa_percentage() {
  
  return fa_percentage_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Order::release_fa_percentage() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Order.fa_percentage)
  return fa_percentage_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Order::set_allocated_fa_percentage(std::string* fa_percentage) {
  if (fa_percentage != nullptr) {
    
  } else {
    
  }
  fa_percentage_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fa_percentage,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Order.fa_percentage)
}

// string open_close = 36;
inline void Order::clear_open_close() {
  open_close_.ClearToEmpty();
}
inline const std::string& Order::open_close() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.open_close)
  return _internal_open_close();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_open_close(ArgT0&& arg0, ArgT... args) {
 
 open_close_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.open_close)
}
inline std::string* Order::mutable_open_close() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Order.open_close)
  return _internal_mutable_open_close();
}
inline const std::string& Order::_internal_open_close() const {
  return open_close_.Get();
}
inline void Order::_internal_set_open_close(const std::string& value) {
  
  open_close_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_open_close() {
  
  return open_close_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Order::release_open_close() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Order.open_close)
  return open_close_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Order::set_allocated_open_close(std::string* open_close) {
  if (open_close != nullptr) {
    
  } else {
    
  }
  open_close_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), open_close,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Order.open_close)
}

// uint32 origin = 37;
inline void Order::clear_origin() {
  origin_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::_internal_origin() const {
  return origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::origin() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.origin)
  return _internal_origin();
}
inline void Order::_internal_set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  origin_ = value;
}
inline void Order::set_origin(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.origin)
}

// int32 short_sale_slot = 38;
inline void Order::clear_short_sale_slot() {
  short_sale_slot_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_short_sale_slot() const {
  return short_sale_slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::short_sale_slot() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.short_sale_slot)
  return _internal_short_sale_slot();
}
inline void Order::_internal_set_short_sale_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  short_sale_slot_ = value;
}
inline void Order::set_short_sale_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_short_sale_slot(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.short_sale_slot)
}

// string designated_location = 39;
inline void Order::clear_designated_location() {
  designated_location_.ClearToEmpty();
}
inline const std::string& Order::designated_location() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.designated_location)
  return _internal_designated_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_designated_location(ArgT0&& arg0, ArgT... args) {
 
 designated_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.designated_location)
}
inline std::string* Order::mutable_designated_location() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Order.designated_location)
  return _internal_mutable_designated_location();
}
inline const std::string& Order::_internal_designated_location() const {
  return designated_location_.Get();
}
inline void Order::_internal_set_designated_location(const std::string& value) {
  
  designated_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_designated_location() {
  
  return designated_location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Order::release_designated_location() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Order.designated_location)
  return designated_location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Order::set_allocated_designated_location(std::string* designated_location) {
  if (designated_location != nullptr) {
    
  } else {
    
  }
  designated_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), designated_location,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Order.designated_location)
}

// int32 exempt_code = 40;
inline void Order::clear_exempt_code() {
  exempt_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_exempt_code() const {
  return exempt_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::exempt_code() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.exempt_code)
  return _internal_exempt_code();
}
inline void Order::_internal_set_exempt_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exempt_code_ = value;
}
inline void Order::set_exempt_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exempt_code(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.exempt_code)
}

// double discretionary_amt = 41;
inline void Order::clear_discretionary_amt() {
  discretionary_amt_ = 0;
}
inline double Order::_internal_discretionary_amt() const {
  return discretionary_amt_;
}
inline double Order::discretionary_amt() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.discretionary_amt)
  return _internal_discretionary_amt();
}
inline void Order::_internal_set_discretionary_amt(double value) {
  
  discretionary_amt_ = value;
}
inline void Order::set_discretionary_amt(double value) {
  _internal_set_discretionary_amt(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.discretionary_amt)
}

// bool etrade_only = 42;
inline void Order::clear_etrade_only() {
  etrade_only_ = false;
}
inline bool Order::_internal_etrade_only() const {
  return etrade_only_;
}
inline bool Order::etrade_only() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.etrade_only)
  return _internal_etrade_only();
}
inline void Order::_internal_set_etrade_only(bool value) {
  
  etrade_only_ = value;
}
inline void Order::set_etrade_only(bool value) {
  _internal_set_etrade_only(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.etrade_only)
}

// bool firm_quote_only = 43;
inline void Order::clear_firm_quote_only() {
  firm_quote_only_ = false;
}
inline bool Order::_internal_firm_quote_only() const {
  return firm_quote_only_;
}
inline bool Order::firm_quote_only() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.firm_quote_only)
  return _internal_firm_quote_only();
}
inline void Order::_internal_set_firm_quote_only(bool value) {
  
  firm_quote_only_ = value;
}
inline void Order::set_firm_quote_only(bool value) {
  _internal_set_firm_quote_only(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.firm_quote_only)
}

// double nbbo_price_cap = 44;
inline void Order::clear_nbbo_price_cap() {
  nbbo_price_cap_ = 0;
}
inline double Order::_internal_nbbo_price_cap() const {
  return nbbo_price_cap_;
}
inline double Order::nbbo_price_cap() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.nbbo_price_cap)
  return _internal_nbbo_price_cap();
}
inline void Order::_internal_set_nbbo_price_cap(double value) {
  
  nbbo_price_cap_ = value;
}
inline void Order::set_nbbo_price_cap(double value) {
  _internal_set_nbbo_price_cap(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.nbbo_price_cap)
}

// bool opt_out_smart_routing = 45;
inline void Order::clear_opt_out_smart_routing() {
  opt_out_smart_routing_ = false;
}
inline bool Order::_internal_opt_out_smart_routing() const {
  return opt_out_smart_routing_;
}
inline bool Order::opt_out_smart_routing() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.opt_out_smart_routing)
  return _internal_opt_out_smart_routing();
}
inline void Order::_internal_set_opt_out_smart_routing(bool value) {
  
  opt_out_smart_routing_ = value;
}
inline void Order::set_opt_out_smart_routing(bool value) {
  _internal_set_opt_out_smart_routing(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.opt_out_smart_routing)
}

// int32 auction_strategy = 46;
inline void Order::clear_auction_strategy() {
  auction_strategy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_auction_strategy() const {
  return auction_strategy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::auction_strategy() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.auction_strategy)
  return _internal_auction_strategy();
}
inline void Order::_internal_set_auction_strategy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  auction_strategy_ = value;
}
inline void Order::set_auction_strategy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auction_strategy(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.auction_strategy)
}

// double starting_price = 47;
inline void Order::clear_starting_price() {
  starting_price_ = 0;
}
inline double Order::_internal_starting_price() const {
  return starting_price_;
}
inline double Order::starting_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.starting_price)
  return _internal_starting_price();
}
inline void Order::_internal_set_starting_price(double value) {
  
  starting_price_ = value;
}
inline void Order::set_starting_price(double value) {
  _internal_set_starting_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.starting_price)
}

// double stock_ref_price = 48;
inline void Order::clear_stock_ref_price() {
  stock_ref_price_ = 0;
}
inline double Order::_internal_stock_ref_price() const {
  return stock_ref_price_;
}
inline double Order::stock_ref_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.stock_ref_price)
  return _internal_stock_ref_price();
}
inline void Order::_internal_set_stock_ref_price(double value) {
  
  stock_ref_price_ = value;
}
inline void Order::set_stock_ref_price(double value) {
  _internal_set_stock_ref_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.stock_ref_price)
}

// double delta = 49;
inline void Order::clear_delta() {
  delta_ = 0;
}
inline double Order::_internal_delta() const {
  return delta_;
}
inline double Order::delta() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.delta)
  return _internal_delta();
}
inline void Order::_internal_set_delta(double value) {
  
  delta_ = value;
}
inline void Order::set_delta(double value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.delta)
}

// double stock_range_lower = 50;
inline void Order::clear_stock_range_lower() {
  stock_range_lower_ = 0;
}
inline double Order::_internal_stock_range_lower() const {
  return stock_range_lower_;
}
inline double Order::stock_range_lower() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.stock_range_lower)
  return _internal_stock_range_lower();
}
inline void Order::_internal_set_stock_range_lower(double value) {
  
  stock_range_lower_ = value;
}
inline void Order::set_stock_range_lower(double value) {
  _internal_set_stock_range_lower(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.stock_range_lower)
}

// double stock_range_upper = 51;
inline void Order::clear_stock_range_upper() {
  stock_range_upper_ = 0;
}
inline double Order::_internal_stock_range_upper() const {
  return stock_range_upper_;
}
inline double Order::stock_range_upper() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.stock_range_upper)
  return _internal_stock_range_upper();
}
inline void Order::_internal_set_stock_range_upper(double value) {
  
  stock_range_upper_ = value;
}
inline void Order::set_stock_range_upper(double value) {
  _internal_set_stock_range_upper(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.stock_range_upper)
}

// bool randomize_size = 52;
inline void Order::clear_randomize_size() {
  randomize_size_ = false;
}
inline bool Order::_internal_randomize_size() const {
  return randomize_size_;
}
inline bool Order::randomize_size() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.randomize_size)
  return _internal_randomize_size();
}
inline void Order::_internal_set_randomize_size(bool value) {
  
  randomize_size_ = value;
}
inline void Order::set_randomize_size(bool value) {
  _internal_set_randomize_size(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.randomize_size)
}

// bool randomize_price = 53;
inline void Order::clear_randomize_price() {
  randomize_price_ = false;
}
inline bool Order::_internal_randomize_price() const {
  return randomize_price_;
}
inline bool Order::randomize_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.randomize_price)
  return _internal_randomize_price();
}
inline void Order::_internal_set_randomize_price(bool value) {
  
  randomize_price_ = value;
}
inline void Order::set_randomize_price(bool value) {
  _internal_set_randomize_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.randomize_price)
}

// double volatility = 54;
inline void Order::clear_volatility() {
  volatility_ = 0;
}
inline double Order::_internal_volatility() const {
  return volatility_;
}
inline double Order::volatility() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.volatility)
  return _internal_volatility();
}
inline void Order::_internal_set_volatility(double value) {
  
  volatility_ = value;
}
inline void Order::set_volatility(double value) {
  _internal_set_volatility(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.volatility)
}

// uint32 volatility_type = 55;
inline void Order::clear_volatility_type() {
  volatility_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::_internal_volatility_type() const {
  return volatility_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Order::volatility_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.volatility_type)
  return _internal_volatility_type();
}
inline void Order::_internal_set_volatility_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  volatility_type_ = value;
}
inline void Order::set_volatility_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_volatility_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.volatility_type)
}

// string delta_neutral_order_type = 56;
inline void Order::clear_delta_neutral_order_type() {
  delta_neutral_order_type_.ClearToEmpty();
}
inline const std::string& Order::delta_neutral_order_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.delta_neutral_order_type)
  return _internal_delta_neutral_order_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_delta_neutral_order_type(ArgT0&& arg0, ArgT... args) {
 
 delta_neutral_order_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.delta_neutral_order_type)
}
inline std::string* Order::mutable_delta_neutral_order_type() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Order.delta_neutral_order_type)
  return _internal_mutable_delta_neutral_order_type();
}
inline const std::string& Order::_internal_delta_neutral_order_type() const {
  return delta_neutral_order_type_.Get();
}
inline void Order::_internal_set_delta_neutral_order_type(const std::string& value) {
  
  delta_neutral_order_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_delta_neutral_order_type() {
  
  return delta_neutral_order_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Order::release_delta_neutral_order_type() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Order.delta_neutral_order_type)
  return delta_neutral_order_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Order::set_allocated_delta_neutral_order_type(std::string* delta_neutral_order_type) {
  if (delta_neutral_order_type != nullptr) {
    
  } else {
    
  }
  delta_neutral_order_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delta_neutral_order_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Order.delta_neutral_order_type)
}

// double delta_neutral_aux_price = 57;
inline void Order::clear_delta_neutral_aux_price() {
  delta_neutral_aux_price_ = 0;
}
inline double Order::_internal_delta_neutral_aux_price() const {
  return delta_neutral_aux_price_;
}
inline double Order::delta_neutral_aux_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.delta_neutral_aux_price)
  return _internal_delta_neutral_aux_price();
}
inline void Order::_internal_set_delta_neutral_aux_price(double value) {
  
  delta_neutral_aux_price_ = value;
}
inline void Order::set_delta_neutral_aux_price(double value) {
  _internal_set_delta_neutral_aux_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.delta_neutral_aux_price)
}

// int32 delta_neutral_con_id = 58;
inline void Order::clear_delta_neutral_con_id() {
  delta_neutral_con_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_delta_neutral_con_id() const {
  return delta_neutral_con_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::delta_neutral_con_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.delta_neutral_con_id)
  return _internal_delta_neutral_con_id();
}
inline void Order::_internal_set_delta_neutral_con_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delta_neutral_con_id_ = value;
}
inline void Order::set_delta_neutral_con_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delta_neutral_con_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.delta_neutral_con_id)
}

// bool what_if = 70;
inline void Order::clear_what_if() {
  what_if_ = false;
}
inline bool Order::_internal_what_if() const {
  return what_if_;
}
inline bool Order::what_if() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.what_if)
  return _internal_what_if();
}
inline void Order::_internal_set_what_if(bool value) {
  
  what_if_ = value;
}
inline void Order::set_what_if(bool value) {
  _internal_set_what_if(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.what_if)
}

// string account = 71;
inline void Order::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& Order::account() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.account)
}
inline std::string* Order::mutable_account() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Order.account)
  return _internal_mutable_account();
}
inline const std::string& Order::_internal_account() const {
  return account_.Get();
}
inline void Order::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Order::release_account() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Order.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Order::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Order.account)
}

// int32 use_price_mngmnt_algrthm = 99;
inline void Order::clear_use_price_mngmnt_algrthm() {
  use_price_mngmnt_algrthm_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::_internal_use_price_mngmnt_algrthm() const {
  return use_price_mngmnt_algrthm_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Order::use_price_mngmnt_algrthm() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Order.use_price_mngmnt_algrthm)
  return _internal_use_price_mngmnt_algrthm();
}
inline void Order::_internal_set_use_price_mngmnt_algrthm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  use_price_mngmnt_algrthm_ = value;
}
inline void Order::set_use_price_mngmnt_algrthm(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_use_price_mngmnt_algrthm(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Order.use_price_mngmnt_algrthm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Markets
}  // namespace Jde

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Jde::Markets::Proto::SecurityRight> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Markets::Proto::SecurityRight>() {
  return ::Jde::Markets::Proto::SecurityRight_descriptor();
}
template <> struct is_proto_enum< ::Jde::Markets::Proto::SecurityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Markets::Proto::SecurityType>() {
  return ::Jde::Markets::Proto::SecurityType_descriptor();
}
template <> struct is_proto_enum< ::Jde::Markets::Proto::Exchanges> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Markets::Proto::Exchanges>() {
  return ::Jde::Markets::Proto::Exchanges_descriptor();
}
template <> struct is_proto_enum< ::Jde::Markets::Proto::Currencies> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Markets::Proto::Currencies>() {
  return ::Jde::Markets::Proto::Currencies_descriptor();
}
template <> struct is_proto_enum< ::Jde::Markets::Proto::EOrderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Markets::Proto::EOrderType>() {
  return ::Jde::Markets::Proto::EOrderType_descriptor();
}
template <> struct is_proto_enum< ::Jde::Markets::Proto::ETimeInForce> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Markets::Proto::ETimeInForce>() {
  return ::Jde::Markets::Proto::ETimeInForce_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ib_2eproto
