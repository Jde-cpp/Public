// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: results.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_results_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_results_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ib.pb.h"
#include "watch.pb.h"
#include "edgar.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_results_2eproto JDE_MARKETS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct JDE_MARKETS_EXPORT TableStruct_results_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[48]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_results_2eproto;
namespace Jde {
namespace Markets {
namespace Proto {
namespace Results {
class AccountUpdate;
struct AccountUpdateDefaultTypeInternal;
JDE_MARKETS_EXPORT extern AccountUpdateDefaultTypeInternal _AccountUpdate_default_instance_;
class AccountUpdateMulti;
struct AccountUpdateMultiDefaultTypeInternal;
JDE_MARKETS_EXPORT extern AccountUpdateMultiDefaultTypeInternal _AccountUpdateMulti_default_instance_;
class Bar;
struct BarDefaultTypeInternal;
JDE_MARKETS_EXPORT extern BarDefaultTypeInternal _Bar_default_instance_;
class CommissionReport;
struct CommissionReportDefaultTypeInternal;
JDE_MARKETS_EXPORT extern CommissionReportDefaultTypeInternal _CommissionReport_default_instance_;
class ContractDetail;
struct ContractDetailDefaultTypeInternal;
JDE_MARKETS_EXPORT extern ContractDetailDefaultTypeInternal _ContractDetail_default_instance_;
class ContractDetailsResult;
struct ContractDetailsResultDefaultTypeInternal;
JDE_MARKETS_EXPORT extern ContractDetailsResultDefaultTypeInternal _ContractDetailsResult_default_instance_;
class ContractHours;
struct ContractHoursDefaultTypeInternal;
JDE_MARKETS_EXPORT extern ContractHoursDefaultTypeInternal _ContractHours_default_instance_;
class Custom;
struct CustomDefaultTypeInternal;
JDE_MARKETS_EXPORT extern CustomDefaultTypeInternal _Custom_default_instance_;
class DaySummary;
struct DaySummaryDefaultTypeInternal;
JDE_MARKETS_EXPORT extern DaySummaryDefaultTypeInternal _DaySummary_default_instance_;
class Error;
struct ErrorDefaultTypeInternal;
JDE_MARKETS_EXPORT extern ErrorDefaultTypeInternal _Error_default_instance_;
class ExchangeContracts;
struct ExchangeContractsDefaultTypeInternal;
JDE_MARKETS_EXPORT extern ExchangeContractsDefaultTypeInternal _ExchangeContracts_default_instance_;
class Execution;
struct ExecutionDefaultTypeInternal;
JDE_MARKETS_EXPORT extern ExecutionDefaultTypeInternal _Execution_default_instance_;
class Flex;
struct FlexDefaultTypeInternal;
JDE_MARKETS_EXPORT extern FlexDefaultTypeInternal _Flex_default_instance_;
class FlexOrder;
struct FlexOrderDefaultTypeInternal;
JDE_MARKETS_EXPORT extern FlexOrderDefaultTypeInternal _FlexOrder_default_instance_;
class Fundamentals;
struct FundamentalsDefaultTypeInternal;
JDE_MARKETS_EXPORT extern FundamentalsDefaultTypeInternal _Fundamentals_default_instance_;
class JDE_MARKETS_EXPORT Fundamentals_ValuesEntry_DoNotUse;
struct Fundamentals_ValuesEntry_DoNotUseDefaultTypeInternal;
JDE_MARKETS_EXPORT extern Fundamentals_ValuesEntry_DoNotUseDefaultTypeInternal _Fundamentals_ValuesEntry_DoNotUse_default_instance_;
class HistoricalData;
struct HistoricalDataDefaultTypeInternal;
JDE_MARKETS_EXPORT extern HistoricalDataDefaultTypeInternal _HistoricalData_default_instance_;
class HistoricalNews;
struct HistoricalNewsDefaultTypeInternal;
JDE_MARKETS_EXPORT extern HistoricalNewsDefaultTypeInternal _HistoricalNews_default_instance_;
class HistoricalNewsCollection;
struct HistoricalNewsCollectionDefaultTypeInternal;
JDE_MARKETS_EXPORT extern HistoricalNewsCollectionDefaultTypeInternal _HistoricalNewsCollection_default_instance_;
class MessageUnion;
struct MessageUnionDefaultTypeInternal;
JDE_MARKETS_EXPORT extern MessageUnionDefaultTypeInternal _MessageUnion_default_instance_;
class MessageValue;
struct MessageValueDefaultTypeInternal;
JDE_MARKETS_EXPORT extern MessageValueDefaultTypeInternal _MessageValue_default_instance_;
class NewsArticle;
struct NewsArticleDefaultTypeInternal;
JDE_MARKETS_EXPORT extern NewsArticleDefaultTypeInternal _NewsArticle_default_instance_;
class OpenOrder;
struct OpenOrderDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OpenOrderDefaultTypeInternal _OpenOrder_default_instance_;
class Option;
struct OptionDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OptionDefaultTypeInternal _Option_default_instance_;
class OptionCalculation;
struct OptionCalculationDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OptionCalculationDefaultTypeInternal _OptionCalculation_default_instance_;
class OptionDay;
struct OptionDayDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OptionDayDefaultTypeInternal _OptionDay_default_instance_;
class OptionExchanges;
struct OptionExchangesDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OptionExchangesDefaultTypeInternal _OptionExchanges_default_instance_;
class OptionValues;
struct OptionValuesDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OptionValuesDefaultTypeInternal _OptionValues_default_instance_;
class OrderState;
struct OrderStateDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OrderStateDefaultTypeInternal _OrderState_default_instance_;
class OrderStatus;
struct OrderStatusDefaultTypeInternal;
JDE_MARKETS_EXPORT extern OrderStatusDefaultTypeInternal _OrderStatus_default_instance_;
class PortfolioUpdate;
struct PortfolioUpdateDefaultTypeInternal;
JDE_MARKETS_EXPORT extern PortfolioUpdateDefaultTypeInternal _PortfolioUpdate_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
JDE_MARKETS_EXPORT extern PositionDefaultTypeInternal _Position_default_instance_;
class PositionMulti;
struct PositionMultiDefaultTypeInternal;
JDE_MARKETS_EXPORT extern PositionMultiDefaultTypeInternal _PositionMulti_default_instance_;
class Statistics;
struct StatisticsDefaultTypeInternal;
JDE_MARKETS_EXPORT extern StatisticsDefaultTypeInternal _Statistics_default_instance_;
class StringList;
struct StringListDefaultTypeInternal;
JDE_MARKETS_EXPORT extern StringListDefaultTypeInternal _StringList_default_instance_;
class StringMap;
struct StringMapDefaultTypeInternal;
JDE_MARKETS_EXPORT extern StringMapDefaultTypeInternal _StringMap_default_instance_;
class JDE_MARKETS_EXPORT StringMap_ValuesEntry_DoNotUse;
struct StringMap_ValuesEntry_DoNotUseDefaultTypeInternal;
JDE_MARKETS_EXPORT extern StringMap_ValuesEntry_DoNotUseDefaultTypeInternal _StringMap_ValuesEntry_DoNotUse_default_instance_;
class StringResult;
struct StringResultDefaultTypeInternal;
JDE_MARKETS_EXPORT extern StringResultDefaultTypeInternal _StringResult_default_instance_;
class TagValue;
struct TagValueDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TagValueDefaultTypeInternal _TagValue_default_instance_;
class TickAttrib;
struct TickAttribDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TickAttribDefaultTypeInternal _TickAttrib_default_instance_;
class TickGeneric;
struct TickGenericDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TickGenericDefaultTypeInternal _TickGeneric_default_instance_;
class TickNews;
struct TickNewsDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TickNewsDefaultTypeInternal _TickNews_default_instance_;
class TickPrice;
struct TickPriceDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TickPriceDefaultTypeInternal _TickPrice_default_instance_;
class TickSize;
struct TickSizeDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TickSizeDefaultTypeInternal _TickSize_default_instance_;
class TickString;
struct TickStringDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TickStringDefaultTypeInternal _TickString_default_instance_;
class Trade;
struct TradeDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TradeDefaultTypeInternal _Trade_default_instance_;
class Transmission;
struct TransmissionDefaultTypeInternal;
JDE_MARKETS_EXPORT extern TransmissionDefaultTypeInternal _Transmission_default_instance_;
class WatchList;
struct WatchListDefaultTypeInternal;
JDE_MARKETS_EXPORT extern WatchListDefaultTypeInternal _WatchList_default_instance_;
}  // namespace Results
}  // namespace Proto
}  // namespace Markets
}  // namespace Jde
PROTOBUF_NAMESPACE_OPEN
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::AccountUpdate* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::AccountUpdate>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::AccountUpdateMulti* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::AccountUpdateMulti>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Bar* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Bar>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::CommissionReport* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::CommissionReport>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::ContractDetail* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::ContractDetail>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::ContractDetailsResult* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::ContractDetailsResult>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::ContractHours* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::ContractHours>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Custom* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Custom>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::DaySummary* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::DaySummary>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Error* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Error>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::ExchangeContracts* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::ExchangeContracts>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Execution* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Execution>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Flex* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Flex>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::FlexOrder* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::FlexOrder>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Fundamentals* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Fundamentals>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Fundamentals_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Fundamentals_ValuesEntry_DoNotUse>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::HistoricalData* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::HistoricalData>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::HistoricalNews* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::HistoricalNews>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::HistoricalNewsCollection* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::HistoricalNewsCollection>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::MessageUnion* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::MessageUnion>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::MessageValue* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::MessageValue>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::NewsArticle* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::NewsArticle>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::OpenOrder* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::OpenOrder>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Option* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Option>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::OptionCalculation* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::OptionCalculation>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::OptionDay* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::OptionDay>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::OptionExchanges* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::OptionExchanges>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::OptionValues* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::OptionValues>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::OrderState* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::OrderState>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::OrderStatus* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::OrderStatus>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::PortfolioUpdate* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::PortfolioUpdate>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Position* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Position>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::PositionMulti* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::PositionMulti>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Statistics* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Statistics>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::StringList* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::StringList>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::StringMap* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::StringMap>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::StringMap_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::StringMap_ValuesEntry_DoNotUse>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::StringResult* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::StringResult>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TagValue* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TagValue>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TickAttrib* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TickAttrib>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TickGeneric* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TickGeneric>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TickNews* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TickNews>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TickPrice* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TickPrice>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TickSize* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TickSize>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::TickString* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::TickString>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Trade* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Trade>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::Transmission* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::Transmission>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Proto::Results::WatchList* Arena::CreateMaybeMessage<::Jde::Markets::Proto::Results::WatchList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Jde {
namespace Markets {
namespace Proto {
namespace Results {

enum ETickType : int {
  BidSize = 0,
  BidPrice = 1,
  AskPrice = 2,
  AskSize = 3,
  LastPrice = 4,
  LastSize = 5,
  High = 6,
  Low = 7,
  Volume = 8,
  ClosePrice = 9,
  BID_OPTION_COMPUTATION = 10,
  ASK_OPTION_COMPUTATION = 11,
  LAST_OPTION_COMPUTATION = 12,
  MODEL_OPTION = 13,
  OpenTick = 14,
  Low13Week = 15,
  High13Week = 16,
  Low26Week = 17,
  High26Week = 18,
  Low52Week = 19,
  High52Week = 20,
  AverageVolume = 21,
  OPEN_INTEREST = 22,
  OptionHistoricalVol = 23,
  OptionImpliedVol = 24,
  OPTION_BID_EXCH = 25,
  OPTION_ASK_EXCH = 26,
  OPTION_CALL_OPEN_INTEREST = 27,
  OPTION_PUT_OPEN_INTEREST = 28,
  OPTION_CALL_VOLUME = 29,
  OPTION_PUT_VOLUME = 30,
  INDEX_FUTURE_PREMIUM = 31,
  BidExchange = 32,
  AskExchange = 33,
  AUCTION_VOLUME = 34,
  AUCTION_PRICE = 35,
  AUCTION_IMBALANCE = 36,
  MarkPrice = 37,
  BID_EFP_COMPUTATION = 38,
  ASK_EFP_COMPUTATION = 39,
  LAST_EFP_COMPUTATION = 40,
  OPEN_EFP_COMPUTATION = 41,
  HIGH_EFP_COMPUTATION = 42,
  LOW_EFP_COMPUTATION = 43,
  CLOSE_EFP_COMPUTATION = 44,
  LastTimestamp = 45,
  SHORTABLE = 46,
  FUNDAMENTAL_RATIOS = 47,
  RT_VOLUME = 48,
  Halted = 49,
  BID_YIELD = 50,
  ASK_YIELD = 51,
  LAST_YIELD = 52,
  CUST_OPTION_COMPUTATION = 53,
  TRADE_COUNT = 54,
  TRADE_RATE = 55,
  VOLUME_RATE = 56,
  LAST_RTH_TRADE = 57,
  RT_HISTORICAL_VOL = 58,
  IB_DIVIDENDS = 59,
  BOND_FACTOR_MULTIPLIER = 60,
  REGULATORY_IMBALANCE = 61,
  NewsTick = 62,
  SHORT_TERM_VOLUME_3_MIN = 63,
  SHORT_TERM_VOLUME_5_MIN = 64,
  SHORT_TERM_VOLUME_10_MIN = 65,
  DELAYED_BID = 66,
  DELAYED_ASK = 67,
  DELAYED_LAST = 68,
  DELAYED_BID_SIZE = 69,
  DELAYED_ASK_SIZE = 70,
  DELAYED_LAST_SIZE = 71,
  DELAYED_HIGH = 72,
  DELAYED_LOW = 73,
  DELAYED_VOLUME = 74,
  DELAYED_CLOSE = 75,
  DELAYED_OPEN = 76,
  RT_TRD_VOLUME = 77,
  CREDITMAN_MARK_PRICE = 78,
  CREDITMAN_SLOW_MARK_PRICE = 79,
  DELAYED_BID_OPTION_COMPUTATION = 80,
  DELAYED_ASK_OPTION_COMPUTATION = 81,
  DELAYED_LAST_OPTION_COMPUTATION = 82,
  DELAYED_MODEL_OPTION_COMPUTATION = 83,
  LastExchange = 84,
  LAST_REG_TIME = 85,
  FUTURES_OPEN_INTEREST = 86,
  AVG_OPT_VOLUME = 87,
  DELAYED_LAST_TIMESTAMP = 88,
  SHORTABLE_SHARES = 89,
  NOT_SET = 90,
  ETickType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ETickType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
JDE_MARKETS_EXPORT bool ETickType_IsValid(int value);
constexpr ETickType ETickType_MIN = BidSize;
constexpr ETickType ETickType_MAX = NOT_SET;
constexpr int ETickType_ARRAYSIZE = ETickType_MAX + 1;

JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETickType_descriptor();
template<typename T>
inline const std::string& ETickType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ETickType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ETickType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ETickType_descriptor(), enum_t_value);
}
inline bool ETickType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ETickType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ETickType>(
    ETickType_descriptor(), name, value);
}
enum EResults : int {
  Accept = 0,
  MultiEnd = -1,
  DaySummary_ = -2,
  Authentication = -3,
  Query = -4,
  TickPriceMessage = 1,
  TickSizeMessage = 2,
  OrderStatus_ = 3,
  ErrorMessage = 4,
  OpenOrder_ = 5,
  ACCT_VALUE = 6,
  PORTFOLIO_VALUE = 7,
  ACCT_UPDATE_TIME = 8,
  NextValidId = 9,
  CONTRACT_DATA = 10,
  ExecutionData = 11,
  MARKET_DEPTH = 12,
  MARKET_DEPTH_L2 = 13,
  NEWS_BULLETINS = 14,
  ManagedAccounts = 15,
  RECEIVE_FA = 16,
  HistoricalData_ = 17,
  BOND_CONTRACT_DATA = 18,
  SCANNER_PARAMETERS = 19,
  SCANNER_DATA = 20,
  TICK_OPTION_COMPUTATION = 21,
  TickGenericMessage = 45,
  TickStringMessage = 46,
  TICK_EFP = 47,
  CurrentTime = 49,
  RealTimeBars = 50,
  FUNDAMENTAL_DATA = 51,
  ContractDataEnd = 52,
  OpenOrderEnd = 53,
  AccountDownloadEnd = 54,
  ExecutionDataEnd = 55,
  DELTA_NEUTRAL_VALIDATION = 56,
  TickSnapshotEnd = 57,
  MarketDataType = 58,
  COMMISSION_REPORT = 59,
  PositionData = 61,
  PositionEnd = 62,
  ACCOUNT_SUMMARY = 63,
  ACCOUNT_SUMMARY_END = 64,
  VERIFY_MESSAGE_API = 65,
  VERIFY_COMPLETED = 66,
  DISPLAY_GROUP_LIST = 67,
  DISPLAY_GROUP_UPDATED = 68,
  VERIFY_AND_AUTH_MESSAGE_API = 69,
  VERIFY_AND_AUTH_COMPLETED = 70,
  PositionMulti_ = 71,
  PositionMultiEnd = 72,
  AccountUpdateMulti_ = 73,
  ACCOUNT_UPDATE_MULTI_END = 74,
  SECURITY_DEFINITION_OPTION_PARAMETER = 75,
  SecurityDefinitionOptionParameterEnd = 76,
  SOFT_DOLLAR_TIERS = 77,
  FAMILY_CODES = 78,
  SYMBOL_SAMPLES = 79,
  MKT_DEPTH_EXCHANGES = 80,
  TickRequiredParams = 81,
  SMART_COMPONENTS = 82,
  NewsArticle_ = 83,
  TickNews_ = 84,
  NewsProviders = 85,
  HistoricalNews_ = 86,
  HistoricalNewsEnd = 87,
  HEAD_TIMESTAMP = 88,
  HISTOGRAM_DATA = 89,
  HISTORICAL_DATA_UPDATE = 90,
  REROUTE_MKT_DATA_REQ = 91,
  REROUTE_MKT_DEPTH_REQ = 92,
  MARKET_RULE = 93,
  PNL = 94,
  PNL_SINGLE = 95,
  HISTORICAL_TICKS = 96,
  HISTORICAL_TICKS_BID_ASK = 97,
  HISTORICAL_TICKS_LAST = 98,
  TICK_BY_TICK = 99,
  EResults_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EResults_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
JDE_MARKETS_EXPORT bool EResults_IsValid(int value);
constexpr EResults EResults_MIN = Query;
constexpr EResults EResults_MAX = TICK_BY_TICK;
constexpr int EResults_ARRAYSIZE = EResults_MAX + 1;

JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EResults_descriptor();
template<typename T>
inline const std::string& EResults_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EResults>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EResults_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EResults_descriptor(), enum_t_value);
}
inline bool EResults_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EResults* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EResults>(
    EResults_descriptor(), name, value);
}
enum EOrderStatus : int {
  None = 0,
  Submitted = 1,
  Cancelled = 2,
  Filled = 4,
  Inactive = 8,
  Pending = 32,
  PendingSubmit = 33,
  PendingCancel = 34,
  Pre = 64,
  PreSubmitted = 65,
  Api = 128,
  ApiCancelled = 130,
  UnknownStatus = 256,
  EOrderStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EOrderStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
JDE_MARKETS_EXPORT bool EOrderStatus_IsValid(int value);
constexpr EOrderStatus EOrderStatus_MIN = None;
constexpr EOrderStatus EOrderStatus_MAX = UnknownStatus;
constexpr int EOrderStatus_ARRAYSIZE = EOrderStatus_MAX + 1;

JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOrderStatus_descriptor();
template<typename T>
inline const std::string& EOrderStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EOrderStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EOrderStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EOrderStatus_descriptor(), enum_t_value);
}
inline bool EOrderStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EOrderStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EOrderStatus>(
    EOrderStatus_descriptor(), name, value);
}
// ===================================================================

class JDE_MARKETS_EXPORT MessageValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.MessageValue) */ {
 public:
  inline MessageValue() : MessageValue(nullptr) {}
  ~MessageValue() override;
  explicit constexpr MessageValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageValue(const MessageValue& from);
  MessageValue(MessageValue&& from) noexcept
    : MessageValue() {
    *this = ::std::move(from);
  }

  inline MessageValue& operator=(const MessageValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageValue& operator=(MessageValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kStringValue = 2,
    kIntValue = 3,
    VALUE_NOT_SET = 0,
  };

  static inline const MessageValue* internal_default_instance() {
    return reinterpret_cast<const MessageValue*>(
               &_MessageValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageValue& a, MessageValue& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageValue* New() const final {
    return new MessageValue();
  }

  MessageValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageValue& from);
  void MergeFrom(const MessageValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.MessageValue";
  }
  protected:
  explicit MessageValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kStringValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
  };
  // .Jde.Markets.Proto.Results.EResults type = 1;
  void clear_type();
  ::Jde::Markets::Proto::Results::EResults type() const;
  void set_type(::Jde::Markets::Proto::Results::EResults value);
  private:
  ::Jde::Markets::Proto::Results::EResults _internal_type() const;
  void _internal_set_type(::Jde::Markets::Proto::Results::EResults value);
  public:

  // string string_value = 2;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // int32 int_value = 3;
  bool has_int_value() const;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.MessageValue)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_int_value();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 int_value_;
  } Value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT StringResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.StringResult) */ {
 public:
  inline StringResult() : StringResult(nullptr) {}
  ~StringResult() override;
  explicit constexpr StringResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringResult(const StringResult& from);
  StringResult(StringResult&& from) noexcept
    : StringResult() {
    *this = ::std::move(from);
  }

  inline StringResult& operator=(const StringResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringResult& operator=(StringResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringResult* internal_default_instance() {
    return reinterpret_cast<const StringResult*>(
               &_StringResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StringResult& a, StringResult& b) {
    a.Swap(&b);
  }
  inline void Swap(StringResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringResult* New() const final {
    return new StringResult();
  }

  StringResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringResult& from);
  void MergeFrom(const StringResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.StringResult";
  }
  protected:
  explicit StringResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .Jde.Markets.Proto.Results.EResults type = 1;
  void clear_type();
  ::Jde::Markets::Proto::Results::EResults type() const;
  void set_type(::Jde::Markets::Proto::Results::EResults value);
  private:
  ::Jde::Markets::Proto::Results::EResults _internal_type() const;
  void _internal_set_type(::Jde::Markets::Proto::Results::EResults value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.StringResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT NewsArticle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.NewsArticle) */ {
 public:
  inline NewsArticle() : NewsArticle(nullptr) {}
  ~NewsArticle() override;
  explicit constexpr NewsArticle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewsArticle(const NewsArticle& from);
  NewsArticle(NewsArticle&& from) noexcept
    : NewsArticle() {
    *this = ::std::move(from);
  }

  inline NewsArticle& operator=(const NewsArticle& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewsArticle& operator=(NewsArticle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewsArticle& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewsArticle* internal_default_instance() {
    return reinterpret_cast<const NewsArticle*>(
               &_NewsArticle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NewsArticle& a, NewsArticle& b) {
    a.Swap(&b);
  }
  inline void Swap(NewsArticle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewsArticle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewsArticle* New() const final {
    return new NewsArticle();
  }

  NewsArticle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewsArticle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewsArticle& from);
  void MergeFrom(const NewsArticle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewsArticle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.NewsArticle";
  }
  protected:
  explicit NewsArticle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kIdFieldNumber = 1,
    kIsTextFieldNumber = 2,
  };
  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool is_text = 2;
  void clear_is_text();
  bool is_text() const;
  void set_is_text(bool value);
  private:
  bool _internal_is_text() const;
  void _internal_set_is_text(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.NewsArticle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  bool is_text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TickNews final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TickNews) */ {
 public:
  inline TickNews() : TickNews(nullptr) {}
  ~TickNews() override;
  explicit constexpr TickNews(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TickNews(const TickNews& from);
  TickNews(TickNews&& from) noexcept
    : TickNews() {
    *this = ::std::move(from);
  }

  inline TickNews& operator=(const TickNews& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickNews& operator=(TickNews&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TickNews& default_instance() {
    return *internal_default_instance();
  }
  static inline const TickNews* internal_default_instance() {
    return reinterpret_cast<const TickNews*>(
               &_TickNews_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TickNews& a, TickNews& b) {
    a.Swap(&b);
  }
  inline void Swap(TickNews* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickNews* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickNews* New() const final {
    return new TickNews();
  }

  TickNews* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickNews>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickNews& from);
  void MergeFrom(const TickNews& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickNews* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TickNews";
  }
  protected:
  explicit TickNews(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderCodeFieldNumber = 3,
    kArticleIdFieldNumber = 4,
    kHeadlineFieldNumber = 5,
    kExtraDataFieldNumber = 6,
    kIdFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // string provider_code = 3;
  void clear_provider_code();
  const std::string& provider_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_provider_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_provider_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_provider_code();
  void set_allocated_provider_code(std::string* provider_code);
  private:
  const std::string& _internal_provider_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider_code(const std::string& value);
  std::string* _internal_mutable_provider_code();
  public:

  // string article_id = 4;
  void clear_article_id();
  const std::string& article_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_article_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_article_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_article_id();
  void set_allocated_article_id(std::string* article_id);
  private:
  const std::string& _internal_article_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_article_id(const std::string& value);
  std::string* _internal_mutable_article_id();
  public:

  // string headline = 5;
  void clear_headline();
  const std::string& headline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_headline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_headline();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_headline();
  void set_allocated_headline(std::string* headline);
  private:
  const std::string& _internal_headline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_headline(const std::string& value);
  std::string* _internal_mutable_headline();
  public:

  // string extra_data = 6;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TickNews)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr article_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT HistoricalNews final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.HistoricalNews) */ {
 public:
  inline HistoricalNews() : HistoricalNews(nullptr) {}
  ~HistoricalNews() override;
  explicit constexpr HistoricalNews(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistoricalNews(const HistoricalNews& from);
  HistoricalNews(HistoricalNews&& from) noexcept
    : HistoricalNews() {
    *this = ::std::move(from);
  }

  inline HistoricalNews& operator=(const HistoricalNews& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricalNews& operator=(HistoricalNews&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistoricalNews& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistoricalNews* internal_default_instance() {
    return reinterpret_cast<const HistoricalNews*>(
               &_HistoricalNews_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HistoricalNews& a, HistoricalNews& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricalNews* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricalNews* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricalNews* New() const final {
    return new HistoricalNews();
  }

  HistoricalNews* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricalNews>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricalNews& from);
  void MergeFrom(const HistoricalNews& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricalNews* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.HistoricalNews";
  }
  protected:
  explicit HistoricalNews(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderCodeFieldNumber = 3,
    kArticleIdFieldNumber = 4,
    kHeadlineFieldNumber = 5,
    kIdFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // string provider_code = 3;
  void clear_provider_code();
  const std::string& provider_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_provider_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_provider_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_provider_code();
  void set_allocated_provider_code(std::string* provider_code);
  private:
  const std::string& _internal_provider_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_provider_code(const std::string& value);
  std::string* _internal_mutable_provider_code();
  public:

  // string article_id = 4;
  void clear_article_id();
  const std::string& article_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_article_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_article_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_article_id();
  void set_allocated_article_id(std::string* article_id);
  private:
  const std::string& _internal_article_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_article_id(const std::string& value);
  std::string* _internal_mutable_article_id();
  public:

  // string headline = 5;
  void clear_headline();
  const std::string& headline() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_headline(ArgT0&& arg0, ArgT... args);
  std::string* mutable_headline();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_headline();
  void set_allocated_headline(std::string* headline);
  private:
  const std::string& _internal_headline() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_headline(const std::string& value);
  std::string* _internal_mutable_headline();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.HistoricalNews)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr article_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headline_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT HistoricalNewsCollection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.HistoricalNewsCollection) */ {
 public:
  inline HistoricalNewsCollection() : HistoricalNewsCollection(nullptr) {}
  ~HistoricalNewsCollection() override;
  explicit constexpr HistoricalNewsCollection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistoricalNewsCollection(const HistoricalNewsCollection& from);
  HistoricalNewsCollection(HistoricalNewsCollection&& from) noexcept
    : HistoricalNewsCollection() {
    *this = ::std::move(from);
  }

  inline HistoricalNewsCollection& operator=(const HistoricalNewsCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricalNewsCollection& operator=(HistoricalNewsCollection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistoricalNewsCollection& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistoricalNewsCollection* internal_default_instance() {
    return reinterpret_cast<const HistoricalNewsCollection*>(
               &_HistoricalNewsCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HistoricalNewsCollection& a, HistoricalNewsCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricalNewsCollection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricalNewsCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricalNewsCollection* New() const final {
    return new HistoricalNewsCollection();
  }

  HistoricalNewsCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricalNewsCollection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricalNewsCollection& from);
  void MergeFrom(const HistoricalNewsCollection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricalNewsCollection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.HistoricalNewsCollection";
  }
  protected:
  explicit HistoricalNewsCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kRequestIdFieldNumber = 1,
    kHasMoreFieldNumber = 3,
  };
  // repeated .Jde.Markets.Proto.Results.HistoricalNews values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::Jde::Markets::Proto::Results::HistoricalNews* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::HistoricalNews >*
      mutable_values();
  private:
  const ::Jde::Markets::Proto::Results::HistoricalNews& _internal_values(int index) const;
  ::Jde::Markets::Proto::Results::HistoricalNews* _internal_add_values();
  public:
  const ::Jde::Markets::Proto::Results::HistoricalNews& values(int index) const;
  ::Jde::Markets::Proto::Results::HistoricalNews* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::HistoricalNews >&
      values() const;

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool has_more = 3;
  void clear_has_more();
  bool has_more() const;
  void set_has_more(bool value);
  private:
  bool _internal_has_more() const;
  void _internal_set_has_more(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.HistoricalNewsCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::HistoricalNews > values_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  bool has_more_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TagValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TagValue) */ {
 public:
  inline TagValue() : TagValue(nullptr) {}
  ~TagValue() override;
  explicit constexpr TagValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TagValue(const TagValue& from);
  TagValue(TagValue&& from) noexcept
    : TagValue() {
    *this = ::std::move(from);
  }

  inline TagValue& operator=(const TagValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagValue& operator=(TagValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TagValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TagValue* internal_default_instance() {
    return reinterpret_cast<const TagValue*>(
               &_TagValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TagValue& a, TagValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TagValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TagValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TagValue* New() const final {
    return new TagValue();
  }

  TagValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TagValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TagValue& from);
  void MergeFrom(const TagValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TagValue";
  }
  protected:
  explicit TagValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string tag = 1;
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TagValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT ContractHours final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.ContractHours) */ {
 public:
  inline ContractHours() : ContractHours(nullptr) {}
  ~ContractHours() override;
  explicit constexpr ContractHours(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractHours(const ContractHours& from);
  ContractHours(ContractHours&& from) noexcept
    : ContractHours() {
    *this = ::std::move(from);
  }

  inline ContractHours& operator=(const ContractHours& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractHours& operator=(ContractHours&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractHours& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractHours* internal_default_instance() {
    return reinterpret_cast<const ContractHours*>(
               &_ContractHours_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ContractHours& a, ContractHours& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractHours* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractHours* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractHours* New() const final {
    return new ContractHours();
  }

  ContractHours* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractHours>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractHours& from);
  void MergeFrom(const ContractHours& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractHours* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.ContractHours";
  }
  protected:
  explicit ContractHours(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // int32 start = 1;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end = 2;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.ContractHours)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT ContractDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.ContractDetail) */ {
 public:
  inline ContractDetail() : ContractDetail(nullptr) {}
  ~ContractDetail() override;
  explicit constexpr ContractDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractDetail(const ContractDetail& from);
  ContractDetail(ContractDetail&& from) noexcept
    : ContractDetail() {
    *this = ::std::move(from);
  }

  inline ContractDetail& operator=(const ContractDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractDetail& operator=(ContractDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractDetail* internal_default_instance() {
    return reinterpret_cast<const ContractDetail*>(
               &_ContractDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ContractDetail& a, ContractDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractDetail* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractDetail* New() const final {
    return new ContractDetail();
  }

  ContractDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractDetail& from);
  void MergeFrom(const ContractDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.ContractDetail";
  }
  protected:
  explicit ContractDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingHoursFieldNumber = 15,
    kLiquidHoursFieldNumber = 16,
    kSecIdListFieldNumber = 27,
    kMarketNameFieldNumber = 3,
    kOrderTypesFieldNumber = 5,
    kValidExchangesFieldNumber = 6,
    kLongNameFieldNumber = 9,
    kContractMonthFieldNumber = 10,
    kIndustryFieldNumber = 11,
    kCategoryFieldNumber = 12,
    kSubcategoryFieldNumber = 13,
    kTimeZoneIdFieldNumber = 14,
    kEvRuleFieldNumber = 17,
    kUnderSymbolFieldNumber = 21,
    kUnderSecTypeFieldNumber = 22,
    kMarketRuleIdsFieldNumber = 23,
    kRealExpirationDateFieldNumber = 24,
    kLastTradeTimeFieldNumber = 25,
    kStockTypeFieldNumber = 26,
    kCusipFieldNumber = 28,
    kRatingsFieldNumber = 29,
    kDescAppendFieldNumber = 30,
    kBondTypeFieldNumber = 31,
    kCouponTypeFieldNumber = 32,
    kMaturityFieldNumber = 37,
    kIssueDateFieldNumber = 38,
    kNextOptionDateFieldNumber = 39,
    kNextOptionTypeFieldNumber = 40,
    kNotesFieldNumber = 42,
    kContractFieldNumber = 2,
    kMinTickFieldNumber = 4,
    kPriceMagnifierFieldNumber = 7,
    kUnderConIdFieldNumber = 8,
    kMdSizeMultiplierFieldNumber = 19,
    kEvMultiplierFieldNumber = 18,
    kAggGroupFieldNumber = 20,
    kCallableFieldNumber = 33,
    kPutableFieldNumber = 34,
    kConvertibleFieldNumber = 36,
    kNextOptionPartialFieldNumber = 41,
    kCouponFieldNumber = 35,
  };
  // repeated .Jde.Markets.Proto.Results.ContractHours trading_hours = 15;
  int trading_hours_size() const;
  private:
  int _internal_trading_hours_size() const;
  public:
  void clear_trading_hours();
  ::Jde::Markets::Proto::Results::ContractHours* mutable_trading_hours(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractHours >*
      mutable_trading_hours();
  private:
  const ::Jde::Markets::Proto::Results::ContractHours& _internal_trading_hours(int index) const;
  ::Jde::Markets::Proto::Results::ContractHours* _internal_add_trading_hours();
  public:
  const ::Jde::Markets::Proto::Results::ContractHours& trading_hours(int index) const;
  ::Jde::Markets::Proto::Results::ContractHours* add_trading_hours();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractHours >&
      trading_hours() const;

  // repeated .Jde.Markets.Proto.Results.ContractHours liquid_hours = 16;
  int liquid_hours_size() const;
  private:
  int _internal_liquid_hours_size() const;
  public:
  void clear_liquid_hours();
  ::Jde::Markets::Proto::Results::ContractHours* mutable_liquid_hours(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractHours >*
      mutable_liquid_hours();
  private:
  const ::Jde::Markets::Proto::Results::ContractHours& _internal_liquid_hours(int index) const;
  ::Jde::Markets::Proto::Results::ContractHours* _internal_add_liquid_hours();
  public:
  const ::Jde::Markets::Proto::Results::ContractHours& liquid_hours(int index) const;
  ::Jde::Markets::Proto::Results::ContractHours* add_liquid_hours();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractHours >&
      liquid_hours() const;

  // repeated .Jde.Markets.Proto.Results.TagValue sec_id_list = 27;
  int sec_id_list_size() const;
  private:
  int _internal_sec_id_list_size() const;
  public:
  void clear_sec_id_list();
  ::Jde::Markets::Proto::Results::TagValue* mutable_sec_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::TagValue >*
      mutable_sec_id_list();
  private:
  const ::Jde::Markets::Proto::Results::TagValue& _internal_sec_id_list(int index) const;
  ::Jde::Markets::Proto::Results::TagValue* _internal_add_sec_id_list();
  public:
  const ::Jde::Markets::Proto::Results::TagValue& sec_id_list(int index) const;
  ::Jde::Markets::Proto::Results::TagValue* add_sec_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::TagValue >&
      sec_id_list() const;

  // string market_name = 3;
  void clear_market_name();
  const std::string& market_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_market_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_market_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_market_name();
  void set_allocated_market_name(std::string* market_name);
  private:
  const std::string& _internal_market_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_name(const std::string& value);
  std::string* _internal_mutable_market_name();
  public:

  // string order_types = 5;
  void clear_order_types();
  const std::string& order_types() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_types(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_types();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_order_types();
  void set_allocated_order_types(std::string* order_types);
  private:
  const std::string& _internal_order_types() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_types(const std::string& value);
  std::string* _internal_mutable_order_types();
  public:

  // string valid_exchanges = 6;
  void clear_valid_exchanges();
  const std::string& valid_exchanges() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_valid_exchanges(ArgT0&& arg0, ArgT... args);
  std::string* mutable_valid_exchanges();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_valid_exchanges();
  void set_allocated_valid_exchanges(std::string* valid_exchanges);
  private:
  const std::string& _internal_valid_exchanges() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_valid_exchanges(const std::string& value);
  std::string* _internal_mutable_valid_exchanges();
  public:

  // string long_name = 9;
  void clear_long_name();
  const std::string& long_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_long_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_long_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_long_name();
  void set_allocated_long_name(std::string* long_name);
  private:
  const std::string& _internal_long_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_name(const std::string& value);
  std::string* _internal_mutable_long_name();
  public:

  // string contract_month = 10;
  void clear_contract_month();
  const std::string& contract_month() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_contract_month(ArgT0&& arg0, ArgT... args);
  std::string* mutable_contract_month();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_contract_month();
  void set_allocated_contract_month(std::string* contract_month);
  private:
  const std::string& _internal_contract_month() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_month(const std::string& value);
  std::string* _internal_mutable_contract_month();
  public:

  // string industry = 11;
  void clear_industry();
  const std::string& industry() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_industry(ArgT0&& arg0, ArgT... args);
  std::string* mutable_industry();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_industry();
  void set_allocated_industry(std::string* industry);
  private:
  const std::string& _internal_industry() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_industry(const std::string& value);
  std::string* _internal_mutable_industry();
  public:

  // string category = 12;
  void clear_category();
  const std::string& category() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_category(ArgT0&& arg0, ArgT... args);
  std::string* mutable_category();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_category();
  void set_allocated_category(std::string* category);
  private:
  const std::string& _internal_category() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_category(const std::string& value);
  std::string* _internal_mutable_category();
  public:

  // string subcategory = 13;
  void clear_subcategory();
  const std::string& subcategory() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subcategory(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subcategory();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_subcategory();
  void set_allocated_subcategory(std::string* subcategory);
  private:
  const std::string& _internal_subcategory() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subcategory(const std::string& value);
  std::string* _internal_mutable_subcategory();
  public:

  // string time_zone_id = 14;
  void clear_time_zone_id();
  const std::string& time_zone_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_zone_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_zone_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_time_zone_id();
  void set_allocated_time_zone_id(std::string* time_zone_id);
  private:
  const std::string& _internal_time_zone_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_zone_id(const std::string& value);
  std::string* _internal_mutable_time_zone_id();
  public:

  // string ev_rule = 17;
  void clear_ev_rule();
  const std::string& ev_rule() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ev_rule(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ev_rule();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ev_rule();
  void set_allocated_ev_rule(std::string* ev_rule);
  private:
  const std::string& _internal_ev_rule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ev_rule(const std::string& value);
  std::string* _internal_mutable_ev_rule();
  public:

  // string under_symbol = 21;
  void clear_under_symbol();
  const std::string& under_symbol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_under_symbol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_under_symbol();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_under_symbol();
  void set_allocated_under_symbol(std::string* under_symbol);
  private:
  const std::string& _internal_under_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_under_symbol(const std::string& value);
  std::string* _internal_mutable_under_symbol();
  public:

  // string under_sec_type = 22;
  void clear_under_sec_type();
  const std::string& under_sec_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_under_sec_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_under_sec_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_under_sec_type();
  void set_allocated_under_sec_type(std::string* under_sec_type);
  private:
  const std::string& _internal_under_sec_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_under_sec_type(const std::string& value);
  std::string* _internal_mutable_under_sec_type();
  public:

  // string market_rule_ids = 23;
  void clear_market_rule_ids();
  const std::string& market_rule_ids() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_market_rule_ids(ArgT0&& arg0, ArgT... args);
  std::string* mutable_market_rule_ids();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_market_rule_ids();
  void set_allocated_market_rule_ids(std::string* market_rule_ids);
  private:
  const std::string& _internal_market_rule_ids() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_rule_ids(const std::string& value);
  std::string* _internal_mutable_market_rule_ids();
  public:

  // string real_expiration_date = 24;
  void clear_real_expiration_date();
  const std::string& real_expiration_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_real_expiration_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_real_expiration_date();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_real_expiration_date();
  void set_allocated_real_expiration_date(std::string* real_expiration_date);
  private:
  const std::string& _internal_real_expiration_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_real_expiration_date(const std::string& value);
  std::string* _internal_mutable_real_expiration_date();
  public:

  // string last_trade_time = 25;
  void clear_last_trade_time();
  const std::string& last_trade_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_trade_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_trade_time();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_last_trade_time();
  void set_allocated_last_trade_time(std::string* last_trade_time);
  private:
  const std::string& _internal_last_trade_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_trade_time(const std::string& value);
  std::string* _internal_mutable_last_trade_time();
  public:

  // string stock_type = 26;
  void clear_stock_type();
  const std::string& stock_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stock_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stock_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_stock_type();
  void set_allocated_stock_type(std::string* stock_type);
  private:
  const std::string& _internal_stock_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stock_type(const std::string& value);
  std::string* _internal_mutable_stock_type();
  public:

  // string cusip = 28;
  void clear_cusip();
  const std::string& cusip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cusip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cusip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_cusip();
  void set_allocated_cusip(std::string* cusip);
  private:
  const std::string& _internal_cusip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cusip(const std::string& value);
  std::string* _internal_mutable_cusip();
  public:

  // string ratings = 29;
  void clear_ratings();
  const std::string& ratings() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ratings(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ratings();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ratings();
  void set_allocated_ratings(std::string* ratings);
  private:
  const std::string& _internal_ratings() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ratings(const std::string& value);
  std::string* _internal_mutable_ratings();
  public:

  // string desc_append = 30;
  void clear_desc_append();
  const std::string& desc_append() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_desc_append(ArgT0&& arg0, ArgT... args);
  std::string* mutable_desc_append();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_desc_append();
  void set_allocated_desc_append(std::string* desc_append);
  private:
  const std::string& _internal_desc_append() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_desc_append(const std::string& value);
  std::string* _internal_mutable_desc_append();
  public:

  // string bond_type = 31;
  void clear_bond_type();
  const std::string& bond_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bond_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bond_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_bond_type();
  void set_allocated_bond_type(std::string* bond_type);
  private:
  const std::string& _internal_bond_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bond_type(const std::string& value);
  std::string* _internal_mutable_bond_type();
  public:

  // string coupon_type = 32;
  void clear_coupon_type();
  const std::string& coupon_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_coupon_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_coupon_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_coupon_type();
  void set_allocated_coupon_type(std::string* coupon_type);
  private:
  const std::string& _internal_coupon_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coupon_type(const std::string& value);
  std::string* _internal_mutable_coupon_type();
  public:

  // string maturity = 37;
  void clear_maturity();
  const std::string& maturity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maturity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maturity();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_maturity();
  void set_allocated_maturity(std::string* maturity);
  private:
  const std::string& _internal_maturity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maturity(const std::string& value);
  std::string* _internal_mutable_maturity();
  public:

  // string issueDate = 38;
  void clear_issuedate();
  const std::string& issuedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_issuedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_issuedate();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_issuedate();
  void set_allocated_issuedate(std::string* issuedate);
  private:
  const std::string& _internal_issuedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_issuedate(const std::string& value);
  std::string* _internal_mutable_issuedate();
  public:

  // string next_option_date = 39;
  void clear_next_option_date();
  const std::string& next_option_date() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_option_date(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_option_date();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_next_option_date();
  void set_allocated_next_option_date(std::string* next_option_date);
  private:
  const std::string& _internal_next_option_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_option_date(const std::string& value);
  std::string* _internal_mutable_next_option_date();
  public:

  // string next_option_type = 40;
  void clear_next_option_type();
  const std::string& next_option_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_next_option_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_next_option_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_next_option_type();
  void set_allocated_next_option_type(std::string* next_option_type);
  private:
  const std::string& _internal_next_option_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_option_type(const std::string& value);
  std::string* _internal_mutable_next_option_type();
  public:

  // string notes = 42;
  void clear_notes();
  const std::string& notes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notes();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  private:
  const std::string& _internal_notes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // .Jde.Markets.Proto.Contract contract = 2;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::Jde::Markets::Proto::Contract* contract);
  ::Jde::Markets::Proto::Contract* unsafe_arena_release_contract();

  // double min_tick = 4;
  void clear_min_tick();
  double min_tick() const;
  void set_min_tick(double value);
  private:
  double _internal_min_tick() const;
  void _internal_set_min_tick(double value);
  public:

  // int64 price_magnifier = 7;
  void clear_price_magnifier();
  ::PROTOBUF_NAMESPACE_ID::int64 price_magnifier() const;
  void set_price_magnifier(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_price_magnifier() const;
  void _internal_set_price_magnifier(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 under_con_id = 8;
  void clear_under_con_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 under_con_id() const;
  void set_under_con_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_under_con_id() const;
  void _internal_set_under_con_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 md_size_multiplier = 19;
  void clear_md_size_multiplier();
  ::PROTOBUF_NAMESPACE_ID::int32 md_size_multiplier() const;
  void set_md_size_multiplier(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_md_size_multiplier() const;
  void _internal_set_md_size_multiplier(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double ev_multiplier = 18;
  void clear_ev_multiplier();
  double ev_multiplier() const;
  void set_ev_multiplier(double value);
  private:
  double _internal_ev_multiplier() const;
  void _internal_set_ev_multiplier(double value);
  public:

  // int32 agg_group = 20;
  void clear_agg_group();
  ::PROTOBUF_NAMESPACE_ID::int32 agg_group() const;
  void set_agg_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_agg_group() const;
  void _internal_set_agg_group(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool callable = 33;
  void clear_callable();
  bool callable() const;
  void set_callable(bool value);
  private:
  bool _internal_callable() const;
  void _internal_set_callable(bool value);
  public:

  // bool putable = 34;
  void clear_putable();
  bool putable() const;
  void set_putable(bool value);
  private:
  bool _internal_putable() const;
  void _internal_set_putable(bool value);
  public:

  // bool convertible = 36;
  void clear_convertible();
  bool convertible() const;
  void set_convertible(bool value);
  private:
  bool _internal_convertible() const;
  void _internal_set_convertible(bool value);
  public:

  // bool next_option_partial = 41;
  void clear_next_option_partial();
  bool next_option_partial() const;
  void set_next_option_partial(bool value);
  private:
  bool _internal_next_option_partial() const;
  void _internal_set_next_option_partial(bool value);
  public:

  // double coupon = 35;
  void clear_coupon();
  double coupon() const;
  void set_coupon(double value);
  private:
  double _internal_coupon() const;
  void _internal_set_coupon(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.ContractDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractHours > trading_hours_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractHours > liquid_hours_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::TagValue > sec_id_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr valid_exchanges_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_month_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr industry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subcategory_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_zone_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ev_rule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr under_symbol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr under_sec_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_rule_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_expiration_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_trade_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stock_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cusip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ratings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_append_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bond_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr coupon_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maturity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuedate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_option_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_option_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  ::Jde::Markets::Proto::Contract* contract_;
  double min_tick_;
  ::PROTOBUF_NAMESPACE_ID::int64 price_magnifier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 under_con_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 md_size_multiplier_;
  double ev_multiplier_;
  ::PROTOBUF_NAMESPACE_ID::int32 agg_group_;
  bool callable_;
  bool putable_;
  bool convertible_;
  bool next_option_partial_;
  double coupon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT ContractDetailsResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.ContractDetailsResult) */ {
 public:
  inline ContractDetailsResult() : ContractDetailsResult(nullptr) {}
  ~ContractDetailsResult() override;
  explicit constexpr ContractDetailsResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ContractDetailsResult(const ContractDetailsResult& from);
  ContractDetailsResult(ContractDetailsResult&& from) noexcept
    : ContractDetailsResult() {
    *this = ::std::move(from);
  }

  inline ContractDetailsResult& operator=(const ContractDetailsResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractDetailsResult& operator=(ContractDetailsResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ContractDetailsResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ContractDetailsResult* internal_default_instance() {
    return reinterpret_cast<const ContractDetailsResult*>(
               &_ContractDetailsResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ContractDetailsResult& a, ContractDetailsResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractDetailsResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ContractDetailsResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractDetailsResult* New() const final {
    return new ContractDetailsResult();
  }

  ContractDetailsResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractDetailsResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractDetailsResult& from);
  void MergeFrom(const ContractDetailsResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractDetailsResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.ContractDetailsResult";
  }
  protected:
  explicit ContractDetailsResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated .Jde.Markets.Proto.Results.ContractDetail details = 2;
  int details_size() const;
  private:
  int _internal_details_size() const;
  public:
  void clear_details();
  ::Jde::Markets::Proto::Results::ContractDetail* mutable_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractDetail >*
      mutable_details();
  private:
  const ::Jde::Markets::Proto::Results::ContractDetail& _internal_details(int index) const;
  ::Jde::Markets::Proto::Results::ContractDetail* _internal_add_details();
  public:
  const ::Jde::Markets::Proto::Results::ContractDetail& details(int index) const;
  ::Jde::Markets::Proto::Results::ContractDetail* add_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractDetail >&
      details() const;

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.ContractDetailsResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractDetail > details_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit constexpr Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return new Position();
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNumberFieldNumber = 1,
    kContractFieldNumber = 2,
    kSizeFieldNumber = 3,
    kAvgCostFieldNumber = 4,
  };
  // string account_number = 1;
  void clear_account_number();
  const std::string& account_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_number();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account_number();
  void set_allocated_account_number(std::string* account_number);
  private:
  const std::string& _internal_account_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_number(const std::string& value);
  std::string* _internal_mutable_account_number();
  public:

  // .Jde.Markets.Proto.Contract contract = 2;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::Jde::Markets::Proto::Contract* contract);
  ::Jde::Markets::Proto::Contract* unsafe_arena_release_contract();

  // double size = 3;
  void clear_size();
  double size() const;
  void set_size(double value);
  private:
  double _internal_size() const;
  void _internal_set_size(double value);
  public:

  // double avg_cost = 4;
  void clear_avg_cost();
  double avg_cost() const;
  void set_avg_cost(double value);
  private:
  double _internal_avg_cost() const;
  void _internal_set_avg_cost(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_number_;
  ::Jde::Markets::Proto::Contract* contract_;
  double size_;
  double avg_cost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT StringMap_ValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StringMap_ValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<StringMap_ValuesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  StringMap_ValuesEntry_DoNotUse();
  explicit constexpr StringMap_ValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit StringMap_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const StringMap_ValuesEntry_DoNotUse& other);
  static const StringMap_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const StringMap_ValuesEntry_DoNotUse*>(&_StringMap_ValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Jde.Markets.Proto.Results.StringMap.ValuesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Jde.Markets.Proto.Results.StringMap.ValuesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT StringMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.StringMap) */ {
 public:
  inline StringMap() : StringMap(nullptr) {}
  ~StringMap() override;
  explicit constexpr StringMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringMap(const StringMap& from);
  StringMap(StringMap&& from) noexcept
    : StringMap() {
    *this = ::std::move(from);
  }

  inline StringMap& operator=(const StringMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringMap& operator=(StringMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringMap* internal_default_instance() {
    return reinterpret_cast<const StringMap*>(
               &_StringMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StringMap& a, StringMap& b) {
    a.Swap(&b);
  }
  inline void Swap(StringMap* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringMap* New() const final {
    return new StringMap();
  }

  StringMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringMap& from);
  void MergeFrom(const StringMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.StringMap";
  }
  protected:
  explicit StringMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // map<string, string> values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_values();

  // .Jde.Markets.Proto.Results.EResults result = 1;
  void clear_result();
  ::Jde::Markets::Proto::Results::EResults result() const;
  void set_result(::Jde::Markets::Proto::Results::EResults value);
  private:
  ::Jde::Markets::Proto::Results::EResults _internal_result() const;
  void _internal_set_result(::Jde::Markets::Proto::Results::EResults value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.StringMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      StringMap_ValuesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> values_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Fundamentals_ValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Fundamentals_ValuesEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Fundamentals_ValuesEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> SuperType;
  Fundamentals_ValuesEntry_DoNotUse();
  explicit constexpr Fundamentals_ValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Fundamentals_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Fundamentals_ValuesEntry_DoNotUse& other);
  static const Fundamentals_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Fundamentals_ValuesEntry_DoNotUse*>(&_Fundamentals_ValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Jde.Markets.Proto.Results.Fundamentals.ValuesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Fundamentals final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Fundamentals) */ {
 public:
  inline Fundamentals() : Fundamentals(nullptr) {}
  ~Fundamentals() override;
  explicit constexpr Fundamentals(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fundamentals(const Fundamentals& from);
  Fundamentals(Fundamentals&& from) noexcept
    : Fundamentals() {
    *this = ::std::move(from);
  }

  inline Fundamentals& operator=(const Fundamentals& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fundamentals& operator=(Fundamentals&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fundamentals& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fundamentals* internal_default_instance() {
    return reinterpret_cast<const Fundamentals*>(
               &_Fundamentals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Fundamentals& a, Fundamentals& b) {
    a.Swap(&b);
  }
  inline void Swap(Fundamentals* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fundamentals* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Fundamentals* New() const final {
    return new Fundamentals();
  }

  Fundamentals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Fundamentals>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Fundamentals& from);
  void MergeFrom(const Fundamentals& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fundamentals* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Fundamentals";
  }
  protected:
  explicit Fundamentals(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // map<string, double> values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_values();

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Fundamentals)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Fundamentals_ValuesEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE> values_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT AccountUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.AccountUpdate) */ {
 public:
  inline AccountUpdate() : AccountUpdate(nullptr) {}
  ~AccountUpdate() override;
  explicit constexpr AccountUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountUpdate(const AccountUpdate& from);
  AccountUpdate(AccountUpdate&& from) noexcept
    : AccountUpdate() {
    *this = ::std::move(from);
  }

  inline AccountUpdate& operator=(const AccountUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountUpdate& operator=(AccountUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountUpdate* internal_default_instance() {
    return reinterpret_cast<const AccountUpdate*>(
               &_AccountUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AccountUpdate& a, AccountUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountUpdate* New() const final {
    return new AccountUpdate();
  }

  AccountUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountUpdate& from);
  void MergeFrom(const AccountUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.AccountUpdate";
  }
  protected:
  explicit AccountUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kKeyFieldNumber = 4,
    kValueFieldNumber = 5,
    kCurrencyFieldNumber = 6,
  };
  // string account = 2;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string key = 4;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 5;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string currency = 6;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.AccountUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT AccountUpdateMulti final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.AccountUpdateMulti) */ {
 public:
  inline AccountUpdateMulti() : AccountUpdateMulti(nullptr) {}
  ~AccountUpdateMulti() override;
  explicit constexpr AccountUpdateMulti(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountUpdateMulti(const AccountUpdateMulti& from);
  AccountUpdateMulti(AccountUpdateMulti&& from) noexcept
    : AccountUpdateMulti() {
    *this = ::std::move(from);
  }

  inline AccountUpdateMulti& operator=(const AccountUpdateMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountUpdateMulti& operator=(AccountUpdateMulti&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountUpdateMulti& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountUpdateMulti* internal_default_instance() {
    return reinterpret_cast<const AccountUpdateMulti*>(
               &_AccountUpdateMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AccountUpdateMulti& a, AccountUpdateMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountUpdateMulti* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountUpdateMulti* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountUpdateMulti* New() const final {
    return new AccountUpdateMulti();
  }

  AccountUpdateMulti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountUpdateMulti>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountUpdateMulti& from);
  void MergeFrom(const AccountUpdateMulti& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountUpdateMulti* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.AccountUpdateMulti";
  }
  protected:
  explicit AccountUpdateMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kModelCodeFieldNumber = 3,
    kKeyFieldNumber = 4,
    kValueFieldNumber = 5,
    kCurrencyFieldNumber = 6,
    kRequestIdFieldNumber = 1,
  };
  // string account = 2;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string model_code = 3;
  void clear_model_code();
  const std::string& model_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_model_code();
  void set_allocated_model_code(std::string* model_code);
  private:
  const std::string& _internal_model_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_code(const std::string& value);
  std::string* _internal_mutable_model_code();
  public:

  // string key = 4;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 5;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string currency = 6;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.AccountUpdateMulti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT PositionMulti final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.PositionMulti) */ {
 public:
  inline PositionMulti() : PositionMulti(nullptr) {}
  ~PositionMulti() override;
  explicit constexpr PositionMulti(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionMulti(const PositionMulti& from);
  PositionMulti(PositionMulti&& from) noexcept
    : PositionMulti() {
    *this = ::std::move(from);
  }

  inline PositionMulti& operator=(const PositionMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionMulti& operator=(PositionMulti&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionMulti& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionMulti* internal_default_instance() {
    return reinterpret_cast<const PositionMulti*>(
               &_PositionMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PositionMulti& a, PositionMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionMulti* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionMulti* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionMulti* New() const final {
    return new PositionMulti();
  }

  PositionMulti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionMulti>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionMulti& from);
  void MergeFrom(const PositionMulti& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionMulti* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.PositionMulti";
  }
  protected:
  explicit PositionMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kModelCodeFieldNumber = 3,
    kContractFieldNumber = 4,
    kPositionFieldNumber = 5,
    kAvgerageCostFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // string account = 2;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string model_code = 3;
  void clear_model_code();
  const std::string& model_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_model_code();
  void set_allocated_model_code(std::string* model_code);
  private:
  const std::string& _internal_model_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_code(const std::string& value);
  std::string* _internal_mutable_model_code();
  public:

  // .Jde.Markets.Proto.Contract contract = 4;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::Jde::Markets::Proto::Contract* contract);
  ::Jde::Markets::Proto::Contract* unsafe_arena_release_contract();

  // double position = 5;
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // double avgerage_cost = 6;
  void clear_avgerage_cost();
  double avgerage_cost() const;
  void set_avgerage_cost(double value);
  private:
  double _internal_avgerage_cost() const;
  void _internal_set_avgerage_cost(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.PositionMulti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_code_;
  ::Jde::Markets::Proto::Contract* contract_;
  double position_;
  double avgerage_cost_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Bar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Bar) */ {
 public:
  inline Bar() : Bar(nullptr) {}
  ~Bar() override;
  explicit constexpr Bar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bar(const Bar& from);
  Bar(Bar&& from) noexcept
    : Bar() {
    *this = ::std::move(from);
  }

  inline Bar& operator=(const Bar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bar& operator=(Bar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bar& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bar* internal_default_instance() {
    return reinterpret_cast<const Bar*>(
               &_Bar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Bar& a, Bar& b) {
    a.Swap(&b);
  }
  inline void Swap(Bar* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bar* New() const final {
    return new Bar();
  }

  Bar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bar& from);
  void MergeFrom(const Bar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Bar";
  }
  protected:
  explicit Bar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighFieldNumber = 2,
    kLowFieldNumber = 3,
    kOpenFieldNumber = 4,
    kTimeFieldNumber = 1,
    kCountFieldNumber = 8,
    kCloseFieldNumber = 5,
    kWapFieldNumber = 6,
    kVolumeFieldNumber = 7,
  };
  // double high = 2;
  void clear_high();
  double high() const;
  void set_high(double value);
  private:
  double _internal_high() const;
  void _internal_set_high(double value);
  public:

  // double low = 3;
  void clear_low();
  double low() const;
  void set_low(double value);
  private:
  double _internal_low() const;
  void _internal_set_low(double value);
  public:

  // double open = 4;
  void clear_open();
  double open() const;
  void set_open(double value);
  private:
  double _internal_open() const;
  void _internal_set_open(double value);
  public:

  // int32 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 8;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double close = 5;
  void clear_close();
  double close() const;
  void set_close(double value);
  private:
  double _internal_close() const;
  void _internal_set_close(double value);
  public:

  // double wap = 6;
  void clear_wap();
  double wap() const;
  void set_wap(double value);
  private:
  double _internal_wap() const;
  void _internal_set_wap(double value);
  public:

  // uint64 volume = 7;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Bar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double high_;
  double low_;
  double open_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  double close_;
  double wap_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT CommissionReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.CommissionReport) */ {
 public:
  inline CommissionReport() : CommissionReport(nullptr) {}
  ~CommissionReport() override;
  explicit constexpr CommissionReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommissionReport(const CommissionReport& from);
  CommissionReport(CommissionReport&& from) noexcept
    : CommissionReport() {
    *this = ::std::move(from);
  }

  inline CommissionReport& operator=(const CommissionReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommissionReport& operator=(CommissionReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommissionReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommissionReport* internal_default_instance() {
    return reinterpret_cast<const CommissionReport*>(
               &_CommissionReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CommissionReport& a, CommissionReport& b) {
    a.Swap(&b);
  }
  inline void Swap(CommissionReport* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommissionReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommissionReport* New() const final {
    return new CommissionReport();
  }

  CommissionReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommissionReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommissionReport& from);
  void MergeFrom(const CommissionReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommissionReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.CommissionReport";
  }
  protected:
  explicit CommissionReport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExecIdFieldNumber = 2,
    kCurrencyFieldNumber = 4,
    kCommissionFieldNumber = 3,
    kRealizedPnlFieldNumber = 5,
    kYieldFieldNumber = 6,
    kYieldRedemptionDateFieldNumber = 7,
  };
  // string exec_id = 2;
  void clear_exec_id();
  const std::string& exec_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exec_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exec_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_exec_id();
  void set_allocated_exec_id(std::string* exec_id);
  private:
  const std::string& _internal_exec_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exec_id(const std::string& value);
  std::string* _internal_mutable_exec_id();
  public:

  // string currency = 4;
  void clear_currency();
  const std::string& currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_currency();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // double commission = 3;
  void clear_commission();
  double commission() const;
  void set_commission(double value);
  private:
  double _internal_commission() const;
  void _internal_set_commission(double value);
  public:

  // double realized_pnl = 5;
  void clear_realized_pnl();
  double realized_pnl() const;
  void set_realized_pnl(double value);
  private:
  double _internal_realized_pnl() const;
  void _internal_set_realized_pnl(double value);
  public:

  // double yield = 6;
  void clear_yield();
  double yield() const;
  void set_yield(double value);
  private:
  double _internal_yield() const;
  void _internal_set_yield(double value);
  public:

  // uint32 yield_redemption_date = 7;
  void clear_yield_redemption_date();
  ::PROTOBUF_NAMESPACE_ID::uint32 yield_redemption_date() const;
  void set_yield_redemption_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_yield_redemption_date() const;
  void _internal_set_yield_redemption_date(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.CommissionReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exec_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  double commission_;
  double realized_pnl_;
  double yield_;
  ::PROTOBUF_NAMESPACE_ID::uint32 yield_redemption_date_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT DaySummary final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.DaySummary) */ {
 public:
  inline DaySummary() : DaySummary(nullptr) {}
  ~DaySummary() override;
  explicit constexpr DaySummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DaySummary(const DaySummary& from);
  DaySummary(DaySummary&& from) noexcept
    : DaySummary() {
    *this = ::std::move(from);
  }

  inline DaySummary& operator=(const DaySummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline DaySummary& operator=(DaySummary&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DaySummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const DaySummary* internal_default_instance() {
    return reinterpret_cast<const DaySummary*>(
               &_DaySummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DaySummary& a, DaySummary& b) {
    a.Swap(&b);
  }
  inline void Swap(DaySummary* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DaySummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DaySummary* New() const final {
    return new DaySummary();
  }

  DaySummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DaySummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DaySummary& from);
  void MergeFrom(const DaySummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DaySummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.DaySummary";
  }
  protected:
  explicit DaySummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kContractIdFieldNumber = 2,
    kHighFieldNumber = 4,
    kLowFieldNumber = 5,
    kOpenFieldNumber = 6,
    kCloseFieldNumber = 7,
    kDayFieldNumber = 3,
    kCountFieldNumber = 11,
    kBidFieldNumber = 8,
    kAskFieldNumber = 9,
    kVolumeFieldNumber = 10,
  };
  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 contract_id = 2;
  void clear_contract_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 contract_id() const;
  void set_contract_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_contract_id() const;
  void _internal_set_contract_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double high = 4;
  void clear_high();
  double high() const;
  void set_high(double value);
  private:
  double _internal_high() const;
  void _internal_set_high(double value);
  public:

  // double low = 5;
  void clear_low();
  double low() const;
  void set_low(double value);
  private:
  double _internal_low() const;
  void _internal_set_low(double value);
  public:

  // double open = 6;
  void clear_open();
  double open() const;
  void set_open(double value);
  private:
  double _internal_open() const;
  void _internal_set_open(double value);
  public:

  // double close = 7;
  void clear_close();
  double close() const;
  void set_close(double value);
  private:
  double _internal_close() const;
  void _internal_set_close(double value);
  public:

  // uint32 day = 3;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::uint32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 11;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double bid = 8;
  void clear_bid();
  double bid() const;
  void set_bid(double value);
  private:
  double _internal_bid() const;
  void _internal_set_bid(double value);
  public:

  // double ask = 9;
  void clear_ask();
  double ask() const;
  void set_ask(double value);
  private:
  double _internal_ask() const;
  void _internal_set_ask(double value);
  public:

  // uint64 volume = 10;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint64 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.DaySummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 contract_id_;
  double high_;
  double low_;
  double open_;
  double close_;
  ::PROTOBUF_NAMESPACE_ID::uint32 day_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  double bid_;
  double ask_;
  ::PROTOBUF_NAMESPACE_ID::uint64 volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT HistoricalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.HistoricalData) */ {
 public:
  inline HistoricalData() : HistoricalData(nullptr) {}
  ~HistoricalData() override;
  explicit constexpr HistoricalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HistoricalData(const HistoricalData& from);
  HistoricalData(HistoricalData&& from) noexcept
    : HistoricalData() {
    *this = ::std::move(from);
  }

  inline HistoricalData& operator=(const HistoricalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricalData& operator=(HistoricalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistoricalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistoricalData* internal_default_instance() {
    return reinterpret_cast<const HistoricalData*>(
               &_HistoricalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(HistoricalData& a, HistoricalData& b) {
    a.Swap(&b);
  }
  inline void Swap(HistoricalData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HistoricalData* New() const final {
    return new HistoricalData();
  }

  HistoricalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HistoricalData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HistoricalData& from);
  void MergeFrom(const HistoricalData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HistoricalData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.HistoricalData";
  }
  protected:
  explicit HistoricalData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBarsFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated .Jde.Markets.Proto.Results.Bar bars = 2;
  int bars_size() const;
  private:
  int _internal_bars_size() const;
  public:
  void clear_bars();
  ::Jde::Markets::Proto::Results::Bar* mutable_bars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Bar >*
      mutable_bars();
  private:
  const ::Jde::Markets::Proto::Results::Bar& _internal_bars(int index) const;
  ::Jde::Markets::Proto::Results::Bar* _internal_add_bars();
  public:
  const ::Jde::Markets::Proto::Results::Bar& bars(int index) const;
  ::Jde::Markets::Proto::Results::Bar* add_bars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Bar >&
      bars() const;

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.HistoricalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Bar > bars_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT PortfolioUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.PortfolioUpdate) */ {
 public:
  inline PortfolioUpdate() : PortfolioUpdate(nullptr) {}
  ~PortfolioUpdate() override;
  explicit constexpr PortfolioUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PortfolioUpdate(const PortfolioUpdate& from);
  PortfolioUpdate(PortfolioUpdate&& from) noexcept
    : PortfolioUpdate() {
    *this = ::std::move(from);
  }

  inline PortfolioUpdate& operator=(const PortfolioUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PortfolioUpdate& operator=(PortfolioUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PortfolioUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PortfolioUpdate* internal_default_instance() {
    return reinterpret_cast<const PortfolioUpdate*>(
               &_PortfolioUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PortfolioUpdate& a, PortfolioUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PortfolioUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PortfolioUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PortfolioUpdate* New() const final {
    return new PortfolioUpdate();
  }

  PortfolioUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PortfolioUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PortfolioUpdate& from);
  void MergeFrom(const PortfolioUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PortfolioUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.PortfolioUpdate";
  }
  protected:
  explicit PortfolioUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNumberFieldNumber = 8,
    kContractFieldNumber = 1,
    kPositionFieldNumber = 2,
    kMarketPriceFieldNumber = 3,
    kMarketValueFieldNumber = 4,
    kAverageCostFieldNumber = 5,
    kUnrealizedPnlFieldNumber = 6,
    kRealizedPnlFieldNumber = 7,
  };
  // string account_number = 8;
  void clear_account_number();
  const std::string& account_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_number();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account_number();
  void set_allocated_account_number(std::string* account_number);
  private:
  const std::string& _internal_account_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_number(const std::string& value);
  std::string* _internal_mutable_account_number();
  public:

  // .Jde.Markets.Proto.Contract contract = 1;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::Jde::Markets::Proto::Contract* contract);
  ::Jde::Markets::Proto::Contract* unsafe_arena_release_contract();

  // double position = 2;
  void clear_position();
  double position() const;
  void set_position(double value);
  private:
  double _internal_position() const;
  void _internal_set_position(double value);
  public:

  // double market_price = 3;
  void clear_market_price();
  double market_price() const;
  void set_market_price(double value);
  private:
  double _internal_market_price() const;
  void _internal_set_market_price(double value);
  public:

  // double market_value = 4;
  void clear_market_value();
  double market_value() const;
  void set_market_value(double value);
  private:
  double _internal_market_value() const;
  void _internal_set_market_value(double value);
  public:

  // double average_cost = 5;
  void clear_average_cost();
  double average_cost() const;
  void set_average_cost(double value);
  private:
  double _internal_average_cost() const;
  void _internal_set_average_cost(double value);
  public:

  // double unrealized_pnl = 6;
  void clear_unrealized_pnl();
  double unrealized_pnl() const;
  void set_unrealized_pnl(double value);
  private:
  double _internal_unrealized_pnl() const;
  void _internal_set_unrealized_pnl(double value);
  public:

  // double realized_pnl = 7;
  void clear_realized_pnl();
  double realized_pnl() const;
  void set_realized_pnl(double value);
  private:
  double _internal_realized_pnl() const;
  void _internal_set_realized_pnl(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.PortfolioUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_number_;
  ::Jde::Markets::Proto::Contract* contract_;
  double position_;
  double market_price_;
  double market_value_;
  double average_cost_;
  double unrealized_pnl_;
  double realized_pnl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT FlexOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.FlexOrder) */ {
 public:
  inline FlexOrder() : FlexOrder(nullptr) {}
  ~FlexOrder() override;
  explicit constexpr FlexOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlexOrder(const FlexOrder& from);
  FlexOrder(FlexOrder&& from) noexcept
    : FlexOrder() {
    *this = ::std::move(from);
  }

  inline FlexOrder& operator=(const FlexOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlexOrder& operator=(FlexOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlexOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlexOrder* internal_default_instance() {
    return reinterpret_cast<const FlexOrder*>(
               &_FlexOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(FlexOrder& a, FlexOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(FlexOrder* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlexOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlexOrder* New() const final {
    return new FlexOrder();
  }

  FlexOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlexOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlexOrder& from);
  void MergeFrom(const FlexOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlexOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.FlexOrder";
  }
  protected:
  explicit FlexOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNumberFieldNumber = 3,
    kSideFieldNumber = 5,
    kOrderTypeFieldNumber = 11,
    kContractFieldNumber = 9,
    kOrderIdFieldNumber = 2,
    kTimeFieldNumber = 4,
    kSharesFieldNumber = 6,
    kPriceFieldNumber = 7,
    kCommissionFieldNumber = 10,
    kOrderTimeFieldNumber = 12,
  };
  // string account_number = 3;
  void clear_account_number();
  const std::string& account_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_number();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account_number();
  void set_allocated_account_number(std::string* account_number);
  private:
  const std::string& _internal_account_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_number(const std::string& value);
  std::string* _internal_mutable_account_number();
  public:

  // string side = 5;
  void clear_side();
  const std::string& side() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_side(ArgT0&& arg0, ArgT... args);
  std::string* mutable_side();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_side();
  void set_allocated_side(std::string* side);
  private:
  const std::string& _internal_side() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_side(const std::string& value);
  std::string* _internal_mutable_side();
  public:

  // string order_type = 11;
  void clear_order_type();
  const std::string& order_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_order_type();
  void set_allocated_order_type(std::string* order_type);
  private:
  const std::string& _internal_order_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_type(const std::string& value);
  std::string* _internal_mutable_order_type();
  public:

  // .Jde.Markets.Proto.Contract contract = 9;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::Jde::Markets::Proto::Contract* contract);
  ::Jde::Markets::Proto::Contract* unsafe_arena_release_contract();

  // uint32 order_id = 2;
  void clear_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 order_id() const;
  void set_order_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_order_id() const;
  void _internal_set_order_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double shares = 6;
  void clear_shares();
  double shares() const;
  void set_shares(double value);
  private:
  double _internal_shares() const;
  void _internal_set_shares(double value);
  public:

  // double price = 7;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // double commission = 10;
  void clear_commission();
  double commission() const;
  void set_commission(double value);
  private:
  double _internal_commission() const;
  void _internal_set_commission(double value);
  public:

  // uint32 order_time = 12;
  void clear_order_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 order_time() const;
  void set_order_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_order_time() const;
  void _internal_set_order_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.FlexOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr side_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_type_;
  ::Jde::Markets::Proto::Contract* contract_;
  ::PROTOBUF_NAMESPACE_ID::uint32 order_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  double shares_;
  double price_;
  double commission_;
  ::PROTOBUF_NAMESPACE_ID::uint32 order_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Trade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Trade) */ {
 public:
  inline Trade() : Trade(nullptr) {}
  ~Trade() override;
  explicit constexpr Trade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trade(const Trade& from);
  Trade(Trade&& from) noexcept
    : Trade() {
    *this = ::std::move(from);
  }

  inline Trade& operator=(const Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trade& operator=(Trade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Trade& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trade* internal_default_instance() {
    return reinterpret_cast<const Trade*>(
               &_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Trade& a, Trade& b) {
    a.Swap(&b);
  }
  inline void Swap(Trade* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trade* New() const final {
    return new Trade();
  }

  Trade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trade& from);
  void MergeFrom(const Trade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Trade";
  }
  protected:
  explicit Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNumberFieldNumber = 3,
    kSideFieldNumber = 5,
    kExecIdFieldNumber = 8,
    kOrderTypeFieldNumber = 11,
    kContractFieldNumber = 9,
    kIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
    kSharesFieldNumber = 6,
    kPriceFieldNumber = 7,
    kTimeFieldNumber = 4,
    kOrderTimeFieldNumber = 12,
    kCommissionFieldNumber = 10,
    kIsApiFieldNumber = 13,
  };
  // string account_number = 3;
  void clear_account_number();
  const std::string& account_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_number();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account_number();
  void set_allocated_account_number(std::string* account_number);
  private:
  const std::string& _internal_account_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_number(const std::string& value);
  std::string* _internal_mutable_account_number();
  public:

  // string side = 5;
  void clear_side();
  const std::string& side() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_side(ArgT0&& arg0, ArgT... args);
  std::string* mutable_side();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_side();
  void set_allocated_side(std::string* side);
  private:
  const std::string& _internal_side() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_side(const std::string& value);
  std::string* _internal_mutable_side();
  public:

  // string exec_id = 8;
  void clear_exec_id();
  const std::string& exec_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exec_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exec_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_exec_id();
  void set_allocated_exec_id(std::string* exec_id);
  private:
  const std::string& _internal_exec_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exec_id(const std::string& value);
  std::string* _internal_mutable_exec_id();
  public:

  // string order_type = 11;
  void clear_order_type();
  const std::string& order_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_order_type();
  void set_allocated_order_type(std::string* order_type);
  private:
  const std::string& _internal_order_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_type(const std::string& value);
  std::string* _internal_mutable_order_type();
  public:

  // .Jde.Markets.Proto.Contract contract = 9;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::Jde::Markets::Proto::Contract* contract);
  ::Jde::Markets::Proto::Contract* unsafe_arena_release_contract();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 order_id = 2;
  void clear_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 order_id() const;
  void set_order_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_order_id() const;
  void _internal_set_order_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double shares = 6;
  void clear_shares();
  double shares() const;
  void set_shares(double value);
  private:
  double _internal_shares() const;
  void _internal_set_shares(double value);
  public:

  // double price = 7;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // uint32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 order_time = 12;
  void clear_order_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 order_time() const;
  void set_order_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_order_time() const;
  void _internal_set_order_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double commission = 10;
  void clear_commission();
  double commission() const;
  void set_commission(double value);
  private:
  double _internal_commission() const;
  void _internal_set_commission(double value);
  public:

  // bool is_api = 13;
  void clear_is_api();
  bool is_api() const;
  void set_is_api(bool value);
  private:
  bool _internal_is_api() const;
  void _internal_set_is_api(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Trade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr side_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exec_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_type_;
  ::Jde::Markets::Proto::Contract* contract_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 order_id_;
  double shares_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 order_time_;
  double commission_;
  bool is_api_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Execution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Execution) */ {
 public:
  inline Execution() : Execution(nullptr) {}
  ~Execution() override;
  explicit constexpr Execution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Execution(const Execution& from);
  Execution(Execution&& from) noexcept
    : Execution() {
    *this = ::std::move(from);
  }

  inline Execution& operator=(const Execution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Execution& operator=(Execution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Execution& default_instance() {
    return *internal_default_instance();
  }
  static inline const Execution* internal_default_instance() {
    return reinterpret_cast<const Execution*>(
               &_Execution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Execution& a, Execution& b) {
    a.Swap(&b);
  }
  inline void Swap(Execution* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Execution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Execution* New() const final {
    return new Execution();
  }

  Execution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Execution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Execution& from);
  void MergeFrom(const Execution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Execution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Execution";
  }
  protected:
  explicit Execution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNumberFieldNumber = 3,
    kSideFieldNumber = 5,
    kExecIdFieldNumber = 8,
    kExchangeFieldNumber = 14,
    kOrderRefFieldNumber = 20,
    kEvRuleFieldNumber = 21,
    kModelCodeFieldNumber = 23,
    kContractFieldNumber = 9,
    kIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
    kSharesFieldNumber = 6,
    kPriceFieldNumber = 7,
    kTimeFieldNumber = 4,
    kPermIdFieldNumber = 15,
    kClientIdFieldNumber = 16,
    kLiquidationFieldNumber = 17,
    kCumulativeQuantityFieldNumber = 18,
    kAvgPriceFieldNumber = 19,
    kLastLiquidityFieldNumber = 24,
    kEvMultiplierFieldNumber = 22,
  };
  // string account_number = 3;
  void clear_account_number();
  const std::string& account_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account_number();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account_number();
  void set_allocated_account_number(std::string* account_number);
  private:
  const std::string& _internal_account_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_number(const std::string& value);
  std::string* _internal_mutable_account_number();
  public:

  // string side = 5;
  void clear_side();
  const std::string& side() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_side(ArgT0&& arg0, ArgT... args);
  std::string* mutable_side();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_side();
  void set_allocated_side(std::string* side);
  private:
  const std::string& _internal_side() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_side(const std::string& value);
  std::string* _internal_mutable_side();
  public:

  // string exec_id = 8;
  void clear_exec_id();
  const std::string& exec_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exec_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exec_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_exec_id();
  void set_allocated_exec_id(std::string* exec_id);
  private:
  const std::string& _internal_exec_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exec_id(const std::string& value);
  std::string* _internal_mutable_exec_id();
  public:

  // string exchange = 14;
  void clear_exchange();
  const std::string& exchange() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_exchange(ArgT0&& arg0, ArgT... args);
  std::string* mutable_exchange();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_exchange();
  void set_allocated_exchange(std::string* exchange);
  private:
  const std::string& _internal_exchange() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange(const std::string& value);
  std::string* _internal_mutable_exchange();
  public:

  // string order_ref = 20;
  void clear_order_ref();
  const std::string& order_ref() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_ref(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_ref();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_order_ref();
  void set_allocated_order_ref(std::string* order_ref);
  private:
  const std::string& _internal_order_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_ref(const std::string& value);
  std::string* _internal_mutable_order_ref();
  public:

  // string ev_rule = 21;
  void clear_ev_rule();
  const std::string& ev_rule() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ev_rule(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ev_rule();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ev_rule();
  void set_allocated_ev_rule(std::string* ev_rule);
  private:
  const std::string& _internal_ev_rule() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ev_rule(const std::string& value);
  std::string* _internal_mutable_ev_rule();
  public:

  // string model_code = 23;
  void clear_model_code();
  const std::string& model_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_code();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_model_code();
  void set_allocated_model_code(std::string* model_code);
  private:
  const std::string& _internal_model_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_code(const std::string& value);
  std::string* _internal_mutable_model_code();
  public:

  // .Jde.Markets.Proto.Contract contract = 9;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::Jde::Markets::Proto::Contract* contract);
  ::Jde::Markets::Proto::Contract* unsafe_arena_release_contract();

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 order_id = 2;
  void clear_order_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 order_id() const;
  void set_order_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_order_id() const;
  void _internal_set_order_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double shares = 6;
  void clear_shares();
  double shares() const;
  void set_shares(double value);
  private:
  double _internal_shares() const;
  void _internal_set_shares(double value);
  public:

  // double price = 7;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // uint32 time = 4;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 perm_id = 15;
  void clear_perm_id();
  ::PROTOBUF_NAMESPACE_ID::int32 perm_id() const;
  void set_perm_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_perm_id() const;
  void _internal_set_perm_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 client_id = 16;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 liquidation = 17;
  void clear_liquidation();
  ::PROTOBUF_NAMESPACE_ID::int32 liquidation() const;
  void set_liquidation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_liquidation() const;
  void _internal_set_liquidation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double cumulative_quantity = 18;
  void clear_cumulative_quantity();
  double cumulative_quantity() const;
  void set_cumulative_quantity(double value);
  private:
  double _internal_cumulative_quantity() const;
  void _internal_set_cumulative_quantity(double value);
  public:

  // double avg_price = 19;
  void clear_avg_price();
  double avg_price() const;
  void set_avg_price(double value);
  private:
  double _internal_avg_price() const;
  void _internal_set_avg_price(double value);
  public:

  // int32 last_liquidity = 24;
  void clear_last_liquidity();
  ::PROTOBUF_NAMESPACE_ID::int32 last_liquidity() const;
  void set_last_liquidity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_liquidity() const;
  void _internal_set_last_liquidity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double ev_multiplier = 22;
  void clear_ev_multiplier();
  double ev_multiplier() const;
  void set_ev_multiplier(double value);
  private:
  double _internal_ev_multiplier() const;
  void _internal_set_ev_multiplier(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Execution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr side_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exec_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_ref_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ev_rule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_code_;
  ::Jde::Markets::Proto::Contract* contract_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 order_id_;
  double shares_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 perm_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 liquidation_;
  double cumulative_quantity_;
  double avg_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_liquidity_;
  double ev_multiplier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Flex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Flex) */ {
 public:
  inline Flex() : Flex(nullptr) {}
  ~Flex() override;
  explicit constexpr Flex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Flex(const Flex& from);
  Flex(Flex&& from) noexcept
    : Flex() {
    *this = ::std::move(from);
  }

  inline Flex& operator=(const Flex& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flex& operator=(Flex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Flex& default_instance() {
    return *internal_default_instance();
  }
  static inline const Flex* internal_default_instance() {
    return reinterpret_cast<const Flex*>(
               &_Flex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Flex& a, Flex& b) {
    a.Swap(&b);
  }
  inline void Swap(Flex* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Flex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Flex* New() const final {
    return new Flex();
  }

  Flex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Flex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Flex& from);
  void MergeFrom(const Flex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Flex";
  }
  protected:
  explicit Flex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 2,
    kTradesFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .Jde.Markets.Proto.Results.FlexOrder orders = 2;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::Jde::Markets::Proto::Results::FlexOrder* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::FlexOrder >*
      mutable_orders();
  private:
  const ::Jde::Markets::Proto::Results::FlexOrder& _internal_orders(int index) const;
  ::Jde::Markets::Proto::Results::FlexOrder* _internal_add_orders();
  public:
  const ::Jde::Markets::Proto::Results::FlexOrder& orders(int index) const;
  ::Jde::Markets::Proto::Results::FlexOrder* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::FlexOrder >&
      orders() const;

  // repeated .Jde.Markets.Proto.Results.Trade trades = 3;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::Jde::Markets::Proto::Results::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Trade >*
      mutable_trades();
  private:
  const ::Jde::Markets::Proto::Results::Trade& _internal_trades(int index) const;
  ::Jde::Markets::Proto::Results::Trade* _internal_add_trades();
  public:
  const ::Jde::Markets::Proto::Results::Trade& trades(int index) const;
  ::Jde::Markets::Proto::Results::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Trade >&
      trades() const;

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Flex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::FlexOrder > orders_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Trade > trades_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  explicit constexpr Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Error* New() const final {
    return new Error();
  }

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Option final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Option) */ {
 public:
  inline Option() : Option(nullptr) {}
  ~Option() override;
  explicit constexpr Option(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Option(const Option& from);
  Option(Option&& from) noexcept
    : Option() {
    *this = ::std::move(from);
  }

  inline Option& operator=(const Option& from) {
    CopyFrom(from);
    return *this;
  }
  inline Option& operator=(Option&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Option& default_instance() {
    return *internal_default_instance();
  }
  static inline const Option* internal_default_instance() {
    return reinterpret_cast<const Option*>(
               &_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Option& a, Option& b) {
    a.Swap(&b);
  }
  inline void Swap(Option* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Option* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Option* New() const final {
    return new Option();
  }

  Option* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Option>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Option& from);
  void MergeFrom(const Option& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Option* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Option";
  }
  protected:
  explicit Option(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStrikeFieldNumber = 2,
    kBidFieldNumber = 3,
    kAskFieldNumber = 4,
    kLastFieldNumber = 5,
    kVolumeFieldNumber = 6,
    kOpenInterestFieldNumber = 7,
    kOiChangeFieldNumber = 8,
    kPreviousPriceFieldNumber = 9,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float strike = 2;
  void clear_strike();
  float strike() const;
  void set_strike(float value);
  private:
  float _internal_strike() const;
  void _internal_set_strike(float value);
  public:

  // float bid = 3;
  void clear_bid();
  float bid() const;
  void set_bid(float value);
  private:
  float _internal_bid() const;
  void _internal_set_bid(float value);
  public:

  // float ask = 4;
  void clear_ask();
  float ask() const;
  void set_ask(float value);
  private:
  float _internal_ask() const;
  void _internal_set_ask(float value);
  public:

  // float last = 5;
  void clear_last();
  float last() const;
  void set_last(float value);
  private:
  float _internal_last() const;
  void _internal_set_last(float value);
  public:

  // uint32 volume = 6;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::uint32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 open_interest = 7;
  void clear_open_interest();
  ::PROTOBUF_NAMESPACE_ID::uint32 open_interest() const;
  void set_open_interest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_open_interest() const;
  void _internal_set_open_interest(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 oi_change = 8;
  void clear_oi_change();
  ::PROTOBUF_NAMESPACE_ID::int32 oi_change() const;
  void set_oi_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_oi_change() const;
  void _internal_set_oi_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float previous_price = 9;
  void clear_previous_price();
  float previous_price() const;
  void set_previous_price(float value);
  private:
  float _internal_previous_price() const;
  void _internal_set_previous_price(float value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Option)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float strike_;
  float bid_;
  float ask_;
  float last_;
  ::PROTOBUF_NAMESPACE_ID::uint32 volume_;
  ::PROTOBUF_NAMESPACE_ID::uint32 open_interest_;
  ::PROTOBUF_NAMESPACE_ID::int32 oi_change_;
  float previous_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT OptionCalculation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.OptionCalculation) */ {
 public:
  inline OptionCalculation() : OptionCalculation(nullptr) {}
  ~OptionCalculation() override;
  explicit constexpr OptionCalculation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionCalculation(const OptionCalculation& from);
  OptionCalculation(OptionCalculation&& from) noexcept
    : OptionCalculation() {
    *this = ::std::move(from);
  }

  inline OptionCalculation& operator=(const OptionCalculation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionCalculation& operator=(OptionCalculation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionCalculation& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionCalculation* internal_default_instance() {
    return reinterpret_cast<const OptionCalculation*>(
               &_OptionCalculation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(OptionCalculation& a, OptionCalculation& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionCalculation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionCalculation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionCalculation* New() const final {
    return new OptionCalculation();
  }

  OptionCalculation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionCalculation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionCalculation& from);
  void MergeFrom(const OptionCalculation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionCalculation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.OptionCalculation";
  }
  protected:
  explicit OptionCalculation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kTickTypeFieldNumber = 2,
    kImpliedVolatilityFieldNumber = 4,
    kDeltaFieldNumber = 5,
    kOptionPriceFieldNumber = 6,
    kPvDividendFieldNumber = 7,
    kGammaFieldNumber = 8,
    kVegaFieldNumber = 9,
    kThetaFieldNumber = 10,
    kUnderlyingPriceFieldNumber = 11,
    kPriceBasedFieldNumber = 3,
  };
  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Jde.Markets.Proto.Results.ETickType tick_type = 2;
  void clear_tick_type();
  ::Jde::Markets::Proto::Results::ETickType tick_type() const;
  void set_tick_type(::Jde::Markets::Proto::Results::ETickType value);
  private:
  ::Jde::Markets::Proto::Results::ETickType _internal_tick_type() const;
  void _internal_set_tick_type(::Jde::Markets::Proto::Results::ETickType value);
  public:

  // double implied_volatility = 4;
  void clear_implied_volatility();
  double implied_volatility() const;
  void set_implied_volatility(double value);
  private:
  double _internal_implied_volatility() const;
  void _internal_set_implied_volatility(double value);
  public:

  // double delta = 5;
  void clear_delta();
  double delta() const;
  void set_delta(double value);
  private:
  double _internal_delta() const;
  void _internal_set_delta(double value);
  public:

  // double option_price = 6;
  void clear_option_price();
  double option_price() const;
  void set_option_price(double value);
  private:
  double _internal_option_price() const;
  void _internal_set_option_price(double value);
  public:

  // double pv_dividend = 7;
  void clear_pv_dividend();
  double pv_dividend() const;
  void set_pv_dividend(double value);
  private:
  double _internal_pv_dividend() const;
  void _internal_set_pv_dividend(double value);
  public:

  // double gamma = 8;
  void clear_gamma();
  double gamma() const;
  void set_gamma(double value);
  private:
  double _internal_gamma() const;
  void _internal_set_gamma(double value);
  public:

  // double vega = 9;
  void clear_vega();
  double vega() const;
  void set_vega(double value);
  private:
  double _internal_vega() const;
  void _internal_set_vega(double value);
  public:

  // double theta = 10;
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // double underlying_price = 11;
  void clear_underlying_price();
  double underlying_price() const;
  void set_underlying_price(double value);
  private:
  double _internal_underlying_price() const;
  void _internal_set_underlying_price(double value);
  public:

  // bool price_based = 3;
  void clear_price_based();
  bool price_based() const;
  void set_price_based(bool value);
  private:
  bool _internal_price_based() const;
  void _internal_set_price_based(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.OptionCalculation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  int tick_type_;
  double implied_volatility_;
  double delta_;
  double option_price_;
  double pv_dividend_;
  double gamma_;
  double vega_;
  double theta_;
  double underlying_price_;
  bool price_based_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT OptionDay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.OptionDay) */ {
 public:
  inline OptionDay() : OptionDay(nullptr) {}
  ~OptionDay() override;
  explicit constexpr OptionDay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionDay(const OptionDay& from);
  OptionDay(OptionDay&& from) noexcept
    : OptionDay() {
    *this = ::std::move(from);
  }

  inline OptionDay& operator=(const OptionDay& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionDay& operator=(OptionDay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionDay& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionDay* internal_default_instance() {
    return reinterpret_cast<const OptionDay*>(
               &_OptionDay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(OptionDay& a, OptionDay& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionDay* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionDay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionDay* New() const final {
    return new OptionDay();
  }

  OptionDay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionDay>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionDay& from);
  void MergeFrom(const OptionDay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionDay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.OptionDay";
  }
  protected:
  explicit OptionDay(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 3,
    kIsCallFieldNumber = 1,
    kExpirationDaysFieldNumber = 2,
  };
  // repeated .Jde.Markets.Proto.Results.Option values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::Jde::Markets::Proto::Results::Option* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Option >*
      mutable_values();
  private:
  const ::Jde::Markets::Proto::Results::Option& _internal_values(int index) const;
  ::Jde::Markets::Proto::Results::Option* _internal_add_values();
  public:
  const ::Jde::Markets::Proto::Results::Option& values(int index) const;
  ::Jde::Markets::Proto::Results::Option* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Option >&
      values() const;

  // bool is_call = 1;
  void clear_is_call();
  bool is_call() const;
  void set_is_call(bool value);
  private:
  bool _internal_is_call() const;
  void _internal_set_is_call(bool value);
  public:

  // uint32 expiration_days = 2;
  void clear_expiration_days();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_days() const;
  void set_expiration_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiration_days() const;
  void _internal_set_expiration_days(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.OptionDay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Option > values_;
  bool is_call_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_days_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT OptionValues final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.OptionValues) */ {
 public:
  inline OptionValues() : OptionValues(nullptr) {}
  ~OptionValues() override;
  explicit constexpr OptionValues(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionValues(const OptionValues& from);
  OptionValues(OptionValues&& from) noexcept
    : OptionValues() {
    *this = ::std::move(from);
  }

  inline OptionValues& operator=(const OptionValues& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionValues& operator=(OptionValues&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionValues& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionValues* internal_default_instance() {
    return reinterpret_cast<const OptionValues*>(
               &_OptionValues_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(OptionValues& a, OptionValues& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionValues* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionValues* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionValues* New() const final {
    return new OptionValues();
  }

  OptionValues* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionValues>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionValues& from);
  void MergeFrom(const OptionValues& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionValues* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.OptionValues";
  }
  protected:
  explicit OptionValues(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionDaysFieldNumber = 3,
    kIdFieldNumber = 1,
    kDayFieldNumber = 2,
  };
  // repeated .Jde.Markets.Proto.Results.OptionDay option_days = 3;
  int option_days_size() const;
  private:
  int _internal_option_days_size() const;
  public:
  void clear_option_days();
  ::Jde::Markets::Proto::Results::OptionDay* mutable_option_days(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::OptionDay >*
      mutable_option_days();
  private:
  const ::Jde::Markets::Proto::Results::OptionDay& _internal_option_days(int index) const;
  ::Jde::Markets::Proto::Results::OptionDay* _internal_add_option_days();
  public:
  const ::Jde::Markets::Proto::Results::OptionDay& option_days(int index) const;
  ::Jde::Markets::Proto::Results::OptionDay* add_option_days();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::OptionDay >&
      option_days() const;

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 day = 2;
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::uint32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.OptionValues)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::OptionDay > option_days_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 day_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT OrderStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.OrderStatus) */ {
 public:
  inline OrderStatus() : OrderStatus(nullptr) {}
  ~OrderStatus() override;
  explicit constexpr OrderStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderStatus(const OrderStatus& from);
  OrderStatus(OrderStatus&& from) noexcept
    : OrderStatus() {
    *this = ::std::move(from);
  }

  inline OrderStatus& operator=(const OrderStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderStatus& operator=(OrderStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderStatus* internal_default_instance() {
    return reinterpret_cast<const OrderStatus*>(
               &_OrderStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(OrderStatus& a, OrderStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderStatus* New() const final {
    return new OrderStatus();
  }

  OrderStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderStatus& from);
  void MergeFrom(const OrderStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.OrderStatus";
  }
  protected:
  explicit OrderStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhyHeldFieldNumber = 11,
    kIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
    kFilledFieldNumber = 4,
    kRemainingFieldNumber = 5,
    kStatusFieldNumber = 3,
    kPermIdFieldNumber = 7,
    kAverageFillPriceFieldNumber = 6,
    kLastFillPriceFieldNumber = 9,
    kParentIdFieldNumber = 8,
    kClientIdFieldNumber = 10,
    kMarketCapPriceFieldNumber = 12,
  };
  // string why_held = 11;
  void clear_why_held();
  const std::string& why_held() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_why_held(ArgT0&& arg0, ArgT... args);
  std::string* mutable_why_held();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_why_held();
  void set_allocated_why_held(std::string* why_held);
  private:
  const std::string& _internal_why_held() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_why_held(const std::string& value);
  std::string* _internal_mutable_why_held();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 order_id = 2;
  void clear_order_id();
  ::PROTOBUF_NAMESPACE_ID::int32 order_id() const;
  void set_order_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order_id() const;
  void _internal_set_order_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double filled = 4;
  void clear_filled();
  double filled() const;
  void set_filled(double value);
  private:
  double _internal_filled() const;
  void _internal_set_filled(double value);
  public:

  // double remaining = 5;
  void clear_remaining();
  double remaining() const;
  void set_remaining(double value);
  private:
  double _internal_remaining() const;
  void _internal_set_remaining(double value);
  public:

  // .Jde.Markets.Proto.Results.EOrderStatus status = 3;
  void clear_status();
  ::Jde::Markets::Proto::Results::EOrderStatus status() const;
  void set_status(::Jde::Markets::Proto::Results::EOrderStatus value);
  private:
  ::Jde::Markets::Proto::Results::EOrderStatus _internal_status() const;
  void _internal_set_status(::Jde::Markets::Proto::Results::EOrderStatus value);
  public:

  // int32 perm_id = 7;
  void clear_perm_id();
  ::PROTOBUF_NAMESPACE_ID::int32 perm_id() const;
  void set_perm_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_perm_id() const;
  void _internal_set_perm_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double average_fill_price = 6;
  void clear_average_fill_price();
  double average_fill_price() const;
  void set_average_fill_price(double value);
  private:
  double _internal_average_fill_price() const;
  void _internal_set_average_fill_price(double value);
  public:

  // double last_fill_price = 9;
  void clear_last_fill_price();
  double last_fill_price() const;
  void set_last_fill_price(double value);
  private:
  double _internal_last_fill_price() const;
  void _internal_set_last_fill_price(double value);
  public:

  // int32 parent_id = 8;
  void clear_parent_id();
  ::PROTOBUF_NAMESPACE_ID::int32 parent_id() const;
  void set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parent_id() const;
  void _internal_set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_id = 10;
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double market_cap_price = 12;
  void clear_market_cap_price();
  double market_cap_price() const;
  void set_market_cap_price(double value);
  private:
  double _internal_market_cap_price() const;
  void _internal_set_market_cap_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.OrderStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr why_held_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_id_;
  double filled_;
  double remaining_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 perm_id_;
  double average_fill_price_;
  double last_fill_price_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  double market_cap_price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT StringList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.StringList) */ {
 public:
  inline StringList() : StringList(nullptr) {}
  ~StringList() override;
  explicit constexpr StringList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringList(const StringList& from);
  StringList(StringList&& from) noexcept
    : StringList() {
    *this = ::std::move(from);
  }

  inline StringList& operator=(const StringList& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringList& operator=(StringList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringList& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringList* internal_default_instance() {
    return reinterpret_cast<const StringList*>(
               &_StringList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(StringList& a, StringList& b) {
    a.Swap(&b);
  }
  inline void Swap(StringList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringList* New() const final {
    return new StringList();
  }

  StringList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringList& from);
  void MergeFrom(const StringList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.StringList";
  }
  protected:
  explicit StringList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated string values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.StringList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT WatchList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.WatchList) */ {
 public:
  inline WatchList() : WatchList(nullptr) {}
  ~WatchList() override;
  explicit constexpr WatchList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchList(const WatchList& from);
  WatchList(WatchList&& from) noexcept
    : WatchList() {
    *this = ::std::move(from);
  }

  inline WatchList& operator=(const WatchList& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchList& operator=(WatchList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchList& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchList* internal_default_instance() {
    return reinterpret_cast<const WatchList*>(
               &_WatchList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(WatchList& a, WatchList& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WatchList* New() const final {
    return new WatchList();
  }

  WatchList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WatchList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WatchList& from);
  void MergeFrom(const WatchList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.WatchList";
  }
  protected:
  explicit WatchList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // .Jde.Markets.Proto.Watch.File file = 2;
  bool has_file() const;
  private:
  bool _internal_has_file() const;
  public:
  void clear_file();
  const ::Jde::Markets::Proto::Watch::File& file() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Watch::File* release_file();
  ::Jde::Markets::Proto::Watch::File* mutable_file();
  void set_allocated_file(::Jde::Markets::Proto::Watch::File* file);
  private:
  const ::Jde::Markets::Proto::Watch::File& _internal_file() const;
  ::Jde::Markets::Proto::Watch::File* _internal_mutable_file();
  public:
  void unsafe_arena_set_allocated_file(
      ::Jde::Markets::Proto::Watch::File* file);
  ::Jde::Markets::Proto::Watch::File* unsafe_arena_release_file();

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.WatchList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Jde::Markets::Proto::Watch::File* file_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Statistics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Statistics) */ {
 public:
  inline Statistics() : Statistics(nullptr) {}
  ~Statistics() override;
  explicit constexpr Statistics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Statistics(const Statistics& from);
  Statistics(Statistics&& from) noexcept
    : Statistics() {
    *this = ::std::move(from);
  }

  inline Statistics& operator=(const Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Statistics& operator=(Statistics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Statistics& default_instance() {
    return *internal_default_instance();
  }
  static inline const Statistics* internal_default_instance() {
    return reinterpret_cast<const Statistics*>(
               &_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Statistics& a, Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(Statistics* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Statistics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Statistics* New() const final {
    return new Statistics();
  }

  Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Statistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Statistics& from);
  void MergeFrom(const Statistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Statistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Statistics";
  }
  protected:
  explicit Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kAverageFieldNumber = 3,
    kVarianceFieldNumber = 4,
    kMinFieldNumber = 5,
    kMaxFieldNumber = 6,
  };
  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double average = 3;
  void clear_average();
  double average() const;
  void set_average(double value);
  private:
  double _internal_average() const;
  void _internal_set_average(double value);
  public:

  // double variance = 4;
  void clear_variance();
  double variance() const;
  void set_variance(double value);
  private:
  double _internal_variance() const;
  void _internal_set_variance(double value);
  public:

  // double min = 5;
  void clear_min();
  double min() const;
  void set_min(double value);
  private:
  double _internal_min() const;
  void _internal_set_min(double value);
  public:

  // double max = 6;
  void clear_max();
  double max() const;
  void set_max(double value);
  private:
  double _internal_max() const;
  void _internal_set_max(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Statistics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  double average_;
  double variance_;
  double min_;
  double max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Custom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Custom) */ {
 public:
  inline Custom() : Custom(nullptr) {}
  ~Custom() override;
  explicit constexpr Custom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Custom(const Custom& from);
  Custom(Custom&& from) noexcept
    : Custom() {
    *this = ::std::move(from);
  }

  inline Custom& operator=(const Custom& from) {
    CopyFrom(from);
    return *this;
  }
  inline Custom& operator=(Custom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Custom& default_instance() {
    return *internal_default_instance();
  }
  static inline const Custom* internal_default_instance() {
    return reinterpret_cast<const Custom*>(
               &_Custom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Custom& a, Custom& b) {
    a.Swap(&b);
  }
  inline void Swap(Custom* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Custom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Custom* New() const final {
    return new Custom();
  }

  Custom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Custom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Custom& from);
  void MergeFrom(const Custom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Custom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Custom";
  }
  protected:
  explicit Custom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // bytes message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Custom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT MessageUnion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.MessageUnion) */ {
 public:
  inline MessageUnion() : MessageUnion(nullptr) {}
  ~MessageUnion() override;
  explicit constexpr MessageUnion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageUnion(const MessageUnion& from);
  MessageUnion(MessageUnion&& from) noexcept
    : MessageUnion() {
    *this = ::std::move(from);
  }

  inline MessageUnion& operator=(const MessageUnion& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageUnion& operator=(MessageUnion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageUnion& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kPosition = 1,
    kContract = 2,
    kMessage = 3,
    kStringMap = 4,
    kAccountUpdate = 5,
    kAccountUpdateMulti = 6,
    kCommissionReport = 7,
    kContractDetails = 8,
    kExecution = 9,
    kPortfolioUpdate = 10,
    kTickGeneric = 11,
    kTickPrice = 12,
    kTickSize = 13,
    kTickString = 14,
    kError = 15,
    kOptions = 16,
    kHistoricalData = 17,
    kStringResult = 18,
    kFlex = 19,
    kOrderStatus = 20,
    kOpenOrder = 21,
    kOptionExchanges = 22,
    kType = 23,
    kDaySummary = 24,
    kFundamentals = 25,
    kPositionMulti = 26,
    kWatchList = 27,
    kStringList = 28,
    kNewsArticle = 29,
    kTickNews = 30,
    kHistoricalNews = 31,
    kStatistics = 32,
    kOptionCalculation = 33,
    kCustom = 34,
    kInvestors = 35,
    kFilings = 36,
    VALUE_NOT_SET = 0,
  };

  static inline const MessageUnion* internal_default_instance() {
    return reinterpret_cast<const MessageUnion*>(
               &_MessageUnion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(MessageUnion& a, MessageUnion& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageUnion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageUnion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageUnion* New() const final {
    return new MessageUnion();
  }

  MessageUnion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageUnion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageUnion& from);
  void MergeFrom(const MessageUnion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageUnion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.MessageUnion";
  }
  protected:
  explicit MessageUnion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kContractFieldNumber = 2,
    kMessageFieldNumber = 3,
    kStringMapFieldNumber = 4,
    kAccountUpdateFieldNumber = 5,
    kAccountUpdateMultiFieldNumber = 6,
    kCommissionReportFieldNumber = 7,
    kContractDetailsFieldNumber = 8,
    kExecutionFieldNumber = 9,
    kPortfolioUpdateFieldNumber = 10,
    kTickGenericFieldNumber = 11,
    kTickPriceFieldNumber = 12,
    kTickSizeFieldNumber = 13,
    kTickStringFieldNumber = 14,
    kErrorFieldNumber = 15,
    kOptionsFieldNumber = 16,
    kHistoricalDataFieldNumber = 17,
    kStringResultFieldNumber = 18,
    kFlexFieldNumber = 19,
    kOrderStatusFieldNumber = 20,
    kOpenOrderFieldNumber = 21,
    kOptionExchangesFieldNumber = 22,
    kTypeFieldNumber = 23,
    kDaySummaryFieldNumber = 24,
    kFundamentalsFieldNumber = 25,
    kPositionMultiFieldNumber = 26,
    kWatchListFieldNumber = 27,
    kStringListFieldNumber = 28,
    kNewsArticleFieldNumber = 29,
    kTickNewsFieldNumber = 30,
    kHistoricalNewsFieldNumber = 31,
    kStatisticsFieldNumber = 32,
    kOptionCalculationFieldNumber = 33,
    kCustomFieldNumber = 34,
    kInvestorsFieldNumber = 35,
    kFilingsFieldNumber = 36,
  };
  // .Jde.Markets.Proto.Results.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Jde::Markets::Proto::Results::Position& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::Position* release_position();
  ::Jde::Markets::Proto::Results::Position* mutable_position();
  void set_allocated_position(::Jde::Markets::Proto::Results::Position* position);
  private:
  const ::Jde::Markets::Proto::Results::Position& _internal_position() const;
  ::Jde::Markets::Proto::Results::Position* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Jde::Markets::Proto::Results::Position* position);
  ::Jde::Markets::Proto::Results::Position* unsafe_arena_release_position();

  // .Jde.Markets.Proto.Contract contract = 2;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::Jde::Markets::Proto::Contract* contract);
  ::Jde::Markets::Proto::Contract* unsafe_arena_release_contract();

  // .Jde.Markets.Proto.Results.MessageValue message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::Jde::Markets::Proto::Results::MessageValue& message() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::MessageValue* release_message();
  ::Jde::Markets::Proto::Results::MessageValue* mutable_message();
  void set_allocated_message(::Jde::Markets::Proto::Results::MessageValue* message);
  private:
  const ::Jde::Markets::Proto::Results::MessageValue& _internal_message() const;
  ::Jde::Markets::Proto::Results::MessageValue* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::Jde::Markets::Proto::Results::MessageValue* message);
  ::Jde::Markets::Proto::Results::MessageValue* unsafe_arena_release_message();

  // .Jde.Markets.Proto.Results.StringMap string_map = 4;
  bool has_string_map() const;
  private:
  bool _internal_has_string_map() const;
  public:
  void clear_string_map();
  const ::Jde::Markets::Proto::Results::StringMap& string_map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::StringMap* release_string_map();
  ::Jde::Markets::Proto::Results::StringMap* mutable_string_map();
  void set_allocated_string_map(::Jde::Markets::Proto::Results::StringMap* string_map);
  private:
  const ::Jde::Markets::Proto::Results::StringMap& _internal_string_map() const;
  ::Jde::Markets::Proto::Results::StringMap* _internal_mutable_string_map();
  public:
  void unsafe_arena_set_allocated_string_map(
      ::Jde::Markets::Proto::Results::StringMap* string_map);
  ::Jde::Markets::Proto::Results::StringMap* unsafe_arena_release_string_map();

  // .Jde.Markets.Proto.Results.AccountUpdate account_update = 5;
  bool has_account_update() const;
  private:
  bool _internal_has_account_update() const;
  public:
  void clear_account_update();
  const ::Jde::Markets::Proto::Results::AccountUpdate& account_update() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::AccountUpdate* release_account_update();
  ::Jde::Markets::Proto::Results::AccountUpdate* mutable_account_update();
  void set_allocated_account_update(::Jde::Markets::Proto::Results::AccountUpdate* account_update);
  private:
  const ::Jde::Markets::Proto::Results::AccountUpdate& _internal_account_update() const;
  ::Jde::Markets::Proto::Results::AccountUpdate* _internal_mutable_account_update();
  public:
  void unsafe_arena_set_allocated_account_update(
      ::Jde::Markets::Proto::Results::AccountUpdate* account_update);
  ::Jde::Markets::Proto::Results::AccountUpdate* unsafe_arena_release_account_update();

  // .Jde.Markets.Proto.Results.AccountUpdateMulti account_update_multi = 6;
  bool has_account_update_multi() const;
  private:
  bool _internal_has_account_update_multi() const;
  public:
  void clear_account_update_multi();
  const ::Jde::Markets::Proto::Results::AccountUpdateMulti& account_update_multi() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::AccountUpdateMulti* release_account_update_multi();
  ::Jde::Markets::Proto::Results::AccountUpdateMulti* mutable_account_update_multi();
  void set_allocated_account_update_multi(::Jde::Markets::Proto::Results::AccountUpdateMulti* account_update_multi);
  private:
  const ::Jde::Markets::Proto::Results::AccountUpdateMulti& _internal_account_update_multi() const;
  ::Jde::Markets::Proto::Results::AccountUpdateMulti* _internal_mutable_account_update_multi();
  public:
  void unsafe_arena_set_allocated_account_update_multi(
      ::Jde::Markets::Proto::Results::AccountUpdateMulti* account_update_multi);
  ::Jde::Markets::Proto::Results::AccountUpdateMulti* unsafe_arena_release_account_update_multi();

  // .Jde.Markets.Proto.Results.CommissionReport commission_report = 7;
  bool has_commission_report() const;
  private:
  bool _internal_has_commission_report() const;
  public:
  void clear_commission_report();
  const ::Jde::Markets::Proto::Results::CommissionReport& commission_report() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::CommissionReport* release_commission_report();
  ::Jde::Markets::Proto::Results::CommissionReport* mutable_commission_report();
  void set_allocated_commission_report(::Jde::Markets::Proto::Results::CommissionReport* commission_report);
  private:
  const ::Jde::Markets::Proto::Results::CommissionReport& _internal_commission_report() const;
  ::Jde::Markets::Proto::Results::CommissionReport* _internal_mutable_commission_report();
  public:
  void unsafe_arena_set_allocated_commission_report(
      ::Jde::Markets::Proto::Results::CommissionReport* commission_report);
  ::Jde::Markets::Proto::Results::CommissionReport* unsafe_arena_release_commission_report();

  // .Jde.Markets.Proto.Results.ContractDetailsResult contract_details = 8;
  bool has_contract_details() const;
  private:
  bool _internal_has_contract_details() const;
  public:
  void clear_contract_details();
  const ::Jde::Markets::Proto::Results::ContractDetailsResult& contract_details() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::ContractDetailsResult* release_contract_details();
  ::Jde::Markets::Proto::Results::ContractDetailsResult* mutable_contract_details();
  void set_allocated_contract_details(::Jde::Markets::Proto::Results::ContractDetailsResult* contract_details);
  private:
  const ::Jde::Markets::Proto::Results::ContractDetailsResult& _internal_contract_details() const;
  ::Jde::Markets::Proto::Results::ContractDetailsResult* _internal_mutable_contract_details();
  public:
  void unsafe_arena_set_allocated_contract_details(
      ::Jde::Markets::Proto::Results::ContractDetailsResult* contract_details);
  ::Jde::Markets::Proto::Results::ContractDetailsResult* unsafe_arena_release_contract_details();

  // .Jde.Markets.Proto.Results.Execution execution = 9;
  bool has_execution() const;
  private:
  bool _internal_has_execution() const;
  public:
  void clear_execution();
  const ::Jde::Markets::Proto::Results::Execution& execution() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::Execution* release_execution();
  ::Jde::Markets::Proto::Results::Execution* mutable_execution();
  void set_allocated_execution(::Jde::Markets::Proto::Results::Execution* execution);
  private:
  const ::Jde::Markets::Proto::Results::Execution& _internal_execution() const;
  ::Jde::Markets::Proto::Results::Execution* _internal_mutable_execution();
  public:
  void unsafe_arena_set_allocated_execution(
      ::Jde::Markets::Proto::Results::Execution* execution);
  ::Jde::Markets::Proto::Results::Execution* unsafe_arena_release_execution();

  // .Jde.Markets.Proto.Results.PortfolioUpdate portfolio_update = 10;
  bool has_portfolio_update() const;
  private:
  bool _internal_has_portfolio_update() const;
  public:
  void clear_portfolio_update();
  const ::Jde::Markets::Proto::Results::PortfolioUpdate& portfolio_update() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::PortfolioUpdate* release_portfolio_update();
  ::Jde::Markets::Proto::Results::PortfolioUpdate* mutable_portfolio_update();
  void set_allocated_portfolio_update(::Jde::Markets::Proto::Results::PortfolioUpdate* portfolio_update);
  private:
  const ::Jde::Markets::Proto::Results::PortfolioUpdate& _internal_portfolio_update() const;
  ::Jde::Markets::Proto::Results::PortfolioUpdate* _internal_mutable_portfolio_update();
  public:
  void unsafe_arena_set_allocated_portfolio_update(
      ::Jde::Markets::Proto::Results::PortfolioUpdate* portfolio_update);
  ::Jde::Markets::Proto::Results::PortfolioUpdate* unsafe_arena_release_portfolio_update();

  // .Jde.Markets.Proto.Results.TickGeneric tick_generic = 11;
  bool has_tick_generic() const;
  private:
  bool _internal_has_tick_generic() const;
  public:
  void clear_tick_generic();
  const ::Jde::Markets::Proto::Results::TickGeneric& tick_generic() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::TickGeneric* release_tick_generic();
  ::Jde::Markets::Proto::Results::TickGeneric* mutable_tick_generic();
  void set_allocated_tick_generic(::Jde::Markets::Proto::Results::TickGeneric* tick_generic);
  private:
  const ::Jde::Markets::Proto::Results::TickGeneric& _internal_tick_generic() const;
  ::Jde::Markets::Proto::Results::TickGeneric* _internal_mutable_tick_generic();
  public:
  void unsafe_arena_set_allocated_tick_generic(
      ::Jde::Markets::Proto::Results::TickGeneric* tick_generic);
  ::Jde::Markets::Proto::Results::TickGeneric* unsafe_arena_release_tick_generic();

  // .Jde.Markets.Proto.Results.TickPrice tick_price = 12;
  bool has_tick_price() const;
  private:
  bool _internal_has_tick_price() const;
  public:
  void clear_tick_price();
  const ::Jde::Markets::Proto::Results::TickPrice& tick_price() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::TickPrice* release_tick_price();
  ::Jde::Markets::Proto::Results::TickPrice* mutable_tick_price();
  void set_allocated_tick_price(::Jde::Markets::Proto::Results::TickPrice* tick_price);
  private:
  const ::Jde::Markets::Proto::Results::TickPrice& _internal_tick_price() const;
  ::Jde::Markets::Proto::Results::TickPrice* _internal_mutable_tick_price();
  public:
  void unsafe_arena_set_allocated_tick_price(
      ::Jde::Markets::Proto::Results::TickPrice* tick_price);
  ::Jde::Markets::Proto::Results::TickPrice* unsafe_arena_release_tick_price();

  // .Jde.Markets.Proto.Results.TickSize tick_size = 13;
  bool has_tick_size() const;
  private:
  bool _internal_has_tick_size() const;
  public:
  void clear_tick_size();
  const ::Jde::Markets::Proto::Results::TickSize& tick_size() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::TickSize* release_tick_size();
  ::Jde::Markets::Proto::Results::TickSize* mutable_tick_size();
  void set_allocated_tick_size(::Jde::Markets::Proto::Results::TickSize* tick_size);
  private:
  const ::Jde::Markets::Proto::Results::TickSize& _internal_tick_size() const;
  ::Jde::Markets::Proto::Results::TickSize* _internal_mutable_tick_size();
  public:
  void unsafe_arena_set_allocated_tick_size(
      ::Jde::Markets::Proto::Results::TickSize* tick_size);
  ::Jde::Markets::Proto::Results::TickSize* unsafe_arena_release_tick_size();

  // .Jde.Markets.Proto.Results.TickString tick_string = 14;
  bool has_tick_string() const;
  private:
  bool _internal_has_tick_string() const;
  public:
  void clear_tick_string();
  const ::Jde::Markets::Proto::Results::TickString& tick_string() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::TickString* release_tick_string();
  ::Jde::Markets::Proto::Results::TickString* mutable_tick_string();
  void set_allocated_tick_string(::Jde::Markets::Proto::Results::TickString* tick_string);
  private:
  const ::Jde::Markets::Proto::Results::TickString& _internal_tick_string() const;
  ::Jde::Markets::Proto::Results::TickString* _internal_mutable_tick_string();
  public:
  void unsafe_arena_set_allocated_tick_string(
      ::Jde::Markets::Proto::Results::TickString* tick_string);
  ::Jde::Markets::Proto::Results::TickString* unsafe_arena_release_tick_string();

  // .Jde.Markets.Proto.Results.Error error = 15;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::Jde::Markets::Proto::Results::Error& error() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::Error* release_error();
  ::Jde::Markets::Proto::Results::Error* mutable_error();
  void set_allocated_error(::Jde::Markets::Proto::Results::Error* error);
  private:
  const ::Jde::Markets::Proto::Results::Error& _internal_error() const;
  ::Jde::Markets::Proto::Results::Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::Jde::Markets::Proto::Results::Error* error);
  ::Jde::Markets::Proto::Results::Error* unsafe_arena_release_error();

  // .Jde.Markets.Proto.Results.OptionValues options = 16;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::Jde::Markets::Proto::Results::OptionValues& options() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::OptionValues* release_options();
  ::Jde::Markets::Proto::Results::OptionValues* mutable_options();
  void set_allocated_options(::Jde::Markets::Proto::Results::OptionValues* options);
  private:
  const ::Jde::Markets::Proto::Results::OptionValues& _internal_options() const;
  ::Jde::Markets::Proto::Results::OptionValues* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::Jde::Markets::Proto::Results::OptionValues* options);
  ::Jde::Markets::Proto::Results::OptionValues* unsafe_arena_release_options();

  // .Jde.Markets.Proto.Results.HistoricalData historical_data = 17;
  bool has_historical_data() const;
  private:
  bool _internal_has_historical_data() const;
  public:
  void clear_historical_data();
  const ::Jde::Markets::Proto::Results::HistoricalData& historical_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::HistoricalData* release_historical_data();
  ::Jde::Markets::Proto::Results::HistoricalData* mutable_historical_data();
  void set_allocated_historical_data(::Jde::Markets::Proto::Results::HistoricalData* historical_data);
  private:
  const ::Jde::Markets::Proto::Results::HistoricalData& _internal_historical_data() const;
  ::Jde::Markets::Proto::Results::HistoricalData* _internal_mutable_historical_data();
  public:
  void unsafe_arena_set_allocated_historical_data(
      ::Jde::Markets::Proto::Results::HistoricalData* historical_data);
  ::Jde::Markets::Proto::Results::HistoricalData* unsafe_arena_release_historical_data();

  // .Jde.Markets.Proto.Results.StringResult string_result = 18;
  bool has_string_result() const;
  private:
  bool _internal_has_string_result() const;
  public:
  void clear_string_result();
  const ::Jde::Markets::Proto::Results::StringResult& string_result() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::StringResult* release_string_result();
  ::Jde::Markets::Proto::Results::StringResult* mutable_string_result();
  void set_allocated_string_result(::Jde::Markets::Proto::Results::StringResult* string_result);
  private:
  const ::Jde::Markets::Proto::Results::StringResult& _internal_string_result() const;
  ::Jde::Markets::Proto::Results::StringResult* _internal_mutable_string_result();
  public:
  void unsafe_arena_set_allocated_string_result(
      ::Jde::Markets::Proto::Results::StringResult* string_result);
  ::Jde::Markets::Proto::Results::StringResult* unsafe_arena_release_string_result();

  // .Jde.Markets.Proto.Results.Flex flex = 19;
  bool has_flex() const;
  private:
  bool _internal_has_flex() const;
  public:
  void clear_flex();
  const ::Jde::Markets::Proto::Results::Flex& flex() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::Flex* release_flex();
  ::Jde::Markets::Proto::Results::Flex* mutable_flex();
  void set_allocated_flex(::Jde::Markets::Proto::Results::Flex* flex);
  private:
  const ::Jde::Markets::Proto::Results::Flex& _internal_flex() const;
  ::Jde::Markets::Proto::Results::Flex* _internal_mutable_flex();
  public:
  void unsafe_arena_set_allocated_flex(
      ::Jde::Markets::Proto::Results::Flex* flex);
  ::Jde::Markets::Proto::Results::Flex* unsafe_arena_release_flex();

  // .Jde.Markets.Proto.Results.OrderStatus order_status = 20;
  bool has_order_status() const;
  private:
  bool _internal_has_order_status() const;
  public:
  void clear_order_status();
  const ::Jde::Markets::Proto::Results::OrderStatus& order_status() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::OrderStatus* release_order_status();
  ::Jde::Markets::Proto::Results::OrderStatus* mutable_order_status();
  void set_allocated_order_status(::Jde::Markets::Proto::Results::OrderStatus* order_status);
  private:
  const ::Jde::Markets::Proto::Results::OrderStatus& _internal_order_status() const;
  ::Jde::Markets::Proto::Results::OrderStatus* _internal_mutable_order_status();
  public:
  void unsafe_arena_set_allocated_order_status(
      ::Jde::Markets::Proto::Results::OrderStatus* order_status);
  ::Jde::Markets::Proto::Results::OrderStatus* unsafe_arena_release_order_status();

  // .Jde.Markets.Proto.Results.OpenOrder open_order = 21;
  bool has_open_order() const;
  private:
  bool _internal_has_open_order() const;
  public:
  void clear_open_order();
  const ::Jde::Markets::Proto::Results::OpenOrder& open_order() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::OpenOrder* release_open_order();
  ::Jde::Markets::Proto::Results::OpenOrder* mutable_open_order();
  void set_allocated_open_order(::Jde::Markets::Proto::Results::OpenOrder* open_order);
  private:
  const ::Jde::Markets::Proto::Results::OpenOrder& _internal_open_order() const;
  ::Jde::Markets::Proto::Results::OpenOrder* _internal_mutable_open_order();
  public:
  void unsafe_arena_set_allocated_open_order(
      ::Jde::Markets::Proto::Results::OpenOrder* open_order);
  ::Jde::Markets::Proto::Results::OpenOrder* unsafe_arena_release_open_order();

  // .Jde.Markets.Proto.Results.OptionExchanges option_exchanges = 22;
  bool has_option_exchanges() const;
  private:
  bool _internal_has_option_exchanges() const;
  public:
  void clear_option_exchanges();
  const ::Jde::Markets::Proto::Results::OptionExchanges& option_exchanges() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::OptionExchanges* release_option_exchanges();
  ::Jde::Markets::Proto::Results::OptionExchanges* mutable_option_exchanges();
  void set_allocated_option_exchanges(::Jde::Markets::Proto::Results::OptionExchanges* option_exchanges);
  private:
  const ::Jde::Markets::Proto::Results::OptionExchanges& _internal_option_exchanges() const;
  ::Jde::Markets::Proto::Results::OptionExchanges* _internal_mutable_option_exchanges();
  public:
  void unsafe_arena_set_allocated_option_exchanges(
      ::Jde::Markets::Proto::Results::OptionExchanges* option_exchanges);
  ::Jde::Markets::Proto::Results::OptionExchanges* unsafe_arena_release_option_exchanges();

  // .Jde.Markets.Proto.Results.EResults type = 23;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Jde::Markets::Proto::Results::EResults type() const;
  void set_type(::Jde::Markets::Proto::Results::EResults value);
  private:
  ::Jde::Markets::Proto::Results::EResults _internal_type() const;
  void _internal_set_type(::Jde::Markets::Proto::Results::EResults value);
  public:

  // .Jde.Markets.Proto.Results.DaySummary day_summary = 24;
  bool has_day_summary() const;
  private:
  bool _internal_has_day_summary() const;
  public:
  void clear_day_summary();
  const ::Jde::Markets::Proto::Results::DaySummary& day_summary() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::DaySummary* release_day_summary();
  ::Jde::Markets::Proto::Results::DaySummary* mutable_day_summary();
  void set_allocated_day_summary(::Jde::Markets::Proto::Results::DaySummary* day_summary);
  private:
  const ::Jde::Markets::Proto::Results::DaySummary& _internal_day_summary() const;
  ::Jde::Markets::Proto::Results::DaySummary* _internal_mutable_day_summary();
  public:
  void unsafe_arena_set_allocated_day_summary(
      ::Jde::Markets::Proto::Results::DaySummary* day_summary);
  ::Jde::Markets::Proto::Results::DaySummary* unsafe_arena_release_day_summary();

  // .Jde.Markets.Proto.Results.Fundamentals fundamentals = 25;
  bool has_fundamentals() const;
  private:
  bool _internal_has_fundamentals() const;
  public:
  void clear_fundamentals();
  const ::Jde::Markets::Proto::Results::Fundamentals& fundamentals() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::Fundamentals* release_fundamentals();
  ::Jde::Markets::Proto::Results::Fundamentals* mutable_fundamentals();
  void set_allocated_fundamentals(::Jde::Markets::Proto::Results::Fundamentals* fundamentals);
  private:
  const ::Jde::Markets::Proto::Results::Fundamentals& _internal_fundamentals() const;
  ::Jde::Markets::Proto::Results::Fundamentals* _internal_mutable_fundamentals();
  public:
  void unsafe_arena_set_allocated_fundamentals(
      ::Jde::Markets::Proto::Results::Fundamentals* fundamentals);
  ::Jde::Markets::Proto::Results::Fundamentals* unsafe_arena_release_fundamentals();

  // .Jde.Markets.Proto.Results.PositionMulti position_multi = 26;
  bool has_position_multi() const;
  private:
  bool _internal_has_position_multi() const;
  public:
  void clear_position_multi();
  const ::Jde::Markets::Proto::Results::PositionMulti& position_multi() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::PositionMulti* release_position_multi();
  ::Jde::Markets::Proto::Results::PositionMulti* mutable_position_multi();
  void set_allocated_position_multi(::Jde::Markets::Proto::Results::PositionMulti* position_multi);
  private:
  const ::Jde::Markets::Proto::Results::PositionMulti& _internal_position_multi() const;
  ::Jde::Markets::Proto::Results::PositionMulti* _internal_mutable_position_multi();
  public:
  void unsafe_arena_set_allocated_position_multi(
      ::Jde::Markets::Proto::Results::PositionMulti* position_multi);
  ::Jde::Markets::Proto::Results::PositionMulti* unsafe_arena_release_position_multi();

  // .Jde.Markets.Proto.Results.WatchList watch_list = 27;
  bool has_watch_list() const;
  private:
  bool _internal_has_watch_list() const;
  public:
  void clear_watch_list();
  const ::Jde::Markets::Proto::Results::WatchList& watch_list() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::WatchList* release_watch_list();
  ::Jde::Markets::Proto::Results::WatchList* mutable_watch_list();
  void set_allocated_watch_list(::Jde::Markets::Proto::Results::WatchList* watch_list);
  private:
  const ::Jde::Markets::Proto::Results::WatchList& _internal_watch_list() const;
  ::Jde::Markets::Proto::Results::WatchList* _internal_mutable_watch_list();
  public:
  void unsafe_arena_set_allocated_watch_list(
      ::Jde::Markets::Proto::Results::WatchList* watch_list);
  ::Jde::Markets::Proto::Results::WatchList* unsafe_arena_release_watch_list();

  // .Jde.Markets.Proto.Results.StringList string_list = 28;
  bool has_string_list() const;
  private:
  bool _internal_has_string_list() const;
  public:
  void clear_string_list();
  const ::Jde::Markets::Proto::Results::StringList& string_list() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::StringList* release_string_list();
  ::Jde::Markets::Proto::Results::StringList* mutable_string_list();
  void set_allocated_string_list(::Jde::Markets::Proto::Results::StringList* string_list);
  private:
  const ::Jde::Markets::Proto::Results::StringList& _internal_string_list() const;
  ::Jde::Markets::Proto::Results::StringList* _internal_mutable_string_list();
  public:
  void unsafe_arena_set_allocated_string_list(
      ::Jde::Markets::Proto::Results::StringList* string_list);
  ::Jde::Markets::Proto::Results::StringList* unsafe_arena_release_string_list();

  // .Jde.Markets.Proto.Results.NewsArticle news_article = 29;
  bool has_news_article() const;
  private:
  bool _internal_has_news_article() const;
  public:
  void clear_news_article();
  const ::Jde::Markets::Proto::Results::NewsArticle& news_article() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::NewsArticle* release_news_article();
  ::Jde::Markets::Proto::Results::NewsArticle* mutable_news_article();
  void set_allocated_news_article(::Jde::Markets::Proto::Results::NewsArticle* news_article);
  private:
  const ::Jde::Markets::Proto::Results::NewsArticle& _internal_news_article() const;
  ::Jde::Markets::Proto::Results::NewsArticle* _internal_mutable_news_article();
  public:
  void unsafe_arena_set_allocated_news_article(
      ::Jde::Markets::Proto::Results::NewsArticle* news_article);
  ::Jde::Markets::Proto::Results::NewsArticle* unsafe_arena_release_news_article();

  // .Jde.Markets.Proto.Results.TickNews tick_news = 30;
  bool has_tick_news() const;
  private:
  bool _internal_has_tick_news() const;
  public:
  void clear_tick_news();
  const ::Jde::Markets::Proto::Results::TickNews& tick_news() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::TickNews* release_tick_news();
  ::Jde::Markets::Proto::Results::TickNews* mutable_tick_news();
  void set_allocated_tick_news(::Jde::Markets::Proto::Results::TickNews* tick_news);
  private:
  const ::Jde::Markets::Proto::Results::TickNews& _internal_tick_news() const;
  ::Jde::Markets::Proto::Results::TickNews* _internal_mutable_tick_news();
  public:
  void unsafe_arena_set_allocated_tick_news(
      ::Jde::Markets::Proto::Results::TickNews* tick_news);
  ::Jde::Markets::Proto::Results::TickNews* unsafe_arena_release_tick_news();

  // .Jde.Markets.Proto.Results.HistoricalNewsCollection historical_news = 31;
  bool has_historical_news() const;
  private:
  bool _internal_has_historical_news() const;
  public:
  void clear_historical_news();
  const ::Jde::Markets::Proto::Results::HistoricalNewsCollection& historical_news() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::HistoricalNewsCollection* release_historical_news();
  ::Jde::Markets::Proto::Results::HistoricalNewsCollection* mutable_historical_news();
  void set_allocated_historical_news(::Jde::Markets::Proto::Results::HistoricalNewsCollection* historical_news);
  private:
  const ::Jde::Markets::Proto::Results::HistoricalNewsCollection& _internal_historical_news() const;
  ::Jde::Markets::Proto::Results::HistoricalNewsCollection* _internal_mutable_historical_news();
  public:
  void unsafe_arena_set_allocated_historical_news(
      ::Jde::Markets::Proto::Results::HistoricalNewsCollection* historical_news);
  ::Jde::Markets::Proto::Results::HistoricalNewsCollection* unsafe_arena_release_historical_news();

  // .Jde.Markets.Proto.Results.Statistics statistics = 32;
  bool has_statistics() const;
  private:
  bool _internal_has_statistics() const;
  public:
  void clear_statistics();
  const ::Jde::Markets::Proto::Results::Statistics& statistics() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::Statistics* release_statistics();
  ::Jde::Markets::Proto::Results::Statistics* mutable_statistics();
  void set_allocated_statistics(::Jde::Markets::Proto::Results::Statistics* statistics);
  private:
  const ::Jde::Markets::Proto::Results::Statistics& _internal_statistics() const;
  ::Jde::Markets::Proto::Results::Statistics* _internal_mutable_statistics();
  public:
  void unsafe_arena_set_allocated_statistics(
      ::Jde::Markets::Proto::Results::Statistics* statistics);
  ::Jde::Markets::Proto::Results::Statistics* unsafe_arena_release_statistics();

  // .Jde.Markets.Proto.Results.OptionCalculation option_calculation = 33;
  bool has_option_calculation() const;
  private:
  bool _internal_has_option_calculation() const;
  public:
  void clear_option_calculation();
  const ::Jde::Markets::Proto::Results::OptionCalculation& option_calculation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::OptionCalculation* release_option_calculation();
  ::Jde::Markets::Proto::Results::OptionCalculation* mutable_option_calculation();
  void set_allocated_option_calculation(::Jde::Markets::Proto::Results::OptionCalculation* option_calculation);
  private:
  const ::Jde::Markets::Proto::Results::OptionCalculation& _internal_option_calculation() const;
  ::Jde::Markets::Proto::Results::OptionCalculation* _internal_mutable_option_calculation();
  public:
  void unsafe_arena_set_allocated_option_calculation(
      ::Jde::Markets::Proto::Results::OptionCalculation* option_calculation);
  ::Jde::Markets::Proto::Results::OptionCalculation* unsafe_arena_release_option_calculation();

  // .Jde.Markets.Proto.Results.Custom custom = 34;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::Jde::Markets::Proto::Results::Custom& custom() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::Custom* release_custom();
  ::Jde::Markets::Proto::Results::Custom* mutable_custom();
  void set_allocated_custom(::Jde::Markets::Proto::Results::Custom* custom);
  private:
  const ::Jde::Markets::Proto::Results::Custom& _internal_custom() const;
  ::Jde::Markets::Proto::Results::Custom* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::Jde::Markets::Proto::Results::Custom* custom);
  ::Jde::Markets::Proto::Results::Custom* unsafe_arena_release_custom();

  // .Jde.Markets.Edgar.Proto.Investors investors = 35;
  bool has_investors() const;
  private:
  bool _internal_has_investors() const;
  public:
  void clear_investors();
  const ::Jde::Markets::Edgar::Proto::Investors& investors() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Edgar::Proto::Investors* release_investors();
  ::Jde::Markets::Edgar::Proto::Investors* mutable_investors();
  void set_allocated_investors(::Jde::Markets::Edgar::Proto::Investors* investors);
  private:
  const ::Jde::Markets::Edgar::Proto::Investors& _internal_investors() const;
  ::Jde::Markets::Edgar::Proto::Investors* _internal_mutable_investors();
  public:
  void unsafe_arena_set_allocated_investors(
      ::Jde::Markets::Edgar::Proto::Investors* investors);
  ::Jde::Markets::Edgar::Proto::Investors* unsafe_arena_release_investors();

  // .Jde.Markets.Edgar.Proto.Filings filings = 36;
  bool has_filings() const;
  private:
  bool _internal_has_filings() const;
  public:
  void clear_filings();
  const ::Jde::Markets::Edgar::Proto::Filings& filings() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Edgar::Proto::Filings* release_filings();
  ::Jde::Markets::Edgar::Proto::Filings* mutable_filings();
  void set_allocated_filings(::Jde::Markets::Edgar::Proto::Filings* filings);
  private:
  const ::Jde::Markets::Edgar::Proto::Filings& _internal_filings() const;
  ::Jde::Markets::Edgar::Proto::Filings* _internal_mutable_filings();
  public:
  void unsafe_arena_set_allocated_filings(
      ::Jde::Markets::Edgar::Proto::Filings* filings);
  ::Jde::Markets::Edgar::Proto::Filings* unsafe_arena_release_filings();

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.MessageUnion)
 private:
  class _Internal;
  void set_has_position();
  void set_has_contract();
  void set_has_message();
  void set_has_string_map();
  void set_has_account_update();
  void set_has_account_update_multi();
  void set_has_commission_report();
  void set_has_contract_details();
  void set_has_execution();
  void set_has_portfolio_update();
  void set_has_tick_generic();
  void set_has_tick_price();
  void set_has_tick_size();
  void set_has_tick_string();
  void set_has_error();
  void set_has_options();
  void set_has_historical_data();
  void set_has_string_result();
  void set_has_flex();
  void set_has_order_status();
  void set_has_open_order();
  void set_has_option_exchanges();
  void set_has_type();
  void set_has_day_summary();
  void set_has_fundamentals();
  void set_has_position_multi();
  void set_has_watch_list();
  void set_has_string_list();
  void set_has_news_article();
  void set_has_tick_news();
  void set_has_historical_news();
  void set_has_statistics();
  void set_has_option_calculation();
  void set_has_custom();
  void set_has_investors();
  void set_has_filings();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::Jde::Markets::Proto::Results::Position* position_;
    ::Jde::Markets::Proto::Contract* contract_;
    ::Jde::Markets::Proto::Results::MessageValue* message_;
    ::Jde::Markets::Proto::Results::StringMap* string_map_;
    ::Jde::Markets::Proto::Results::AccountUpdate* account_update_;
    ::Jde::Markets::Proto::Results::AccountUpdateMulti* account_update_multi_;
    ::Jde::Markets::Proto::Results::CommissionReport* commission_report_;
    ::Jde::Markets::Proto::Results::ContractDetailsResult* contract_details_;
    ::Jde::Markets::Proto::Results::Execution* execution_;
    ::Jde::Markets::Proto::Results::PortfolioUpdate* portfolio_update_;
    ::Jde::Markets::Proto::Results::TickGeneric* tick_generic_;
    ::Jde::Markets::Proto::Results::TickPrice* tick_price_;
    ::Jde::Markets::Proto::Results::TickSize* tick_size_;
    ::Jde::Markets::Proto::Results::TickString* tick_string_;
    ::Jde::Markets::Proto::Results::Error* error_;
    ::Jde::Markets::Proto::Results::OptionValues* options_;
    ::Jde::Markets::Proto::Results::HistoricalData* historical_data_;
    ::Jde::Markets::Proto::Results::StringResult* string_result_;
    ::Jde::Markets::Proto::Results::Flex* flex_;
    ::Jde::Markets::Proto::Results::OrderStatus* order_status_;
    ::Jde::Markets::Proto::Results::OpenOrder* open_order_;
    ::Jde::Markets::Proto::Results::OptionExchanges* option_exchanges_;
    int type_;
    ::Jde::Markets::Proto::Results::DaySummary* day_summary_;
    ::Jde::Markets::Proto::Results::Fundamentals* fundamentals_;
    ::Jde::Markets::Proto::Results::PositionMulti* position_multi_;
    ::Jde::Markets::Proto::Results::WatchList* watch_list_;
    ::Jde::Markets::Proto::Results::StringList* string_list_;
    ::Jde::Markets::Proto::Results::NewsArticle* news_article_;
    ::Jde::Markets::Proto::Results::TickNews* tick_news_;
    ::Jde::Markets::Proto::Results::HistoricalNewsCollection* historical_news_;
    ::Jde::Markets::Proto::Results::Statistics* statistics_;
    ::Jde::Markets::Proto::Results::OptionCalculation* option_calculation_;
    ::Jde::Markets::Proto::Results::Custom* custom_;
    ::Jde::Markets::Edgar::Proto::Investors* investors_;
    ::Jde::Markets::Edgar::Proto::Filings* filings_;
  } Value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Transmission final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.Transmission) */ {
 public:
  inline Transmission() : Transmission(nullptr) {}
  ~Transmission() override;
  explicit constexpr Transmission(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transmission(const Transmission& from);
  Transmission(Transmission&& from) noexcept
    : Transmission() {
    *this = ::std::move(from);
  }

  inline Transmission& operator=(const Transmission& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transmission& operator=(Transmission&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transmission& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transmission* internal_default_instance() {
    return reinterpret_cast<const Transmission*>(
               &_Transmission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Transmission& a, Transmission& b) {
    a.Swap(&b);
  }
  inline void Swap(Transmission* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transmission* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transmission* New() const final {
    return new Transmission();
  }

  Transmission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transmission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transmission& from);
  void MergeFrom(const Transmission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transmission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.Transmission";
  }
  protected:
  explicit Transmission(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .Jde.Markets.Proto.Results.MessageUnion messages = 1;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::Jde::Markets::Proto::Results::MessageUnion* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::MessageUnion >*
      mutable_messages();
  private:
  const ::Jde::Markets::Proto::Results::MessageUnion& _internal_messages(int index) const;
  ::Jde::Markets::Proto::Results::MessageUnion* _internal_add_messages();
  public:
  const ::Jde::Markets::Proto::Results::MessageUnion& messages(int index) const;
  ::Jde::Markets::Proto::Results::MessageUnion* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::MessageUnion >&
      messages() const;

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.Transmission)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::MessageUnion > messages_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TickGeneric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TickGeneric) */ {
 public:
  inline TickGeneric() : TickGeneric(nullptr) {}
  ~TickGeneric() override;
  explicit constexpr TickGeneric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TickGeneric(const TickGeneric& from);
  TickGeneric(TickGeneric&& from) noexcept
    : TickGeneric() {
    *this = ::std::move(from);
  }

  inline TickGeneric& operator=(const TickGeneric& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickGeneric& operator=(TickGeneric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TickGeneric& default_instance() {
    return *internal_default_instance();
  }
  static inline const TickGeneric* internal_default_instance() {
    return reinterpret_cast<const TickGeneric*>(
               &_TickGeneric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(TickGeneric& a, TickGeneric& b) {
    a.Swap(&b);
  }
  inline void Swap(TickGeneric* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickGeneric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickGeneric* New() const final {
    return new TickGeneric();
  }

  TickGeneric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickGeneric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickGeneric& from);
  void MergeFrom(const TickGeneric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickGeneric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TickGeneric";
  }
  protected:
  explicit TickGeneric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kTickTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Jde.Markets.Proto.Results.ETickType tick_type = 2;
  void clear_tick_type();
  ::Jde::Markets::Proto::Results::ETickType tick_type() const;
  void set_tick_type(::Jde::Markets::Proto::Results::ETickType value);
  private:
  ::Jde::Markets::Proto::Results::ETickType _internal_tick_type() const;
  void _internal_set_tick_type(::Jde::Markets::Proto::Results::ETickType value);
  public:

  // double value = 3;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TickGeneric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  int tick_type_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TickAttrib final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TickAttrib) */ {
 public:
  inline TickAttrib() : TickAttrib(nullptr) {}
  ~TickAttrib() override;
  explicit constexpr TickAttrib(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TickAttrib(const TickAttrib& from);
  TickAttrib(TickAttrib&& from) noexcept
    : TickAttrib() {
    *this = ::std::move(from);
  }

  inline TickAttrib& operator=(const TickAttrib& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickAttrib& operator=(TickAttrib&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TickAttrib& default_instance() {
    return *internal_default_instance();
  }
  static inline const TickAttrib* internal_default_instance() {
    return reinterpret_cast<const TickAttrib*>(
               &_TickAttrib_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(TickAttrib& a, TickAttrib& b) {
    a.Swap(&b);
  }
  inline void Swap(TickAttrib* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickAttrib* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickAttrib* New() const final {
    return new TickAttrib();
  }

  TickAttrib* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickAttrib>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickAttrib& from);
  void MergeFrom(const TickAttrib& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickAttrib* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TickAttrib";
  }
  protected:
  explicit TickAttrib(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanAutoExecuteFieldNumber = 1,
    kPastLimitFieldNumber = 2,
    kPreOpenFieldNumber = 3,
  };
  // bool can_auto_execute = 1;
  void clear_can_auto_execute();
  bool can_auto_execute() const;
  void set_can_auto_execute(bool value);
  private:
  bool _internal_can_auto_execute() const;
  void _internal_set_can_auto_execute(bool value);
  public:

  // bool past_limit = 2;
  void clear_past_limit();
  bool past_limit() const;
  void set_past_limit(bool value);
  private:
  bool _internal_past_limit() const;
  void _internal_set_past_limit(bool value);
  public:

  // bool pre_open = 3;
  void clear_pre_open();
  bool pre_open() const;
  void set_pre_open(bool value);
  private:
  bool _internal_pre_open() const;
  void _internal_set_pre_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TickAttrib)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool can_auto_execute_;
  bool past_limit_;
  bool pre_open_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TickPrice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TickPrice) */ {
 public:
  inline TickPrice() : TickPrice(nullptr) {}
  ~TickPrice() override;
  explicit constexpr TickPrice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TickPrice(const TickPrice& from);
  TickPrice(TickPrice&& from) noexcept
    : TickPrice() {
    *this = ::std::move(from);
  }

  inline TickPrice& operator=(const TickPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickPrice& operator=(TickPrice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TickPrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const TickPrice* internal_default_instance() {
    return reinterpret_cast<const TickPrice*>(
               &_TickPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(TickPrice& a, TickPrice& b) {
    a.Swap(&b);
  }
  inline void Swap(TickPrice* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickPrice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickPrice* New() const final {
    return new TickPrice();
  }

  TickPrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickPrice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickPrice& from);
  void MergeFrom(const TickPrice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickPrice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TickPrice";
  }
  protected:
  explicit TickPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributesFieldNumber = 4,
    kRequestIdFieldNumber = 1,
    kTickTypeFieldNumber = 2,
    kPriceFieldNumber = 3,
  };
  // .Jde.Markets.Proto.Results.TickAttrib attributes = 4;
  bool has_attributes() const;
  private:
  bool _internal_has_attributes() const;
  public:
  void clear_attributes();
  const ::Jde::Markets::Proto::Results::TickAttrib& attributes() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::TickAttrib* release_attributes();
  ::Jde::Markets::Proto::Results::TickAttrib* mutable_attributes();
  void set_allocated_attributes(::Jde::Markets::Proto::Results::TickAttrib* attributes);
  private:
  const ::Jde::Markets::Proto::Results::TickAttrib& _internal_attributes() const;
  ::Jde::Markets::Proto::Results::TickAttrib* _internal_mutable_attributes();
  public:
  void unsafe_arena_set_allocated_attributes(
      ::Jde::Markets::Proto::Results::TickAttrib* attributes);
  ::Jde::Markets::Proto::Results::TickAttrib* unsafe_arena_release_attributes();

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Jde.Markets.Proto.Results.ETickType tick_type = 2;
  void clear_tick_type();
  ::Jde::Markets::Proto::Results::ETickType tick_type() const;
  void set_tick_type(::Jde::Markets::Proto::Results::ETickType value);
  private:
  ::Jde::Markets::Proto::Results::ETickType _internal_tick_type() const;
  void _internal_set_tick_type(::Jde::Markets::Proto::Results::ETickType value);
  public:

  // double price = 3;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TickPrice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Jde::Markets::Proto::Results::TickAttrib* attributes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  int tick_type_;
  double price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TickSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TickSize) */ {
 public:
  inline TickSize() : TickSize(nullptr) {}
  ~TickSize() override;
  explicit constexpr TickSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TickSize(const TickSize& from);
  TickSize(TickSize&& from) noexcept
    : TickSize() {
    *this = ::std::move(from);
  }

  inline TickSize& operator=(const TickSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickSize& operator=(TickSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TickSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const TickSize* internal_default_instance() {
    return reinterpret_cast<const TickSize*>(
               &_TickSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(TickSize& a, TickSize& b) {
    a.Swap(&b);
  }
  inline void Swap(TickSize* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickSize* New() const final {
    return new TickSize();
  }

  TickSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickSize& from);
  void MergeFrom(const TickSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TickSize";
  }
  protected:
  explicit TickSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kTickTypeFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Jde.Markets.Proto.Results.ETickType tick_type = 2;
  void clear_tick_type();
  ::Jde::Markets::Proto::Results::ETickType tick_type() const;
  void set_tick_type(::Jde::Markets::Proto::Results::ETickType value);
  private:
  ::Jde::Markets::Proto::Results::ETickType _internal_tick_type() const;
  void _internal_set_tick_type(::Jde::Markets::Proto::Results::ETickType value);
  public:

  // int32 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TickSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  int tick_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT TickString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.TickString) */ {
 public:
  inline TickString() : TickString(nullptr) {}
  ~TickString() override;
  explicit constexpr TickString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TickString(const TickString& from);
  TickString(TickString&& from) noexcept
    : TickString() {
    *this = ::std::move(from);
  }

  inline TickString& operator=(const TickString& from) {
    CopyFrom(from);
    return *this;
  }
  inline TickString& operator=(TickString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TickString& default_instance() {
    return *internal_default_instance();
  }
  static inline const TickString* internal_default_instance() {
    return reinterpret_cast<const TickString*>(
               &_TickString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TickString& a, TickString& b) {
    a.Swap(&b);
  }
  inline void Swap(TickString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TickString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TickString* New() const final {
    return new TickString();
  }

  TickString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TickString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TickString& from);
  void MergeFrom(const TickString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TickString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.TickString";
  }
  protected:
  explicit TickString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kTickTypeFieldNumber = 2,
  };
  // string value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .Jde.Markets.Proto.Results.ETickType tick_type = 2;
  void clear_tick_type();
  ::Jde::Markets::Proto::Results::ETickType tick_type() const;
  void set_tick_type(::Jde::Markets::Proto::Results::ETickType value);
  private:
  ::Jde::Markets::Proto::Results::ETickType _internal_tick_type() const;
  void _internal_set_tick_type(::Jde::Markets::Proto::Results::ETickType value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.TickString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  int tick_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT OrderState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.OrderState) */ {
 public:
  inline OrderState() : OrderState(nullptr) {}
  ~OrderState() override;
  explicit constexpr OrderState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderState(const OrderState& from);
  OrderState(OrderState&& from) noexcept
    : OrderState() {
    *this = ::std::move(from);
  }

  inline OrderState& operator=(const OrderState& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderState& operator=(OrderState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderState& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderState* internal_default_instance() {
    return reinterpret_cast<const OrderState*>(
               &_OrderState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(OrderState& a, OrderState& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderState* New() const final {
    return new OrderState();
  }

  OrderState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderState& from);
  void MergeFrom(const OrderState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.OrderState";
  }
  protected:
  explicit OrderState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kInitMarginBeforeFieldNumber = 2,
    kMaintMarginBeforeFieldNumber = 3,
    kEquityWithLoanBeforeFieldNumber = 4,
    kInitMarginChangeFieldNumber = 5,
    kMaintMarginChangeFieldNumber = 6,
    kEquityWithLoanChangeFieldNumber = 7,
    kInitMarginAfterFieldNumber = 8,
    kMaintMarginAfterFieldNumber = 9,
    kEquityWithLoanAfterFieldNumber = 10,
    kCommissionCurrencyFieldNumber = 14,
    kWarningTextFieldNumber = 15,
    kCompletedTimeFieldNumber = 16,
    kCompletedStatusFieldNumber = 17,
    kCommissionFieldNumber = 11,
    kMinCommissionFieldNumber = 12,
    kMaxCommissionFieldNumber = 13,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string init_margin_before = 2;
  void clear_init_margin_before();
  const std::string& init_margin_before() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_init_margin_before(ArgT0&& arg0, ArgT... args);
  std::string* mutable_init_margin_before();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_init_margin_before();
  void set_allocated_init_margin_before(std::string* init_margin_before);
  private:
  const std::string& _internal_init_margin_before() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_init_margin_before(const std::string& value);
  std::string* _internal_mutable_init_margin_before();
  public:

  // string maint_margin_before = 3;
  void clear_maint_margin_before();
  const std::string& maint_margin_before() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maint_margin_before(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maint_margin_before();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_maint_margin_before();
  void set_allocated_maint_margin_before(std::string* maint_margin_before);
  private:
  const std::string& _internal_maint_margin_before() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maint_margin_before(const std::string& value);
  std::string* _internal_mutable_maint_margin_before();
  public:

  // string equity_with_loan_before = 4;
  void clear_equity_with_loan_before();
  const std::string& equity_with_loan_before() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_equity_with_loan_before(ArgT0&& arg0, ArgT... args);
  std::string* mutable_equity_with_loan_before();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_equity_with_loan_before();
  void set_allocated_equity_with_loan_before(std::string* equity_with_loan_before);
  private:
  const std::string& _internal_equity_with_loan_before() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_equity_with_loan_before(const std::string& value);
  std::string* _internal_mutable_equity_with_loan_before();
  public:

  // string init_margin_change = 5;
  void clear_init_margin_change();
  const std::string& init_margin_change() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_init_margin_change(ArgT0&& arg0, ArgT... args);
  std::string* mutable_init_margin_change();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_init_margin_change();
  void set_allocated_init_margin_change(std::string* init_margin_change);
  private:
  const std::string& _internal_init_margin_change() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_init_margin_change(const std::string& value);
  std::string* _internal_mutable_init_margin_change();
  public:

  // string maint_margin_change = 6;
  void clear_maint_margin_change();
  const std::string& maint_margin_change() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maint_margin_change(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maint_margin_change();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_maint_margin_change();
  void set_allocated_maint_margin_change(std::string* maint_margin_change);
  private:
  const std::string& _internal_maint_margin_change() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maint_margin_change(const std::string& value);
  std::string* _internal_mutable_maint_margin_change();
  public:

  // string equity_with_loan_change = 7;
  void clear_equity_with_loan_change();
  const std::string& equity_with_loan_change() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_equity_with_loan_change(ArgT0&& arg0, ArgT... args);
  std::string* mutable_equity_with_loan_change();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_equity_with_loan_change();
  void set_allocated_equity_with_loan_change(std::string* equity_with_loan_change);
  private:
  const std::string& _internal_equity_with_loan_change() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_equity_with_loan_change(const std::string& value);
  std::string* _internal_mutable_equity_with_loan_change();
  public:

  // string init_margin_after = 8;
  void clear_init_margin_after();
  const std::string& init_margin_after() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_init_margin_after(ArgT0&& arg0, ArgT... args);
  std::string* mutable_init_margin_after();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_init_margin_after();
  void set_allocated_init_margin_after(std::string* init_margin_after);
  private:
  const std::string& _internal_init_margin_after() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_init_margin_after(const std::string& value);
  std::string* _internal_mutable_init_margin_after();
  public:

  // string maint_margin_after = 9;
  void clear_maint_margin_after();
  const std::string& maint_margin_after() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maint_margin_after(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maint_margin_after();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_maint_margin_after();
  void set_allocated_maint_margin_after(std::string* maint_margin_after);
  private:
  const std::string& _internal_maint_margin_after() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maint_margin_after(const std::string& value);
  std::string* _internal_mutable_maint_margin_after();
  public:

  // string equity_with_loan_after = 10;
  void clear_equity_with_loan_after();
  const std::string& equity_with_loan_after() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_equity_with_loan_after(ArgT0&& arg0, ArgT... args);
  std::string* mutable_equity_with_loan_after();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_equity_with_loan_after();
  void set_allocated_equity_with_loan_after(std::string* equity_with_loan_after);
  private:
  const std::string& _internal_equity_with_loan_after() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_equity_with_loan_after(const std::string& value);
  std::string* _internal_mutable_equity_with_loan_after();
  public:

  // string commission_currency = 14;
  void clear_commission_currency();
  const std::string& commission_currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commission_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commission_currency();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_commission_currency();
  void set_allocated_commission_currency(std::string* commission_currency);
  private:
  const std::string& _internal_commission_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commission_currency(const std::string& value);
  std::string* _internal_mutable_commission_currency();
  public:

  // string warning_text = 15;
  void clear_warning_text();
  const std::string& warning_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_warning_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_warning_text();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_warning_text();
  void set_allocated_warning_text(std::string* warning_text);
  private:
  const std::string& _internal_warning_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_warning_text(const std::string& value);
  std::string* _internal_mutable_warning_text();
  public:

  // string completed_time = 16;
  void clear_completed_time();
  const std::string& completed_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_completed_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_completed_time();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_completed_time();
  void set_allocated_completed_time(std::string* completed_time);
  private:
  const std::string& _internal_completed_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_completed_time(const std::string& value);
  std::string* _internal_mutable_completed_time();
  public:

  // string completed_status = 17;
  void clear_completed_status();
  const std::string& completed_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_completed_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_completed_status();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_completed_status();
  void set_allocated_completed_status(std::string* completed_status);
  private:
  const std::string& _internal_completed_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_completed_status(const std::string& value);
  std::string* _internal_mutable_completed_status();
  public:

  // double commission = 11;
  void clear_commission();
  double commission() const;
  void set_commission(double value);
  private:
  double _internal_commission() const;
  void _internal_set_commission(double value);
  public:

  // double min_commission = 12;
  void clear_min_commission();
  double min_commission() const;
  void set_min_commission(double value);
  private:
  double _internal_min_commission() const;
  void _internal_set_min_commission(double value);
  public:

  // double max_commission = 13;
  void clear_max_commission();
  double max_commission() const;
  void set_max_commission(double value);
  private:
  double _internal_max_commission() const;
  void _internal_set_max_commission(double value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.OrderState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr init_margin_before_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maint_margin_before_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equity_with_loan_before_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr init_margin_change_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maint_margin_change_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equity_with_loan_change_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr init_margin_after_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maint_margin_after_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr equity_with_loan_after_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commission_currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr warning_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr completed_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr completed_status_;
  double commission_;
  double min_commission_;
  double max_commission_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT OpenOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.OpenOrder) */ {
 public:
  inline OpenOrder() : OpenOrder(nullptr) {}
  ~OpenOrder() override;
  explicit constexpr OpenOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OpenOrder(const OpenOrder& from);
  OpenOrder(OpenOrder&& from) noexcept
    : OpenOrder() {
    *this = ::std::move(from);
  }

  inline OpenOrder& operator=(const OpenOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenOrder& operator=(OpenOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OpenOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const OpenOrder* internal_default_instance() {
    return reinterpret_cast<const OpenOrder*>(
               &_OpenOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(OpenOrder& a, OpenOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenOrder* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpenOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenOrder* New() const final {
    return new OpenOrder();
  }

  OpenOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenOrder& from);
  void MergeFrom(const OpenOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.OpenOrder";
  }
  protected:
  explicit OpenOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractFieldNumber = 2,
    kOrderFieldNumber = 3,
    kStateFieldNumber = 4,
    kWebIdFieldNumber = 1,
  };
  // .Jde.Markets.Proto.Contract contract = 2;
  bool has_contract() const;
  private:
  bool _internal_has_contract() const;
  public:
  void clear_contract();
  const ::Jde::Markets::Proto::Contract& contract() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Contract* release_contract();
  ::Jde::Markets::Proto::Contract* mutable_contract();
  void set_allocated_contract(::Jde::Markets::Proto::Contract* contract);
  private:
  const ::Jde::Markets::Proto::Contract& _internal_contract() const;
  ::Jde::Markets::Proto::Contract* _internal_mutable_contract();
  public:
  void unsafe_arena_set_allocated_contract(
      ::Jde::Markets::Proto::Contract* contract);
  ::Jde::Markets::Proto::Contract* unsafe_arena_release_contract();

  // .Jde.Markets.Proto.Order order = 3;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::Jde::Markets::Proto::Order& order() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Order* release_order();
  ::Jde::Markets::Proto::Order* mutable_order();
  void set_allocated_order(::Jde::Markets::Proto::Order* order);
  private:
  const ::Jde::Markets::Proto::Order& _internal_order() const;
  ::Jde::Markets::Proto::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::Jde::Markets::Proto::Order* order);
  ::Jde::Markets::Proto::Order* unsafe_arena_release_order();

  // .Jde.Markets.Proto.Results.OrderState state = 4;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  const ::Jde::Markets::Proto::Results::OrderState& state() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Proto::Results::OrderState* release_state();
  ::Jde::Markets::Proto::Results::OrderState* mutable_state();
  void set_allocated_state(::Jde::Markets::Proto::Results::OrderState* state);
  private:
  const ::Jde::Markets::Proto::Results::OrderState& _internal_state() const;
  ::Jde::Markets::Proto::Results::OrderState* _internal_mutable_state();
  public:
  void unsafe_arena_set_allocated_state(
      ::Jde::Markets::Proto::Results::OrderState* state);
  ::Jde::Markets::Proto::Results::OrderState* unsafe_arena_release_state();

  // uint32 web_id = 1;
  void clear_web_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 web_id() const;
  void set_web_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_web_id() const;
  void _internal_set_web_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.OpenOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Jde::Markets::Proto::Contract* contract_;
  ::Jde::Markets::Proto::Order* order_;
  ::Jde::Markets::Proto::Results::OrderState* state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 web_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT ExchangeContracts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.ExchangeContracts) */ {
 public:
  inline ExchangeContracts() : ExchangeContracts(nullptr) {}
  ~ExchangeContracts() override;
  explicit constexpr ExchangeContracts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExchangeContracts(const ExchangeContracts& from);
  ExchangeContracts(ExchangeContracts&& from) noexcept
    : ExchangeContracts() {
    *this = ::std::move(from);
  }

  inline ExchangeContracts& operator=(const ExchangeContracts& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeContracts& operator=(ExchangeContracts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeContracts& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeContracts* internal_default_instance() {
    return reinterpret_cast<const ExchangeContracts*>(
               &_ExchangeContracts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ExchangeContracts& a, ExchangeContracts& b) {
    a.Swap(&b);
  }
  inline void Swap(ExchangeContracts* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeContracts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExchangeContracts* New() const final {
    return new ExchangeContracts();
  }

  ExchangeContracts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExchangeContracts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExchangeContracts& from);
  void MergeFrom(const ExchangeContracts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExchangeContracts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.ExchangeContracts";
  }
  protected:
  explicit ExchangeContracts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpirationsFieldNumber = 5,
    kStrikesFieldNumber = 6,
    kTradingClassFieldNumber = 3,
    kMultiplierFieldNumber = 4,
    kExchangeFieldNumber = 1,
    kUnderlyingContractIdFieldNumber = 2,
  };
  // repeated uint32 expirations = 5;
  int expirations_size() const;
  private:
  int _internal_expirations_size() const;
  public:
  void clear_expirations();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expirations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_expirations() const;
  void _internal_add_expirations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_expirations();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 expirations(int index) const;
  void set_expirations(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_expirations(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      expirations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_expirations();

  // repeated double strikes = 6;
  int strikes_size() const;
  private:
  int _internal_strikes_size() const;
  public:
  void clear_strikes();
  private:
  double _internal_strikes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_strikes() const;
  void _internal_add_strikes(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_strikes();
  public:
  double strikes(int index) const;
  void set_strikes(int index, double value);
  void add_strikes(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      strikes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_strikes();

  // string trading_class = 3;
  void clear_trading_class();
  const std::string& trading_class() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trading_class(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trading_class();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_trading_class();
  void set_allocated_trading_class(std::string* trading_class);
  private:
  const std::string& _internal_trading_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trading_class(const std::string& value);
  std::string* _internal_mutable_trading_class();
  public:

  // string multiplier = 4;
  void clear_multiplier();
  const std::string& multiplier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_multiplier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_multiplier();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_multiplier();
  void set_allocated_multiplier(std::string* multiplier);
  private:
  const std::string& _internal_multiplier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_multiplier(const std::string& value);
  std::string* _internal_mutable_multiplier();
  public:

  // .Jde.Markets.Proto.Exchanges exchange = 1;
  void clear_exchange();
  ::Jde::Markets::Proto::Exchanges exchange() const;
  void set_exchange(::Jde::Markets::Proto::Exchanges value);
  private:
  ::Jde::Markets::Proto::Exchanges _internal_exchange() const;
  void _internal_set_exchange(::Jde::Markets::Proto::Exchanges value);
  public:

  // uint32 underlying_contract_id = 2;
  void clear_underlying_contract_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 underlying_contract_id() const;
  void set_underlying_contract_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_underlying_contract_id() const;
  void _internal_set_underlying_contract_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.ExchangeContracts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > expirations_;
  mutable std::atomic<int> _expirations_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > strikes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trading_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multiplier_;
  int exchange_;
  ::PROTOBUF_NAMESPACE_ID::uint32 underlying_contract_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT OptionExchanges final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Proto.Results.OptionExchanges) */ {
 public:
  inline OptionExchanges() : OptionExchanges(nullptr) {}
  ~OptionExchanges() override;
  explicit constexpr OptionExchanges(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionExchanges(const OptionExchanges& from);
  OptionExchanges(OptionExchanges&& from) noexcept
    : OptionExchanges() {
    *this = ::std::move(from);
  }

  inline OptionExchanges& operator=(const OptionExchanges& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionExchanges& operator=(OptionExchanges&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionExchanges& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionExchanges* internal_default_instance() {
    return reinterpret_cast<const OptionExchanges*>(
               &_OptionExchanges_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(OptionExchanges& a, OptionExchanges& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionExchanges* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionExchanges* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OptionExchanges* New() const final {
    return new OptionExchanges();
  }

  OptionExchanges* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OptionExchanges>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OptionExchanges& from);
  void MergeFrom(const OptionExchanges& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionExchanges* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Proto.Results.OptionExchanges";
  }
  protected:
  explicit OptionExchanges(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangesFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated .Jde.Markets.Proto.Results.ExchangeContracts exchanges = 2;
  int exchanges_size() const;
  private:
  int _internal_exchanges_size() const;
  public:
  void clear_exchanges();
  ::Jde::Markets::Proto::Results::ExchangeContracts* mutable_exchanges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ExchangeContracts >*
      mutable_exchanges();
  private:
  const ::Jde::Markets::Proto::Results::ExchangeContracts& _internal_exchanges(int index) const;
  ::Jde::Markets::Proto::Results::ExchangeContracts* _internal_add_exchanges();
  public:
  const ::Jde::Markets::Proto::Results::ExchangeContracts& exchanges(int index) const;
  ::Jde::Markets::Proto::Results::ExchangeContracts* add_exchanges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ExchangeContracts >&
      exchanges() const;

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Proto.Results.OptionExchanges)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ExchangeContracts > exchanges_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_results_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageValue

// .Jde.Markets.Proto.Results.EResults type = 1;
inline void MessageValue::clear_type() {
  type_ = 0;
}
inline ::Jde::Markets::Proto::Results::EResults MessageValue::_internal_type() const {
  return static_cast< ::Jde::Markets::Proto::Results::EResults >(type_);
}
inline ::Jde::Markets::Proto::Results::EResults MessageValue::type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageValue.type)
  return _internal_type();
}
inline void MessageValue::_internal_set_type(::Jde::Markets::Proto::Results::EResults value) {
  
  type_ = value;
}
inline void MessageValue::set_type(::Jde::Markets::Proto::Results::EResults value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.MessageValue.type)
}

// string string_value = 2;
inline bool MessageValue::_internal_has_string_value() const {
  return Value_case() == kStringValue;
}
inline bool MessageValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void MessageValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void MessageValue::clear_string_value() {
  if (_internal_has_string_value()) {
    Value_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_Value();
  }
}
inline const std::string& MessageValue::string_value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageValue.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void MessageValue::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_Value();
    set_has_string_value();
    Value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.MessageValue.string_value)
}
inline std::string* MessageValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageValue.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& MessageValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return Value_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void MessageValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_Value();
    set_has_string_value();
    Value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Value_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_Value();
    set_has_string_value();
    Value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Value_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageValue::release_string_value() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_Value();
    return Value_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void MessageValue::set_allocated_string_value(std::string* string_value) {
  if (has_Value()) {
    clear_Value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    Value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.MessageValue.string_value)
}

// int32 int_value = 3;
inline bool MessageValue::_internal_has_int_value() const {
  return Value_case() == kIntValue;
}
inline bool MessageValue::has_int_value() const {
  return _internal_has_int_value();
}
inline void MessageValue::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void MessageValue::clear_int_value() {
  if (_internal_has_int_value()) {
    Value_.int_value_ = 0;
    clear_has_Value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageValue::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return Value_.int_value_;
  }
  return 0;
}
inline void MessageValue::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int_value()) {
    clear_Value();
    set_has_int_value();
  }
  Value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageValue::int_value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageValue.int_value)
  return _internal_int_value();
}
inline void MessageValue::set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.MessageValue.int_value)
}

inline bool MessageValue::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void MessageValue::clear_has_Value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline MessageValue::ValueCase MessageValue::Value_case() const {
  return MessageValue::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StringResult

// .Jde.Markets.Proto.Results.EResults type = 1;
inline void StringResult::clear_type() {
  type_ = 0;
}
inline ::Jde::Markets::Proto::Results::EResults StringResult::_internal_type() const {
  return static_cast< ::Jde::Markets::Proto::Results::EResults >(type_);
}
inline ::Jde::Markets::Proto::Results::EResults StringResult::type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.StringResult.type)
  return _internal_type();
}
inline void StringResult::_internal_set_type(::Jde::Markets::Proto::Results::EResults value) {
  
  type_ = value;
}
inline void StringResult::set_type(::Jde::Markets::Proto::Results::EResults value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.StringResult.type)
}

// int32 id = 2;
inline void StringResult::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StringResult::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StringResult::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.StringResult.id)
  return _internal_id();
}
inline void StringResult::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void StringResult::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.StringResult.id)
}

// string value = 3;
inline void StringResult::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& StringResult::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.StringResult.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringResult::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.StringResult.value)
}
inline std::string* StringResult::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.StringResult.value)
  return _internal_mutable_value();
}
inline const std::string& StringResult::_internal_value() const {
  return value_.Get();
}
inline void StringResult::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StringResult::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StringResult::release_value() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.StringResult.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StringResult::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.StringResult.value)
}

// -------------------------------------------------------------------

// NewsArticle

// uint32 id = 1;
inline void NewsArticle::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewsArticle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NewsArticle::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.NewsArticle.id)
  return _internal_id();
}
inline void NewsArticle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void NewsArticle::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.NewsArticle.id)
}

// bool is_text = 2;
inline void NewsArticle::clear_is_text() {
  is_text_ = false;
}
inline bool NewsArticle::_internal_is_text() const {
  return is_text_;
}
inline bool NewsArticle::is_text() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.NewsArticle.is_text)
  return _internal_is_text();
}
inline void NewsArticle::_internal_set_is_text(bool value) {
  
  is_text_ = value;
}
inline void NewsArticle::set_is_text(bool value) {
  _internal_set_is_text(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.NewsArticle.is_text)
}

// string value = 3;
inline void NewsArticle::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& NewsArticle::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.NewsArticle.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewsArticle::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.NewsArticle.value)
}
inline std::string* NewsArticle::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.NewsArticle.value)
  return _internal_mutable_value();
}
inline const std::string& NewsArticle::_internal_value() const {
  return value_.Get();
}
inline void NewsArticle::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NewsArticle::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NewsArticle::release_value() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.NewsArticle.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NewsArticle::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.NewsArticle.value)
}

// -------------------------------------------------------------------

// TickNews

// uint32 id = 1;
inline void TickNews::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TickNews::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TickNews::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickNews.id)
  return _internal_id();
}
inline void TickNews::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void TickNews::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickNews.id)
}

// uint32 time = 2;
inline void TickNews::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TickNews::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TickNews::time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickNews.time)
  return _internal_time();
}
inline void TickNews::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void TickNews::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickNews.time)
}

// string provider_code = 3;
inline void TickNews::clear_provider_code() {
  provider_code_.ClearToEmpty();
}
inline const std::string& TickNews::provider_code() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickNews.provider_code)
  return _internal_provider_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TickNews::set_provider_code(ArgT0&& arg0, ArgT... args) {
 
 provider_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickNews.provider_code)
}
inline std::string* TickNews::mutable_provider_code() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.TickNews.provider_code)
  return _internal_mutable_provider_code();
}
inline const std::string& TickNews::_internal_provider_code() const {
  return provider_code_.Get();
}
inline void TickNews::_internal_set_provider_code(const std::string& value) {
  
  provider_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TickNews::_internal_mutable_provider_code() {
  
  return provider_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TickNews::release_provider_code() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.TickNews.provider_code)
  return provider_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TickNews::set_allocated_provider_code(std::string* provider_code) {
  if (provider_code != nullptr) {
    
  } else {
    
  }
  provider_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.TickNews.provider_code)
}

// string article_id = 4;
inline void TickNews::clear_article_id() {
  article_id_.ClearToEmpty();
}
inline const std::string& TickNews::article_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickNews.article_id)
  return _internal_article_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TickNews::set_article_id(ArgT0&& arg0, ArgT... args) {
 
 article_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickNews.article_id)
}
inline std::string* TickNews::mutable_article_id() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.TickNews.article_id)
  return _internal_mutable_article_id();
}
inline const std::string& TickNews::_internal_article_id() const {
  return article_id_.Get();
}
inline void TickNews::_internal_set_article_id(const std::string& value) {
  
  article_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TickNews::_internal_mutable_article_id() {
  
  return article_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TickNews::release_article_id() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.TickNews.article_id)
  return article_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TickNews::set_allocated_article_id(std::string* article_id) {
  if (article_id != nullptr) {
    
  } else {
    
  }
  article_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), article_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.TickNews.article_id)
}

// string headline = 5;
inline void TickNews::clear_headline() {
  headline_.ClearToEmpty();
}
inline const std::string& TickNews::headline() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickNews.headline)
  return _internal_headline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TickNews::set_headline(ArgT0&& arg0, ArgT... args) {
 
 headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickNews.headline)
}
inline std::string* TickNews::mutable_headline() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.TickNews.headline)
  return _internal_mutable_headline();
}
inline const std::string& TickNews::_internal_headline() const {
  return headline_.Get();
}
inline void TickNews::_internal_set_headline(const std::string& value) {
  
  headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TickNews::_internal_mutable_headline() {
  
  return headline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TickNews::release_headline() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.TickNews.headline)
  return headline_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TickNews::set_allocated_headline(std::string* headline) {
  if (headline != nullptr) {
    
  } else {
    
  }
  headline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headline,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.TickNews.headline)
}

// string extra_data = 6;
inline void TickNews::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& TickNews::extra_data() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickNews.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TickNews::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickNews.extra_data)
}
inline std::string* TickNews::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.TickNews.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& TickNews::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void TickNews::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TickNews::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TickNews::release_extra_data() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.TickNews.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TickNews::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.TickNews.extra_data)
}

// -------------------------------------------------------------------

// HistoricalNews

// uint32 id = 1;
inline void HistoricalNews::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistoricalNews::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistoricalNews::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.HistoricalNews.id)
  return _internal_id();
}
inline void HistoricalNews::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void HistoricalNews::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.HistoricalNews.id)
}

// uint32 time = 2;
inline void HistoricalNews::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistoricalNews::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistoricalNews::time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.HistoricalNews.time)
  return _internal_time();
}
inline void HistoricalNews::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void HistoricalNews::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.HistoricalNews.time)
}

// string provider_code = 3;
inline void HistoricalNews::clear_provider_code() {
  provider_code_.ClearToEmpty();
}
inline const std::string& HistoricalNews::provider_code() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.HistoricalNews.provider_code)
  return _internal_provider_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HistoricalNews::set_provider_code(ArgT0&& arg0, ArgT... args) {
 
 provider_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.HistoricalNews.provider_code)
}
inline std::string* HistoricalNews::mutable_provider_code() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.HistoricalNews.provider_code)
  return _internal_mutable_provider_code();
}
inline const std::string& HistoricalNews::_internal_provider_code() const {
  return provider_code_.Get();
}
inline void HistoricalNews::_internal_set_provider_code(const std::string& value) {
  
  provider_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HistoricalNews::_internal_mutable_provider_code() {
  
  return provider_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HistoricalNews::release_provider_code() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.HistoricalNews.provider_code)
  return provider_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HistoricalNews::set_allocated_provider_code(std::string* provider_code) {
  if (provider_code != nullptr) {
    
  } else {
    
  }
  provider_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.HistoricalNews.provider_code)
}

// string article_id = 4;
inline void HistoricalNews::clear_article_id() {
  article_id_.ClearToEmpty();
}
inline const std::string& HistoricalNews::article_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.HistoricalNews.article_id)
  return _internal_article_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HistoricalNews::set_article_id(ArgT0&& arg0, ArgT... args) {
 
 article_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.HistoricalNews.article_id)
}
inline std::string* HistoricalNews::mutable_article_id() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.HistoricalNews.article_id)
  return _internal_mutable_article_id();
}
inline const std::string& HistoricalNews::_internal_article_id() const {
  return article_id_.Get();
}
inline void HistoricalNews::_internal_set_article_id(const std::string& value) {
  
  article_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HistoricalNews::_internal_mutable_article_id() {
  
  return article_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HistoricalNews::release_article_id() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.HistoricalNews.article_id)
  return article_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HistoricalNews::set_allocated_article_id(std::string* article_id) {
  if (article_id != nullptr) {
    
  } else {
    
  }
  article_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), article_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.HistoricalNews.article_id)
}

// string headline = 5;
inline void HistoricalNews::clear_headline() {
  headline_.ClearToEmpty();
}
inline const std::string& HistoricalNews::headline() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.HistoricalNews.headline)
  return _internal_headline();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HistoricalNews::set_headline(ArgT0&& arg0, ArgT... args) {
 
 headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.HistoricalNews.headline)
}
inline std::string* HistoricalNews::mutable_headline() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.HistoricalNews.headline)
  return _internal_mutable_headline();
}
inline const std::string& HistoricalNews::_internal_headline() const {
  return headline_.Get();
}
inline void HistoricalNews::_internal_set_headline(const std::string& value) {
  
  headline_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HistoricalNews::_internal_mutable_headline() {
  
  return headline_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HistoricalNews::release_headline() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.HistoricalNews.headline)
  return headline_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HistoricalNews::set_allocated_headline(std::string* headline) {
  if (headline != nullptr) {
    
  } else {
    
  }
  headline_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headline,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.HistoricalNews.headline)
}

// -------------------------------------------------------------------

// HistoricalNewsCollection

// uint32 request_id = 1;
inline void HistoricalNewsCollection::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistoricalNewsCollection::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistoricalNewsCollection::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.HistoricalNewsCollection.request_id)
  return _internal_request_id();
}
inline void HistoricalNewsCollection::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void HistoricalNewsCollection::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.HistoricalNewsCollection.request_id)
}

// repeated .Jde.Markets.Proto.Results.HistoricalNews values = 2;
inline int HistoricalNewsCollection::_internal_values_size() const {
  return values_.size();
}
inline int HistoricalNewsCollection::values_size() const {
  return _internal_values_size();
}
inline void HistoricalNewsCollection::clear_values() {
  values_.Clear();
}
inline ::Jde::Markets::Proto::Results::HistoricalNews* HistoricalNewsCollection::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.HistoricalNewsCollection.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::HistoricalNews >*
HistoricalNewsCollection::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.HistoricalNewsCollection.values)
  return &values_;
}
inline const ::Jde::Markets::Proto::Results::HistoricalNews& HistoricalNewsCollection::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::HistoricalNews& HistoricalNewsCollection::values(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.HistoricalNewsCollection.values)
  return _internal_values(index);
}
inline ::Jde::Markets::Proto::Results::HistoricalNews* HistoricalNewsCollection::_internal_add_values() {
  return values_.Add();
}
inline ::Jde::Markets::Proto::Results::HistoricalNews* HistoricalNewsCollection::add_values() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.HistoricalNewsCollection.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::HistoricalNews >&
HistoricalNewsCollection::values() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.HistoricalNewsCollection.values)
  return values_;
}

// bool has_more = 3;
inline void HistoricalNewsCollection::clear_has_more() {
  has_more_ = false;
}
inline bool HistoricalNewsCollection::_internal_has_more() const {
  return has_more_;
}
inline bool HistoricalNewsCollection::has_more() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.HistoricalNewsCollection.has_more)
  return _internal_has_more();
}
inline void HistoricalNewsCollection::_internal_set_has_more(bool value) {
  
  has_more_ = value;
}
inline void HistoricalNewsCollection::set_has_more(bool value) {
  _internal_set_has_more(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.HistoricalNewsCollection.has_more)
}

// -------------------------------------------------------------------

// TagValue

// string tag = 1;
inline void TagValue::clear_tag() {
  tag_.ClearToEmpty();
}
inline const std::string& TagValue::tag() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TagValue.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TagValue::set_tag(ArgT0&& arg0, ArgT... args) {
 
 tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TagValue.tag)
}
inline std::string* TagValue::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.TagValue.tag)
  return _internal_mutable_tag();
}
inline const std::string& TagValue::_internal_tag() const {
  return tag_.Get();
}
inline void TagValue::_internal_set_tag(const std::string& value) {
  
  tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TagValue::_internal_mutable_tag() {
  
  return tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TagValue::release_tag() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.TagValue.tag)
  return tag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TagValue::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    
  } else {
    
  }
  tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.TagValue.tag)
}

// string value = 2;
inline void TagValue::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& TagValue::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TagValue.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TagValue::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TagValue.value)
}
inline std::string* TagValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.TagValue.value)
  return _internal_mutable_value();
}
inline const std::string& TagValue::_internal_value() const {
  return value_.Get();
}
inline void TagValue::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TagValue::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TagValue::release_value() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.TagValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TagValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.TagValue.value)
}

// -------------------------------------------------------------------

// ContractHours

// int32 start = 1;
inline void ContractHours::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractHours::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractHours::start() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractHours.start)
  return _internal_start();
}
inline void ContractHours::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void ContractHours::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractHours.start)
}

// int32 end = 2;
inline void ContractHours::clear_end() {
  end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractHours::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractHours::end() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractHours.end)
  return _internal_end();
}
inline void ContractHours::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_ = value;
}
inline void ContractHours::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractHours.end)
}

// -------------------------------------------------------------------

// ContractDetail

// .Jde.Markets.Proto.Contract contract = 2;
inline bool ContractDetail::_internal_has_contract() const {
  return this != internal_default_instance() && contract_ != nullptr;
}
inline bool ContractDetail::has_contract() const {
  return _internal_has_contract();
}
inline const ::Jde::Markets::Proto::Contract& ContractDetail::_internal_contract() const {
  const ::Jde::Markets::Proto::Contract* p = contract_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::Contract&>(
      ::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& ContractDetail::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.contract)
  return _internal_contract();
}
inline void ContractDetail::unsafe_arena_set_allocated_contract(
    ::Jde::Markets::Proto::Contract* contract) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  contract_ = contract;
  if (contract) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.ContractDetail.contract)
}
inline ::Jde::Markets::Proto::Contract* ContractDetail::release_contract() {
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::Contract* ContractDetail::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.contract)
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Contract* ContractDetail::_internal_mutable_contract() {
  
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Contract>(GetArenaForAllocation());
    contract_ = p;
  }
  return contract_;
}
inline ::Jde::Markets::Proto::Contract* ContractDetail::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.contract)
  return _internal_mutable_contract();
}
inline void ContractDetail::set_allocated_contract(::Jde::Markets::Proto::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract));
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    
  } else {
    
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.contract)
}

// string market_name = 3;
inline void ContractDetail::clear_market_name() {
  market_name_.ClearToEmpty();
}
inline const std::string& ContractDetail::market_name() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.market_name)
  return _internal_market_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_market_name(ArgT0&& arg0, ArgT... args) {
 
 market_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.market_name)
}
inline std::string* ContractDetail::mutable_market_name() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.market_name)
  return _internal_mutable_market_name();
}
inline const std::string& ContractDetail::_internal_market_name() const {
  return market_name_.Get();
}
inline void ContractDetail::_internal_set_market_name(const std::string& value) {
  
  market_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_market_name() {
  
  return market_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_market_name() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.market_name)
  return market_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_market_name(std::string* market_name) {
  if (market_name != nullptr) {
    
  } else {
    
  }
  market_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.market_name)
}

// double min_tick = 4;
inline void ContractDetail::clear_min_tick() {
  min_tick_ = 0;
}
inline double ContractDetail::_internal_min_tick() const {
  return min_tick_;
}
inline double ContractDetail::min_tick() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.min_tick)
  return _internal_min_tick();
}
inline void ContractDetail::_internal_set_min_tick(double value) {
  
  min_tick_ = value;
}
inline void ContractDetail::set_min_tick(double value) {
  _internal_set_min_tick(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.min_tick)
}

// string order_types = 5;
inline void ContractDetail::clear_order_types() {
  order_types_.ClearToEmpty();
}
inline const std::string& ContractDetail::order_types() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.order_types)
  return _internal_order_types();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_order_types(ArgT0&& arg0, ArgT... args) {
 
 order_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.order_types)
}
inline std::string* ContractDetail::mutable_order_types() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.order_types)
  return _internal_mutable_order_types();
}
inline const std::string& ContractDetail::_internal_order_types() const {
  return order_types_.Get();
}
inline void ContractDetail::_internal_set_order_types(const std::string& value) {
  
  order_types_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_order_types() {
  
  return order_types_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_order_types() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.order_types)
  return order_types_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_order_types(std::string* order_types) {
  if (order_types != nullptr) {
    
  } else {
    
  }
  order_types_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_types,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.order_types)
}

// string valid_exchanges = 6;
inline void ContractDetail::clear_valid_exchanges() {
  valid_exchanges_.ClearToEmpty();
}
inline const std::string& ContractDetail::valid_exchanges() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.valid_exchanges)
  return _internal_valid_exchanges();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_valid_exchanges(ArgT0&& arg0, ArgT... args) {
 
 valid_exchanges_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.valid_exchanges)
}
inline std::string* ContractDetail::mutable_valid_exchanges() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.valid_exchanges)
  return _internal_mutable_valid_exchanges();
}
inline const std::string& ContractDetail::_internal_valid_exchanges() const {
  return valid_exchanges_.Get();
}
inline void ContractDetail::_internal_set_valid_exchanges(const std::string& value) {
  
  valid_exchanges_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_valid_exchanges() {
  
  return valid_exchanges_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_valid_exchanges() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.valid_exchanges)
  return valid_exchanges_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_valid_exchanges(std::string* valid_exchanges) {
  if (valid_exchanges != nullptr) {
    
  } else {
    
  }
  valid_exchanges_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), valid_exchanges,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.valid_exchanges)
}

// int64 price_magnifier = 7;
inline void ContractDetail::clear_price_magnifier() {
  price_magnifier_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContractDetail::_internal_price_magnifier() const {
  return price_magnifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ContractDetail::price_magnifier() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.price_magnifier)
  return _internal_price_magnifier();
}
inline void ContractDetail::_internal_set_price_magnifier(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  price_magnifier_ = value;
}
inline void ContractDetail::set_price_magnifier(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_price_magnifier(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.price_magnifier)
}

// uint32 under_con_id = 8;
inline void ContractDetail::clear_under_con_id() {
  under_con_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractDetail::_internal_under_con_id() const {
  return under_con_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractDetail::under_con_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.under_con_id)
  return _internal_under_con_id();
}
inline void ContractDetail::_internal_set_under_con_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  under_con_id_ = value;
}
inline void ContractDetail::set_under_con_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_under_con_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.under_con_id)
}

// string long_name = 9;
inline void ContractDetail::clear_long_name() {
  long_name_.ClearToEmpty();
}
inline const std::string& ContractDetail::long_name() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.long_name)
  return _internal_long_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_long_name(ArgT0&& arg0, ArgT... args) {
 
 long_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.long_name)
}
inline std::string* ContractDetail::mutable_long_name() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.long_name)
  return _internal_mutable_long_name();
}
inline const std::string& ContractDetail::_internal_long_name() const {
  return long_name_.Get();
}
inline void ContractDetail::_internal_set_long_name(const std::string& value) {
  
  long_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_long_name() {
  
  return long_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_long_name() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.long_name)
  return long_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_long_name(std::string* long_name) {
  if (long_name != nullptr) {
    
  } else {
    
  }
  long_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), long_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.long_name)
}

// string contract_month = 10;
inline void ContractDetail::clear_contract_month() {
  contract_month_.ClearToEmpty();
}
inline const std::string& ContractDetail::contract_month() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.contract_month)
  return _internal_contract_month();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_contract_month(ArgT0&& arg0, ArgT... args) {
 
 contract_month_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.contract_month)
}
inline std::string* ContractDetail::mutable_contract_month() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.contract_month)
  return _internal_mutable_contract_month();
}
inline const std::string& ContractDetail::_internal_contract_month() const {
  return contract_month_.Get();
}
inline void ContractDetail::_internal_set_contract_month(const std::string& value) {
  
  contract_month_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_contract_month() {
  
  return contract_month_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_contract_month() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.contract_month)
  return contract_month_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_contract_month(std::string* contract_month) {
  if (contract_month != nullptr) {
    
  } else {
    
  }
  contract_month_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_month,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.contract_month)
}

// string industry = 11;
inline void ContractDetail::clear_industry() {
  industry_.ClearToEmpty();
}
inline const std::string& ContractDetail::industry() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.industry)
  return _internal_industry();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_industry(ArgT0&& arg0, ArgT... args) {
 
 industry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.industry)
}
inline std::string* ContractDetail::mutable_industry() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.industry)
  return _internal_mutable_industry();
}
inline const std::string& ContractDetail::_internal_industry() const {
  return industry_.Get();
}
inline void ContractDetail::_internal_set_industry(const std::string& value) {
  
  industry_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_industry() {
  
  return industry_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_industry() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.industry)
  return industry_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_industry(std::string* industry) {
  if (industry != nullptr) {
    
  } else {
    
  }
  industry_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), industry,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.industry)
}

// string category = 12;
inline void ContractDetail::clear_category() {
  category_.ClearToEmpty();
}
inline const std::string& ContractDetail::category() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.category)
  return _internal_category();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_category(ArgT0&& arg0, ArgT... args) {
 
 category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.category)
}
inline std::string* ContractDetail::mutable_category() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.category)
  return _internal_mutable_category();
}
inline const std::string& ContractDetail::_internal_category() const {
  return category_.Get();
}
inline void ContractDetail::_internal_set_category(const std::string& value) {
  
  category_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_category() {
  
  return category_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_category() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.category)
  return category_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.category)
}

// string subcategory = 13;
inline void ContractDetail::clear_subcategory() {
  subcategory_.ClearToEmpty();
}
inline const std::string& ContractDetail::subcategory() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.subcategory)
  return _internal_subcategory();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_subcategory(ArgT0&& arg0, ArgT... args) {
 
 subcategory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.subcategory)
}
inline std::string* ContractDetail::mutable_subcategory() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.subcategory)
  return _internal_mutable_subcategory();
}
inline const std::string& ContractDetail::_internal_subcategory() const {
  return subcategory_.Get();
}
inline void ContractDetail::_internal_set_subcategory(const std::string& value) {
  
  subcategory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_subcategory() {
  
  return subcategory_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_subcategory() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.subcategory)
  return subcategory_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_subcategory(std::string* subcategory) {
  if (subcategory != nullptr) {
    
  } else {
    
  }
  subcategory_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subcategory,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.subcategory)
}

// string time_zone_id = 14;
inline void ContractDetail::clear_time_zone_id() {
  time_zone_id_.ClearToEmpty();
}
inline const std::string& ContractDetail::time_zone_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.time_zone_id)
  return _internal_time_zone_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_time_zone_id(ArgT0&& arg0, ArgT... args) {
 
 time_zone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.time_zone_id)
}
inline std::string* ContractDetail::mutable_time_zone_id() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.time_zone_id)
  return _internal_mutable_time_zone_id();
}
inline const std::string& ContractDetail::_internal_time_zone_id() const {
  return time_zone_id_.Get();
}
inline void ContractDetail::_internal_set_time_zone_id(const std::string& value) {
  
  time_zone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_time_zone_id() {
  
  return time_zone_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_time_zone_id() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.time_zone_id)
  return time_zone_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_time_zone_id(std::string* time_zone_id) {
  if (time_zone_id != nullptr) {
    
  } else {
    
  }
  time_zone_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_zone_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.time_zone_id)
}

// repeated .Jde.Markets.Proto.Results.ContractHours trading_hours = 15;
inline int ContractDetail::_internal_trading_hours_size() const {
  return trading_hours_.size();
}
inline int ContractDetail::trading_hours_size() const {
  return _internal_trading_hours_size();
}
inline void ContractDetail::clear_trading_hours() {
  trading_hours_.Clear();
}
inline ::Jde::Markets::Proto::Results::ContractHours* ContractDetail::mutable_trading_hours(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.trading_hours)
  return trading_hours_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractHours >*
ContractDetail::mutable_trading_hours() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.ContractDetail.trading_hours)
  return &trading_hours_;
}
inline const ::Jde::Markets::Proto::Results::ContractHours& ContractDetail::_internal_trading_hours(int index) const {
  return trading_hours_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::ContractHours& ContractDetail::trading_hours(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.trading_hours)
  return _internal_trading_hours(index);
}
inline ::Jde::Markets::Proto::Results::ContractHours* ContractDetail::_internal_add_trading_hours() {
  return trading_hours_.Add();
}
inline ::Jde::Markets::Proto::Results::ContractHours* ContractDetail::add_trading_hours() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.ContractDetail.trading_hours)
  return _internal_add_trading_hours();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractHours >&
ContractDetail::trading_hours() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.ContractDetail.trading_hours)
  return trading_hours_;
}

// repeated .Jde.Markets.Proto.Results.ContractHours liquid_hours = 16;
inline int ContractDetail::_internal_liquid_hours_size() const {
  return liquid_hours_.size();
}
inline int ContractDetail::liquid_hours_size() const {
  return _internal_liquid_hours_size();
}
inline void ContractDetail::clear_liquid_hours() {
  liquid_hours_.Clear();
}
inline ::Jde::Markets::Proto::Results::ContractHours* ContractDetail::mutable_liquid_hours(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.liquid_hours)
  return liquid_hours_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractHours >*
ContractDetail::mutable_liquid_hours() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.ContractDetail.liquid_hours)
  return &liquid_hours_;
}
inline const ::Jde::Markets::Proto::Results::ContractHours& ContractDetail::_internal_liquid_hours(int index) const {
  return liquid_hours_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::ContractHours& ContractDetail::liquid_hours(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.liquid_hours)
  return _internal_liquid_hours(index);
}
inline ::Jde::Markets::Proto::Results::ContractHours* ContractDetail::_internal_add_liquid_hours() {
  return liquid_hours_.Add();
}
inline ::Jde::Markets::Proto::Results::ContractHours* ContractDetail::add_liquid_hours() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.ContractDetail.liquid_hours)
  return _internal_add_liquid_hours();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractHours >&
ContractDetail::liquid_hours() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.ContractDetail.liquid_hours)
  return liquid_hours_;
}

// string ev_rule = 17;
inline void ContractDetail::clear_ev_rule() {
  ev_rule_.ClearToEmpty();
}
inline const std::string& ContractDetail::ev_rule() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.ev_rule)
  return _internal_ev_rule();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_ev_rule(ArgT0&& arg0, ArgT... args) {
 
 ev_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.ev_rule)
}
inline std::string* ContractDetail::mutable_ev_rule() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.ev_rule)
  return _internal_mutable_ev_rule();
}
inline const std::string& ContractDetail::_internal_ev_rule() const {
  return ev_rule_.Get();
}
inline void ContractDetail::_internal_set_ev_rule(const std::string& value) {
  
  ev_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_ev_rule() {
  
  return ev_rule_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_ev_rule() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.ev_rule)
  return ev_rule_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_ev_rule(std::string* ev_rule) {
  if (ev_rule != nullptr) {
    
  } else {
    
  }
  ev_rule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ev_rule,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.ev_rule)
}

// double ev_multiplier = 18;
inline void ContractDetail::clear_ev_multiplier() {
  ev_multiplier_ = 0;
}
inline double ContractDetail::_internal_ev_multiplier() const {
  return ev_multiplier_;
}
inline double ContractDetail::ev_multiplier() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.ev_multiplier)
  return _internal_ev_multiplier();
}
inline void ContractDetail::_internal_set_ev_multiplier(double value) {
  
  ev_multiplier_ = value;
}
inline void ContractDetail::set_ev_multiplier(double value) {
  _internal_set_ev_multiplier(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.ev_multiplier)
}

// int32 md_size_multiplier = 19;
inline void ContractDetail::clear_md_size_multiplier() {
  md_size_multiplier_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetail::_internal_md_size_multiplier() const {
  return md_size_multiplier_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetail::md_size_multiplier() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.md_size_multiplier)
  return _internal_md_size_multiplier();
}
inline void ContractDetail::_internal_set_md_size_multiplier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  md_size_multiplier_ = value;
}
inline void ContractDetail::set_md_size_multiplier(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_md_size_multiplier(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.md_size_multiplier)
}

// int32 agg_group = 20;
inline void ContractDetail::clear_agg_group() {
  agg_group_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetail::_internal_agg_group() const {
  return agg_group_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractDetail::agg_group() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.agg_group)
  return _internal_agg_group();
}
inline void ContractDetail::_internal_set_agg_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  agg_group_ = value;
}
inline void ContractDetail::set_agg_group(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_agg_group(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.agg_group)
}

// string under_symbol = 21;
inline void ContractDetail::clear_under_symbol() {
  under_symbol_.ClearToEmpty();
}
inline const std::string& ContractDetail::under_symbol() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.under_symbol)
  return _internal_under_symbol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_under_symbol(ArgT0&& arg0, ArgT... args) {
 
 under_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.under_symbol)
}
inline std::string* ContractDetail::mutable_under_symbol() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.under_symbol)
  return _internal_mutable_under_symbol();
}
inline const std::string& ContractDetail::_internal_under_symbol() const {
  return under_symbol_.Get();
}
inline void ContractDetail::_internal_set_under_symbol(const std::string& value) {
  
  under_symbol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_under_symbol() {
  
  return under_symbol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_under_symbol() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.under_symbol)
  return under_symbol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_under_symbol(std::string* under_symbol) {
  if (under_symbol != nullptr) {
    
  } else {
    
  }
  under_symbol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), under_symbol,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.under_symbol)
}

// string under_sec_type = 22;
inline void ContractDetail::clear_under_sec_type() {
  under_sec_type_.ClearToEmpty();
}
inline const std::string& ContractDetail::under_sec_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.under_sec_type)
  return _internal_under_sec_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_under_sec_type(ArgT0&& arg0, ArgT... args) {
 
 under_sec_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.under_sec_type)
}
inline std::string* ContractDetail::mutable_under_sec_type() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.under_sec_type)
  return _internal_mutable_under_sec_type();
}
inline const std::string& ContractDetail::_internal_under_sec_type() const {
  return under_sec_type_.Get();
}
inline void ContractDetail::_internal_set_under_sec_type(const std::string& value) {
  
  under_sec_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_under_sec_type() {
  
  return under_sec_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_under_sec_type() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.under_sec_type)
  return under_sec_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_under_sec_type(std::string* under_sec_type) {
  if (under_sec_type != nullptr) {
    
  } else {
    
  }
  under_sec_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), under_sec_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.under_sec_type)
}

// string market_rule_ids = 23;
inline void ContractDetail::clear_market_rule_ids() {
  market_rule_ids_.ClearToEmpty();
}
inline const std::string& ContractDetail::market_rule_ids() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.market_rule_ids)
  return _internal_market_rule_ids();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_market_rule_ids(ArgT0&& arg0, ArgT... args) {
 
 market_rule_ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.market_rule_ids)
}
inline std::string* ContractDetail::mutable_market_rule_ids() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.market_rule_ids)
  return _internal_mutable_market_rule_ids();
}
inline const std::string& ContractDetail::_internal_market_rule_ids() const {
  return market_rule_ids_.Get();
}
inline void ContractDetail::_internal_set_market_rule_ids(const std::string& value) {
  
  market_rule_ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_market_rule_ids() {
  
  return market_rule_ids_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_market_rule_ids() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.market_rule_ids)
  return market_rule_ids_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_market_rule_ids(std::string* market_rule_ids) {
  if (market_rule_ids != nullptr) {
    
  } else {
    
  }
  market_rule_ids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_rule_ids,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.market_rule_ids)
}

// string real_expiration_date = 24;
inline void ContractDetail::clear_real_expiration_date() {
  real_expiration_date_.ClearToEmpty();
}
inline const std::string& ContractDetail::real_expiration_date() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.real_expiration_date)
  return _internal_real_expiration_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_real_expiration_date(ArgT0&& arg0, ArgT... args) {
 
 real_expiration_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.real_expiration_date)
}
inline std::string* ContractDetail::mutable_real_expiration_date() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.real_expiration_date)
  return _internal_mutable_real_expiration_date();
}
inline const std::string& ContractDetail::_internal_real_expiration_date() const {
  return real_expiration_date_.Get();
}
inline void ContractDetail::_internal_set_real_expiration_date(const std::string& value) {
  
  real_expiration_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_real_expiration_date() {
  
  return real_expiration_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_real_expiration_date() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.real_expiration_date)
  return real_expiration_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_real_expiration_date(std::string* real_expiration_date) {
  if (real_expiration_date != nullptr) {
    
  } else {
    
  }
  real_expiration_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_expiration_date,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.real_expiration_date)
}

// string last_trade_time = 25;
inline void ContractDetail::clear_last_trade_time() {
  last_trade_time_.ClearToEmpty();
}
inline const std::string& ContractDetail::last_trade_time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.last_trade_time)
  return _internal_last_trade_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_last_trade_time(ArgT0&& arg0, ArgT... args) {
 
 last_trade_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.last_trade_time)
}
inline std::string* ContractDetail::mutable_last_trade_time() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.last_trade_time)
  return _internal_mutable_last_trade_time();
}
inline const std::string& ContractDetail::_internal_last_trade_time() const {
  return last_trade_time_.Get();
}
inline void ContractDetail::_internal_set_last_trade_time(const std::string& value) {
  
  last_trade_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_last_trade_time() {
  
  return last_trade_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_last_trade_time() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.last_trade_time)
  return last_trade_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_last_trade_time(std::string* last_trade_time) {
  if (last_trade_time != nullptr) {
    
  } else {
    
  }
  last_trade_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_trade_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.last_trade_time)
}

// string stock_type = 26;
inline void ContractDetail::clear_stock_type() {
  stock_type_.ClearToEmpty();
}
inline const std::string& ContractDetail::stock_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.stock_type)
  return _internal_stock_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_stock_type(ArgT0&& arg0, ArgT... args) {
 
 stock_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.stock_type)
}
inline std::string* ContractDetail::mutable_stock_type() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.stock_type)
  return _internal_mutable_stock_type();
}
inline const std::string& ContractDetail::_internal_stock_type() const {
  return stock_type_.Get();
}
inline void ContractDetail::_internal_set_stock_type(const std::string& value) {
  
  stock_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_stock_type() {
  
  return stock_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_stock_type() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.stock_type)
  return stock_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_stock_type(std::string* stock_type) {
  if (stock_type != nullptr) {
    
  } else {
    
  }
  stock_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stock_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.stock_type)
}

// repeated .Jde.Markets.Proto.Results.TagValue sec_id_list = 27;
inline int ContractDetail::_internal_sec_id_list_size() const {
  return sec_id_list_.size();
}
inline int ContractDetail::sec_id_list_size() const {
  return _internal_sec_id_list_size();
}
inline void ContractDetail::clear_sec_id_list() {
  sec_id_list_.Clear();
}
inline ::Jde::Markets::Proto::Results::TagValue* ContractDetail::mutable_sec_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.sec_id_list)
  return sec_id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::TagValue >*
ContractDetail::mutable_sec_id_list() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.ContractDetail.sec_id_list)
  return &sec_id_list_;
}
inline const ::Jde::Markets::Proto::Results::TagValue& ContractDetail::_internal_sec_id_list(int index) const {
  return sec_id_list_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::TagValue& ContractDetail::sec_id_list(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.sec_id_list)
  return _internal_sec_id_list(index);
}
inline ::Jde::Markets::Proto::Results::TagValue* ContractDetail::_internal_add_sec_id_list() {
  return sec_id_list_.Add();
}
inline ::Jde::Markets::Proto::Results::TagValue* ContractDetail::add_sec_id_list() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.ContractDetail.sec_id_list)
  return _internal_add_sec_id_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::TagValue >&
ContractDetail::sec_id_list() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.ContractDetail.sec_id_list)
  return sec_id_list_;
}

// string cusip = 28;
inline void ContractDetail::clear_cusip() {
  cusip_.ClearToEmpty();
}
inline const std::string& ContractDetail::cusip() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.cusip)
  return _internal_cusip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_cusip(ArgT0&& arg0, ArgT... args) {
 
 cusip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.cusip)
}
inline std::string* ContractDetail::mutable_cusip() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.cusip)
  return _internal_mutable_cusip();
}
inline const std::string& ContractDetail::_internal_cusip() const {
  return cusip_.Get();
}
inline void ContractDetail::_internal_set_cusip(const std::string& value) {
  
  cusip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_cusip() {
  
  return cusip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_cusip() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.cusip)
  return cusip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_cusip(std::string* cusip) {
  if (cusip != nullptr) {
    
  } else {
    
  }
  cusip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cusip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.cusip)
}

// string ratings = 29;
inline void ContractDetail::clear_ratings() {
  ratings_.ClearToEmpty();
}
inline const std::string& ContractDetail::ratings() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.ratings)
  return _internal_ratings();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_ratings(ArgT0&& arg0, ArgT... args) {
 
 ratings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.ratings)
}
inline std::string* ContractDetail::mutable_ratings() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.ratings)
  return _internal_mutable_ratings();
}
inline const std::string& ContractDetail::_internal_ratings() const {
  return ratings_.Get();
}
inline void ContractDetail::_internal_set_ratings(const std::string& value) {
  
  ratings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_ratings() {
  
  return ratings_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_ratings() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.ratings)
  return ratings_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_ratings(std::string* ratings) {
  if (ratings != nullptr) {
    
  } else {
    
  }
  ratings_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ratings,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.ratings)
}

// string desc_append = 30;
inline void ContractDetail::clear_desc_append() {
  desc_append_.ClearToEmpty();
}
inline const std::string& ContractDetail::desc_append() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.desc_append)
  return _internal_desc_append();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_desc_append(ArgT0&& arg0, ArgT... args) {
 
 desc_append_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.desc_append)
}
inline std::string* ContractDetail::mutable_desc_append() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.desc_append)
  return _internal_mutable_desc_append();
}
inline const std::string& ContractDetail::_internal_desc_append() const {
  return desc_append_.Get();
}
inline void ContractDetail::_internal_set_desc_append(const std::string& value) {
  
  desc_append_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_desc_append() {
  
  return desc_append_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_desc_append() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.desc_append)
  return desc_append_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_desc_append(std::string* desc_append) {
  if (desc_append != nullptr) {
    
  } else {
    
  }
  desc_append_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc_append,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.desc_append)
}

// string bond_type = 31;
inline void ContractDetail::clear_bond_type() {
  bond_type_.ClearToEmpty();
}
inline const std::string& ContractDetail::bond_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.bond_type)
  return _internal_bond_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_bond_type(ArgT0&& arg0, ArgT... args) {
 
 bond_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.bond_type)
}
inline std::string* ContractDetail::mutable_bond_type() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.bond_type)
  return _internal_mutable_bond_type();
}
inline const std::string& ContractDetail::_internal_bond_type() const {
  return bond_type_.Get();
}
inline void ContractDetail::_internal_set_bond_type(const std::string& value) {
  
  bond_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_bond_type() {
  
  return bond_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_bond_type() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.bond_type)
  return bond_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_bond_type(std::string* bond_type) {
  if (bond_type != nullptr) {
    
  } else {
    
  }
  bond_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bond_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.bond_type)
}

// string coupon_type = 32;
inline void ContractDetail::clear_coupon_type() {
  coupon_type_.ClearToEmpty();
}
inline const std::string& ContractDetail::coupon_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.coupon_type)
  return _internal_coupon_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_coupon_type(ArgT0&& arg0, ArgT... args) {
 
 coupon_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.coupon_type)
}
inline std::string* ContractDetail::mutable_coupon_type() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.coupon_type)
  return _internal_mutable_coupon_type();
}
inline const std::string& ContractDetail::_internal_coupon_type() const {
  return coupon_type_.Get();
}
inline void ContractDetail::_internal_set_coupon_type(const std::string& value) {
  
  coupon_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_coupon_type() {
  
  return coupon_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_coupon_type() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.coupon_type)
  return coupon_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_coupon_type(std::string* coupon_type) {
  if (coupon_type != nullptr) {
    
  } else {
    
  }
  coupon_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), coupon_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.coupon_type)
}

// bool callable = 33;
inline void ContractDetail::clear_callable() {
  callable_ = false;
}
inline bool ContractDetail::_internal_callable() const {
  return callable_;
}
inline bool ContractDetail::callable() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.callable)
  return _internal_callable();
}
inline void ContractDetail::_internal_set_callable(bool value) {
  
  callable_ = value;
}
inline void ContractDetail::set_callable(bool value) {
  _internal_set_callable(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.callable)
}

// bool putable = 34;
inline void ContractDetail::clear_putable() {
  putable_ = false;
}
inline bool ContractDetail::_internal_putable() const {
  return putable_;
}
inline bool ContractDetail::putable() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.putable)
  return _internal_putable();
}
inline void ContractDetail::_internal_set_putable(bool value) {
  
  putable_ = value;
}
inline void ContractDetail::set_putable(bool value) {
  _internal_set_putable(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.putable)
}

// double coupon = 35;
inline void ContractDetail::clear_coupon() {
  coupon_ = 0;
}
inline double ContractDetail::_internal_coupon() const {
  return coupon_;
}
inline double ContractDetail::coupon() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.coupon)
  return _internal_coupon();
}
inline void ContractDetail::_internal_set_coupon(double value) {
  
  coupon_ = value;
}
inline void ContractDetail::set_coupon(double value) {
  _internal_set_coupon(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.coupon)
}

// bool convertible = 36;
inline void ContractDetail::clear_convertible() {
  convertible_ = false;
}
inline bool ContractDetail::_internal_convertible() const {
  return convertible_;
}
inline bool ContractDetail::convertible() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.convertible)
  return _internal_convertible();
}
inline void ContractDetail::_internal_set_convertible(bool value) {
  
  convertible_ = value;
}
inline void ContractDetail::set_convertible(bool value) {
  _internal_set_convertible(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.convertible)
}

// string maturity = 37;
inline void ContractDetail::clear_maturity() {
  maturity_.ClearToEmpty();
}
inline const std::string& ContractDetail::maturity() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.maturity)
  return _internal_maturity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_maturity(ArgT0&& arg0, ArgT... args) {
 
 maturity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.maturity)
}
inline std::string* ContractDetail::mutable_maturity() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.maturity)
  return _internal_mutable_maturity();
}
inline const std::string& ContractDetail::_internal_maturity() const {
  return maturity_.Get();
}
inline void ContractDetail::_internal_set_maturity(const std::string& value) {
  
  maturity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_maturity() {
  
  return maturity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_maturity() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.maturity)
  return maturity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_maturity(std::string* maturity) {
  if (maturity != nullptr) {
    
  } else {
    
  }
  maturity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maturity,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.maturity)
}

// string issueDate = 38;
inline void ContractDetail::clear_issuedate() {
  issuedate_.ClearToEmpty();
}
inline const std::string& ContractDetail::issuedate() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.issueDate)
  return _internal_issuedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_issuedate(ArgT0&& arg0, ArgT... args) {
 
 issuedate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.issueDate)
}
inline std::string* ContractDetail::mutable_issuedate() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.issueDate)
  return _internal_mutable_issuedate();
}
inline const std::string& ContractDetail::_internal_issuedate() const {
  return issuedate_.Get();
}
inline void ContractDetail::_internal_set_issuedate(const std::string& value) {
  
  issuedate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_issuedate() {
  
  return issuedate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_issuedate() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.issueDate)
  return issuedate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_issuedate(std::string* issuedate) {
  if (issuedate != nullptr) {
    
  } else {
    
  }
  issuedate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issuedate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.issueDate)
}

// string next_option_date = 39;
inline void ContractDetail::clear_next_option_date() {
  next_option_date_.ClearToEmpty();
}
inline const std::string& ContractDetail::next_option_date() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.next_option_date)
  return _internal_next_option_date();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_next_option_date(ArgT0&& arg0, ArgT... args) {
 
 next_option_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.next_option_date)
}
inline std::string* ContractDetail::mutable_next_option_date() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.next_option_date)
  return _internal_mutable_next_option_date();
}
inline const std::string& ContractDetail::_internal_next_option_date() const {
  return next_option_date_.Get();
}
inline void ContractDetail::_internal_set_next_option_date(const std::string& value) {
  
  next_option_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_next_option_date() {
  
  return next_option_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_next_option_date() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.next_option_date)
  return next_option_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_next_option_date(std::string* next_option_date) {
  if (next_option_date != nullptr) {
    
  } else {
    
  }
  next_option_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_option_date,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.next_option_date)
}

// string next_option_type = 40;
inline void ContractDetail::clear_next_option_type() {
  next_option_type_.ClearToEmpty();
}
inline const std::string& ContractDetail::next_option_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.next_option_type)
  return _internal_next_option_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_next_option_type(ArgT0&& arg0, ArgT... args) {
 
 next_option_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.next_option_type)
}
inline std::string* ContractDetail::mutable_next_option_type() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.next_option_type)
  return _internal_mutable_next_option_type();
}
inline const std::string& ContractDetail::_internal_next_option_type() const {
  return next_option_type_.Get();
}
inline void ContractDetail::_internal_set_next_option_type(const std::string& value) {
  
  next_option_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_next_option_type() {
  
  return next_option_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_next_option_type() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.next_option_type)
  return next_option_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_next_option_type(std::string* next_option_type) {
  if (next_option_type != nullptr) {
    
  } else {
    
  }
  next_option_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_option_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.next_option_type)
}

// bool next_option_partial = 41;
inline void ContractDetail::clear_next_option_partial() {
  next_option_partial_ = false;
}
inline bool ContractDetail::_internal_next_option_partial() const {
  return next_option_partial_;
}
inline bool ContractDetail::next_option_partial() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.next_option_partial)
  return _internal_next_option_partial();
}
inline void ContractDetail::_internal_set_next_option_partial(bool value) {
  
  next_option_partial_ = value;
}
inline void ContractDetail::set_next_option_partial(bool value) {
  _internal_set_next_option_partial(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.next_option_partial)
}

// string notes = 42;
inline void ContractDetail::clear_notes() {
  notes_.ClearToEmpty();
}
inline const std::string& ContractDetail::notes() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetail.notes)
  return _internal_notes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ContractDetail::set_notes(ArgT0&& arg0, ArgT... args) {
 
 notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetail.notes)
}
inline std::string* ContractDetail::mutable_notes() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetail.notes)
  return _internal_mutable_notes();
}
inline const std::string& ContractDetail::_internal_notes() const {
  return notes_.Get();
}
inline void ContractDetail::_internal_set_notes(const std::string& value) {
  
  notes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ContractDetail::_internal_mutable_notes() {
  
  return notes_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ContractDetail::release_notes() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ContractDetail.notes)
  return notes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ContractDetail::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ContractDetail.notes)
}

// -------------------------------------------------------------------

// ContractDetailsResult

// uint32 request_id = 1;
inline void ContractDetailsResult::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractDetailsResult::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ContractDetailsResult::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetailsResult.request_id)
  return _internal_request_id();
}
inline void ContractDetailsResult::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void ContractDetailsResult::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ContractDetailsResult.request_id)
}

// repeated .Jde.Markets.Proto.Results.ContractDetail details = 2;
inline int ContractDetailsResult::_internal_details_size() const {
  return details_.size();
}
inline int ContractDetailsResult::details_size() const {
  return _internal_details_size();
}
inline void ContractDetailsResult::clear_details() {
  details_.Clear();
}
inline ::Jde::Markets::Proto::Results::ContractDetail* ContractDetailsResult::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ContractDetailsResult.details)
  return details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractDetail >*
ContractDetailsResult::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.ContractDetailsResult.details)
  return &details_;
}
inline const ::Jde::Markets::Proto::Results::ContractDetail& ContractDetailsResult::_internal_details(int index) const {
  return details_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::ContractDetail& ContractDetailsResult::details(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ContractDetailsResult.details)
  return _internal_details(index);
}
inline ::Jde::Markets::Proto::Results::ContractDetail* ContractDetailsResult::_internal_add_details() {
  return details_.Add();
}
inline ::Jde::Markets::Proto::Results::ContractDetail* ContractDetailsResult::add_details() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.ContractDetailsResult.details)
  return _internal_add_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ContractDetail >&
ContractDetailsResult::details() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.ContractDetailsResult.details)
  return details_;
}

// -------------------------------------------------------------------

// Position

// string account_number = 1;
inline void Position::clear_account_number() {
  account_number_.ClearToEmpty();
}
inline const std::string& Position::account_number() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Position.account_number)
  return _internal_account_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Position::set_account_number(ArgT0&& arg0, ArgT... args) {
 
 account_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Position.account_number)
}
inline std::string* Position::mutable_account_number() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Position.account_number)
  return _internal_mutable_account_number();
}
inline const std::string& Position::_internal_account_number() const {
  return account_number_.Get();
}
inline void Position::_internal_set_account_number(const std::string& value) {
  
  account_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Position::_internal_mutable_account_number() {
  
  return account_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Position::release_account_number() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Position.account_number)
  return account_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Position::set_allocated_account_number(std::string* account_number) {
  if (account_number != nullptr) {
    
  } else {
    
  }
  account_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Position.account_number)
}

// .Jde.Markets.Proto.Contract contract = 2;
inline bool Position::_internal_has_contract() const {
  return this != internal_default_instance() && contract_ != nullptr;
}
inline bool Position::has_contract() const {
  return _internal_has_contract();
}
inline const ::Jde::Markets::Proto::Contract& Position::_internal_contract() const {
  const ::Jde::Markets::Proto::Contract* p = contract_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::Contract&>(
      ::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& Position::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Position.contract)
  return _internal_contract();
}
inline void Position::unsafe_arena_set_allocated_contract(
    ::Jde::Markets::Proto::Contract* contract) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  contract_ = contract;
  if (contract) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.Position.contract)
}
inline ::Jde::Markets::Proto::Contract* Position::release_contract() {
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::Contract* Position::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Position.contract)
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Contract* Position::_internal_mutable_contract() {
  
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Contract>(GetArenaForAllocation());
    contract_ = p;
  }
  return contract_;
}
inline ::Jde::Markets::Proto::Contract* Position::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Position.contract)
  return _internal_mutable_contract();
}
inline void Position::set_allocated_contract(::Jde::Markets::Proto::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract));
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    
  } else {
    
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Position.contract)
}

// double size = 3;
inline void Position::clear_size() {
  size_ = 0;
}
inline double Position::_internal_size() const {
  return size_;
}
inline double Position::size() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Position.size)
  return _internal_size();
}
inline void Position::_internal_set_size(double value) {
  
  size_ = value;
}
inline void Position::set_size(double value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Position.size)
}

// double avg_cost = 4;
inline void Position::clear_avg_cost() {
  avg_cost_ = 0;
}
inline double Position::_internal_avg_cost() const {
  return avg_cost_;
}
inline double Position::avg_cost() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Position.avg_cost)
  return _internal_avg_cost();
}
inline void Position::_internal_set_avg_cost(double value) {
  
  avg_cost_ = value;
}
inline void Position::set_avg_cost(double value) {
  _internal_set_avg_cost(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Position.avg_cost)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// StringMap

// .Jde.Markets.Proto.Results.EResults result = 1;
inline void StringMap::clear_result() {
  result_ = 0;
}
inline ::Jde::Markets::Proto::Results::EResults StringMap::_internal_result() const {
  return static_cast< ::Jde::Markets::Proto::Results::EResults >(result_);
}
inline ::Jde::Markets::Proto::Results::EResults StringMap::result() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.StringMap.result)
  return _internal_result();
}
inline void StringMap::_internal_set_result(::Jde::Markets::Proto::Results::EResults value) {
  
  result_ = value;
}
inline void StringMap::set_result(::Jde::Markets::Proto::Results::EResults value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.StringMap.result)
}

// map<string, string> values = 2;
inline int StringMap::_internal_values_size() const {
  return values_.size();
}
inline int StringMap::values_size() const {
  return _internal_values_size();
}
inline void StringMap::clear_values() {
  values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StringMap::_internal_values() const {
  return values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
StringMap::values() const {
  // @@protoc_insertion_point(field_map:Jde.Markets.Proto.Results.StringMap.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StringMap::_internal_mutable_values() {
  return values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
StringMap::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Jde.Markets.Proto.Results.StringMap.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Fundamentals

// uint32 request_id = 1;
inline void Fundamentals::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fundamentals::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Fundamentals::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Fundamentals.request_id)
  return _internal_request_id();
}
inline void Fundamentals::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void Fundamentals::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Fundamentals.request_id)
}

// map<string, double> values = 2;
inline int Fundamentals::_internal_values_size() const {
  return values_.size();
}
inline int Fundamentals::values_size() const {
  return _internal_values_size();
}
inline void Fundamentals::clear_values() {
  values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
Fundamentals::_internal_values() const {
  return values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
Fundamentals::values() const {
  // @@protoc_insertion_point(field_map:Jde.Markets.Proto.Results.Fundamentals.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
Fundamentals::_internal_mutable_values() {
  return values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
Fundamentals::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:Jde.Markets.Proto.Results.Fundamentals.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// AccountUpdate

// string account = 2;
inline void AccountUpdate::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& AccountUpdate::account() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdate.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountUpdate::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdate.account)
}
inline std::string* AccountUpdate::mutable_account() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdate.account)
  return _internal_mutable_account();
}
inline const std::string& AccountUpdate::_internal_account() const {
  return account_.Get();
}
inline void AccountUpdate::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountUpdate::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountUpdate::release_account() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdate.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountUpdate::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdate.account)
}

// string key = 4;
inline void AccountUpdate::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& AccountUpdate::key() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdate.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountUpdate::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdate.key)
}
inline std::string* AccountUpdate::mutable_key() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdate.key)
  return _internal_mutable_key();
}
inline const std::string& AccountUpdate::_internal_key() const {
  return key_.Get();
}
inline void AccountUpdate::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountUpdate::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountUpdate::release_key() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdate.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountUpdate::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdate.key)
}

// string value = 5;
inline void AccountUpdate::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& AccountUpdate::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdate.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountUpdate::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdate.value)
}
inline std::string* AccountUpdate::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdate.value)
  return _internal_mutable_value();
}
inline const std::string& AccountUpdate::_internal_value() const {
  return value_.Get();
}
inline void AccountUpdate::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountUpdate::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountUpdate::release_value() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdate.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountUpdate::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdate.value)
}

// string currency = 6;
inline void AccountUpdate::clear_currency() {
  currency_.ClearToEmpty();
}
inline const std::string& AccountUpdate::currency() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdate.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountUpdate::set_currency(ArgT0&& arg0, ArgT... args) {
 
 currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdate.currency)
}
inline std::string* AccountUpdate::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdate.currency)
  return _internal_mutable_currency();
}
inline const std::string& AccountUpdate::_internal_currency() const {
  return currency_.Get();
}
inline void AccountUpdate::_internal_set_currency(const std::string& value) {
  
  currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountUpdate::_internal_mutable_currency() {
  
  return currency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountUpdate::release_currency() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdate.currency)
  return currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountUpdate::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdate.currency)
}

// -------------------------------------------------------------------

// AccountUpdateMulti

// uint32 request_id = 1;
inline void AccountUpdateMulti::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountUpdateMulti::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AccountUpdateMulti::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdateMulti.request_id)
  return _internal_request_id();
}
inline void AccountUpdateMulti::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void AccountUpdateMulti::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdateMulti.request_id)
}

// string account = 2;
inline void AccountUpdateMulti::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& AccountUpdateMulti::account() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdateMulti.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountUpdateMulti::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdateMulti.account)
}
inline std::string* AccountUpdateMulti::mutable_account() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdateMulti.account)
  return _internal_mutable_account();
}
inline const std::string& AccountUpdateMulti::_internal_account() const {
  return account_.Get();
}
inline void AccountUpdateMulti::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountUpdateMulti::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountUpdateMulti::release_account() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdateMulti.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountUpdateMulti::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdateMulti.account)
}

// string model_code = 3;
inline void AccountUpdateMulti::clear_model_code() {
  model_code_.ClearToEmpty();
}
inline const std::string& AccountUpdateMulti::model_code() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdateMulti.model_code)
  return _internal_model_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountUpdateMulti::set_model_code(ArgT0&& arg0, ArgT... args) {
 
 model_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdateMulti.model_code)
}
inline std::string* AccountUpdateMulti::mutable_model_code() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdateMulti.model_code)
  return _internal_mutable_model_code();
}
inline const std::string& AccountUpdateMulti::_internal_model_code() const {
  return model_code_.Get();
}
inline void AccountUpdateMulti::_internal_set_model_code(const std::string& value) {
  
  model_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountUpdateMulti::_internal_mutable_model_code() {
  
  return model_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountUpdateMulti::release_model_code() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdateMulti.model_code)
  return model_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountUpdateMulti::set_allocated_model_code(std::string* model_code) {
  if (model_code != nullptr) {
    
  } else {
    
  }
  model_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdateMulti.model_code)
}

// string key = 4;
inline void AccountUpdateMulti::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& AccountUpdateMulti::key() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdateMulti.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountUpdateMulti::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdateMulti.key)
}
inline std::string* AccountUpdateMulti::mutable_key() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdateMulti.key)
  return _internal_mutable_key();
}
inline const std::string& AccountUpdateMulti::_internal_key() const {
  return key_.Get();
}
inline void AccountUpdateMulti::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountUpdateMulti::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountUpdateMulti::release_key() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdateMulti.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountUpdateMulti::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdateMulti.key)
}

// string value = 5;
inline void AccountUpdateMulti::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& AccountUpdateMulti::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdateMulti.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountUpdateMulti::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdateMulti.value)
}
inline std::string* AccountUpdateMulti::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdateMulti.value)
  return _internal_mutable_value();
}
inline const std::string& AccountUpdateMulti::_internal_value() const {
  return value_.Get();
}
inline void AccountUpdateMulti::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountUpdateMulti::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountUpdateMulti::release_value() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdateMulti.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountUpdateMulti::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdateMulti.value)
}

// string currency = 6;
inline void AccountUpdateMulti::clear_currency() {
  currency_.ClearToEmpty();
}
inline const std::string& AccountUpdateMulti::currency() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.AccountUpdateMulti.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccountUpdateMulti::set_currency(ArgT0&& arg0, ArgT... args) {
 
 currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.AccountUpdateMulti.currency)
}
inline std::string* AccountUpdateMulti::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.AccountUpdateMulti.currency)
  return _internal_mutable_currency();
}
inline const std::string& AccountUpdateMulti::_internal_currency() const {
  return currency_.Get();
}
inline void AccountUpdateMulti::_internal_set_currency(const std::string& value) {
  
  currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccountUpdateMulti::_internal_mutable_currency() {
  
  return currency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccountUpdateMulti::release_currency() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.AccountUpdateMulti.currency)
  return currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccountUpdateMulti::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.AccountUpdateMulti.currency)
}

// -------------------------------------------------------------------

// PositionMulti

// int32 id = 1;
inline void PositionMulti::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionMulti::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionMulti::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PositionMulti.id)
  return _internal_id();
}
inline void PositionMulti::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PositionMulti::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PositionMulti.id)
}

// string account = 2;
inline void PositionMulti::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& PositionMulti::account() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PositionMulti.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionMulti::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PositionMulti.account)
}
inline std::string* PositionMulti::mutable_account() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.PositionMulti.account)
  return _internal_mutable_account();
}
inline const std::string& PositionMulti::_internal_account() const {
  return account_.Get();
}
inline void PositionMulti::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PositionMulti::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PositionMulti::release_account() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.PositionMulti.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PositionMulti::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.PositionMulti.account)
}

// string model_code = 3;
inline void PositionMulti::clear_model_code() {
  model_code_.ClearToEmpty();
}
inline const std::string& PositionMulti::model_code() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PositionMulti.model_code)
  return _internal_model_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PositionMulti::set_model_code(ArgT0&& arg0, ArgT... args) {
 
 model_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PositionMulti.model_code)
}
inline std::string* PositionMulti::mutable_model_code() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.PositionMulti.model_code)
  return _internal_mutable_model_code();
}
inline const std::string& PositionMulti::_internal_model_code() const {
  return model_code_.Get();
}
inline void PositionMulti::_internal_set_model_code(const std::string& value) {
  
  model_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PositionMulti::_internal_mutable_model_code() {
  
  return model_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PositionMulti::release_model_code() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.PositionMulti.model_code)
  return model_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PositionMulti::set_allocated_model_code(std::string* model_code) {
  if (model_code != nullptr) {
    
  } else {
    
  }
  model_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.PositionMulti.model_code)
}

// .Jde.Markets.Proto.Contract contract = 4;
inline bool PositionMulti::_internal_has_contract() const {
  return this != internal_default_instance() && contract_ != nullptr;
}
inline bool PositionMulti::has_contract() const {
  return _internal_has_contract();
}
inline const ::Jde::Markets::Proto::Contract& PositionMulti::_internal_contract() const {
  const ::Jde::Markets::Proto::Contract* p = contract_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::Contract&>(
      ::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& PositionMulti::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PositionMulti.contract)
  return _internal_contract();
}
inline void PositionMulti::unsafe_arena_set_allocated_contract(
    ::Jde::Markets::Proto::Contract* contract) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  contract_ = contract;
  if (contract) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.PositionMulti.contract)
}
inline ::Jde::Markets::Proto::Contract* PositionMulti::release_contract() {
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::Contract* PositionMulti::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.PositionMulti.contract)
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Contract* PositionMulti::_internal_mutable_contract() {
  
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Contract>(GetArenaForAllocation());
    contract_ = p;
  }
  return contract_;
}
inline ::Jde::Markets::Proto::Contract* PositionMulti::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.PositionMulti.contract)
  return _internal_mutable_contract();
}
inline void PositionMulti::set_allocated_contract(::Jde::Markets::Proto::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract));
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    
  } else {
    
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.PositionMulti.contract)
}

// double position = 5;
inline void PositionMulti::clear_position() {
  position_ = 0;
}
inline double PositionMulti::_internal_position() const {
  return position_;
}
inline double PositionMulti::position() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PositionMulti.position)
  return _internal_position();
}
inline void PositionMulti::_internal_set_position(double value) {
  
  position_ = value;
}
inline void PositionMulti::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PositionMulti.position)
}

// double avgerage_cost = 6;
inline void PositionMulti::clear_avgerage_cost() {
  avgerage_cost_ = 0;
}
inline double PositionMulti::_internal_avgerage_cost() const {
  return avgerage_cost_;
}
inline double PositionMulti::avgerage_cost() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PositionMulti.avgerage_cost)
  return _internal_avgerage_cost();
}
inline void PositionMulti::_internal_set_avgerage_cost(double value) {
  
  avgerage_cost_ = value;
}
inline void PositionMulti::set_avgerage_cost(double value) {
  _internal_set_avgerage_cost(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PositionMulti.avgerage_cost)
}

// -------------------------------------------------------------------

// Bar

// int32 time = 1;
inline void Bar::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.time)
  return _internal_time();
}
inline void Bar::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void Bar::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.time)
}

// double high = 2;
inline void Bar::clear_high() {
  high_ = 0;
}
inline double Bar::_internal_high() const {
  return high_;
}
inline double Bar::high() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.high)
  return _internal_high();
}
inline void Bar::_internal_set_high(double value) {
  
  high_ = value;
}
inline void Bar::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.high)
}

// double low = 3;
inline void Bar::clear_low() {
  low_ = 0;
}
inline double Bar::_internal_low() const {
  return low_;
}
inline double Bar::low() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.low)
  return _internal_low();
}
inline void Bar::_internal_set_low(double value) {
  
  low_ = value;
}
inline void Bar::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.low)
}

// double open = 4;
inline void Bar::clear_open() {
  open_ = 0;
}
inline double Bar::_internal_open() const {
  return open_;
}
inline double Bar::open() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.open)
  return _internal_open();
}
inline void Bar::_internal_set_open(double value) {
  
  open_ = value;
}
inline void Bar::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.open)
}

// double close = 5;
inline void Bar::clear_close() {
  close_ = 0;
}
inline double Bar::_internal_close() const {
  return close_;
}
inline double Bar::close() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.close)
  return _internal_close();
}
inline void Bar::_internal_set_close(double value) {
  
  close_ = value;
}
inline void Bar::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.close)
}

// double wap = 6;
inline void Bar::clear_wap() {
  wap_ = 0;
}
inline double Bar::_internal_wap() const {
  return wap_;
}
inline double Bar::wap() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.wap)
  return _internal_wap();
}
inline void Bar::_internal_set_wap(double value) {
  
  wap_ = value;
}
inline void Bar::set_wap(double value) {
  _internal_set_wap(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.wap)
}

// uint64 volume = 7;
inline void Bar::clear_volume() {
  volume_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bar::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bar::volume() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.volume)
  return _internal_volume();
}
inline void Bar::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  volume_ = value;
}
inline void Bar::set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.volume)
}

// int32 count = 8;
inline void Bar::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::count() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Bar.count)
  return _internal_count();
}
inline void Bar::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void Bar::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Bar.count)
}

// -------------------------------------------------------------------

// CommissionReport

// string exec_id = 2;
inline void CommissionReport::clear_exec_id() {
  exec_id_.ClearToEmpty();
}
inline const std::string& CommissionReport::exec_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.CommissionReport.exec_id)
  return _internal_exec_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommissionReport::set_exec_id(ArgT0&& arg0, ArgT... args) {
 
 exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.CommissionReport.exec_id)
}
inline std::string* CommissionReport::mutable_exec_id() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.CommissionReport.exec_id)
  return _internal_mutable_exec_id();
}
inline const std::string& CommissionReport::_internal_exec_id() const {
  return exec_id_.Get();
}
inline void CommissionReport::_internal_set_exec_id(const std::string& value) {
  
  exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommissionReport::_internal_mutable_exec_id() {
  
  return exec_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommissionReport::release_exec_id() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.CommissionReport.exec_id)
  return exec_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommissionReport::set_allocated_exec_id(std::string* exec_id) {
  if (exec_id != nullptr) {
    
  } else {
    
  }
  exec_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exec_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.CommissionReport.exec_id)
}

// double commission = 3;
inline void CommissionReport::clear_commission() {
  commission_ = 0;
}
inline double CommissionReport::_internal_commission() const {
  return commission_;
}
inline double CommissionReport::commission() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.CommissionReport.commission)
  return _internal_commission();
}
inline void CommissionReport::_internal_set_commission(double value) {
  
  commission_ = value;
}
inline void CommissionReport::set_commission(double value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.CommissionReport.commission)
}

// string currency = 4;
inline void CommissionReport::clear_currency() {
  currency_.ClearToEmpty();
}
inline const std::string& CommissionReport::currency() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.CommissionReport.currency)
  return _internal_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommissionReport::set_currency(ArgT0&& arg0, ArgT... args) {
 
 currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.CommissionReport.currency)
}
inline std::string* CommissionReport::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.CommissionReport.currency)
  return _internal_mutable_currency();
}
inline const std::string& CommissionReport::_internal_currency() const {
  return currency_.Get();
}
inline void CommissionReport::_internal_set_currency(const std::string& value) {
  
  currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommissionReport::_internal_mutable_currency() {
  
  return currency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommissionReport::release_currency() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.CommissionReport.currency)
  return currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommissionReport::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.CommissionReport.currency)
}

// double realized_pnl = 5;
inline void CommissionReport::clear_realized_pnl() {
  realized_pnl_ = 0;
}
inline double CommissionReport::_internal_realized_pnl() const {
  return realized_pnl_;
}
inline double CommissionReport::realized_pnl() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.CommissionReport.realized_pnl)
  return _internal_realized_pnl();
}
inline void CommissionReport::_internal_set_realized_pnl(double value) {
  
  realized_pnl_ = value;
}
inline void CommissionReport::set_realized_pnl(double value) {
  _internal_set_realized_pnl(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.CommissionReport.realized_pnl)
}

// double yield = 6;
inline void CommissionReport::clear_yield() {
  yield_ = 0;
}
inline double CommissionReport::_internal_yield() const {
  return yield_;
}
inline double CommissionReport::yield() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.CommissionReport.yield)
  return _internal_yield();
}
inline void CommissionReport::_internal_set_yield(double value) {
  
  yield_ = value;
}
inline void CommissionReport::set_yield(double value) {
  _internal_set_yield(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.CommissionReport.yield)
}

// uint32 yield_redemption_date = 7;
inline void CommissionReport::clear_yield_redemption_date() {
  yield_redemption_date_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommissionReport::_internal_yield_redemption_date() const {
  return yield_redemption_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CommissionReport::yield_redemption_date() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.CommissionReport.yield_redemption_date)
  return _internal_yield_redemption_date();
}
inline void CommissionReport::_internal_set_yield_redemption_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  yield_redemption_date_ = value;
}
inline void CommissionReport::set_yield_redemption_date(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_yield_redemption_date(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.CommissionReport.yield_redemption_date)
}

// -------------------------------------------------------------------

// DaySummary

// uint32 request_id = 1;
inline void DaySummary::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DaySummary::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DaySummary::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.DaySummary.request_id)
  return _internal_request_id();
}
inline void DaySummary::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void DaySummary::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.DaySummary.request_id)
}

// uint32 contract_id = 2;
inline void DaySummary::clear_contract_id() {
  contract_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DaySummary::_internal_contract_id() const {
  return contract_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DaySummary::contract_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.DaySummary.contract_id)
  return _internal_contract_id();
}
inline void DaySummary::_internal_set_contract_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  contract_id_ = value;
}
inline void DaySummary::set_contract_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_contract_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.DaySummary.contract_id)
}

// uint32 day = 3;
inline void DaySummary::clear_day() {
  day_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DaySummary::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DaySummary::day() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.DaySummary.day)
  return _internal_day();
}
inline void DaySummary::_internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  day_ = value;
}
inline void DaySummary::set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.DaySummary.day)
}

// double high = 4;
inline void DaySummary::clear_high() {
  high_ = 0;
}
inline double DaySummary::_internal_high() const {
  return high_;
}
inline double DaySummary::high() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.DaySummary.high)
  return _internal_high();
}
inline void DaySummary::_internal_set_high(double value) {
  
  high_ = value;
}
inline void DaySummary::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.DaySummary.high)
}

// double low = 5;
inline void DaySummary::clear_low() {
  low_ = 0;
}
inline double DaySummary::_internal_low() const {
  return low_;
}
inline double DaySummary::low() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.DaySummary.low)
  return _internal_low();
}
inline void DaySummary::_internal_set_low(double value) {
  
  low_ = value;
}
inline void DaySummary::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.DaySummary.low)
}

// double open = 6;
inline void DaySummary::clear_open() {
  open_ = 0;
}
inline double DaySummary::_internal_open() const {
  return open_;
}
inline double DaySummary::open() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.DaySummary.open)
  return _internal_open();
}
inline void DaySummary::_internal_set_open(double value) {
  
  open_ = value;
}
inline void DaySummary::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.DaySummary.open)
}

// double close = 7;
inline void DaySummary::clear_close() {
  close_ = 0;
}
inline double DaySummary::_internal_close() const {
  return close_;
}
inline double DaySummary::close() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.DaySummary.close)
  return _internal_close();
}
inline void DaySummary::_internal_set_close(double value) {
  
  close_ = value;
}
inline void DaySummary::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.DaySummary.close)
}

// double bid = 8;
inline void DaySummary::clear_bid() {
  bid_ = 0;
}
inline double DaySummary::_internal_bid() const {
  return bid_;
}
inline double DaySummary::bid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.DaySummary.bid)
  return _internal_bid();
}
inline void DaySummary::_internal_set_bid(double value) {
  
  bid_ = value;
}
inline void DaySummary::set_bid(double value) {
  _internal_set_bid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.DaySummary.bid)
}

// double ask = 9;
inline void DaySummary::clear_ask() {
  ask_ = 0;
}
inline double DaySummary::_internal_ask() const {
  return ask_;
}
inline double DaySummary::ask() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.DaySummary.ask)
  return _internal_ask();
}
inline void DaySummary::_internal_set_ask(double value) {
  
  ask_ = value;
}
inline void DaySummary::set_ask(double value) {
  _internal_set_ask(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.DaySummary.ask)
}

// uint64 volume = 10;
inline void DaySummary::clear_volume() {
  volume_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DaySummary::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DaySummary::volume() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.DaySummary.volume)
  return _internal_volume();
}
inline void DaySummary::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  volume_ = value;
}
inline void DaySummary::set_volume(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.DaySummary.volume)
}

// uint32 count = 11;
inline void DaySummary::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DaySummary::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DaySummary::count() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.DaySummary.count)
  return _internal_count();
}
inline void DaySummary::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void DaySummary::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.DaySummary.count)
}

// -------------------------------------------------------------------

// HistoricalData

// uint32 request_id = 1;
inline void HistoricalData::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistoricalData::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HistoricalData::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.HistoricalData.request_id)
  return _internal_request_id();
}
inline void HistoricalData::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void HistoricalData::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.HistoricalData.request_id)
}

// repeated .Jde.Markets.Proto.Results.Bar bars = 2;
inline int HistoricalData::_internal_bars_size() const {
  return bars_.size();
}
inline int HistoricalData::bars_size() const {
  return _internal_bars_size();
}
inline void HistoricalData::clear_bars() {
  bars_.Clear();
}
inline ::Jde::Markets::Proto::Results::Bar* HistoricalData::mutable_bars(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.HistoricalData.bars)
  return bars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Bar >*
HistoricalData::mutable_bars() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.HistoricalData.bars)
  return &bars_;
}
inline const ::Jde::Markets::Proto::Results::Bar& HistoricalData::_internal_bars(int index) const {
  return bars_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::Bar& HistoricalData::bars(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.HistoricalData.bars)
  return _internal_bars(index);
}
inline ::Jde::Markets::Proto::Results::Bar* HistoricalData::_internal_add_bars() {
  return bars_.Add();
}
inline ::Jde::Markets::Proto::Results::Bar* HistoricalData::add_bars() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.HistoricalData.bars)
  return _internal_add_bars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Bar >&
HistoricalData::bars() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.HistoricalData.bars)
  return bars_;
}

// -------------------------------------------------------------------

// PortfolioUpdate

// .Jde.Markets.Proto.Contract contract = 1;
inline bool PortfolioUpdate::_internal_has_contract() const {
  return this != internal_default_instance() && contract_ != nullptr;
}
inline bool PortfolioUpdate::has_contract() const {
  return _internal_has_contract();
}
inline const ::Jde::Markets::Proto::Contract& PortfolioUpdate::_internal_contract() const {
  const ::Jde::Markets::Proto::Contract* p = contract_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::Contract&>(
      ::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& PortfolioUpdate::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.contract)
  return _internal_contract();
}
inline void PortfolioUpdate::unsafe_arena_set_allocated_contract(
    ::Jde::Markets::Proto::Contract* contract) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  contract_ = contract;
  if (contract) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.PortfolioUpdate.contract)
}
inline ::Jde::Markets::Proto::Contract* PortfolioUpdate::release_contract() {
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::Contract* PortfolioUpdate::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.PortfolioUpdate.contract)
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Contract* PortfolioUpdate::_internal_mutable_contract() {
  
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Contract>(GetArenaForAllocation());
    contract_ = p;
  }
  return contract_;
}
inline ::Jde::Markets::Proto::Contract* PortfolioUpdate::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.PortfolioUpdate.contract)
  return _internal_mutable_contract();
}
inline void PortfolioUpdate::set_allocated_contract(::Jde::Markets::Proto::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract));
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    
  } else {
    
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.PortfolioUpdate.contract)
}

// double position = 2;
inline void PortfolioUpdate::clear_position() {
  position_ = 0;
}
inline double PortfolioUpdate::_internal_position() const {
  return position_;
}
inline double PortfolioUpdate::position() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.position)
  return _internal_position();
}
inline void PortfolioUpdate::_internal_set_position(double value) {
  
  position_ = value;
}
inline void PortfolioUpdate::set_position(double value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.position)
}

// double market_price = 3;
inline void PortfolioUpdate::clear_market_price() {
  market_price_ = 0;
}
inline double PortfolioUpdate::_internal_market_price() const {
  return market_price_;
}
inline double PortfolioUpdate::market_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.market_price)
  return _internal_market_price();
}
inline void PortfolioUpdate::_internal_set_market_price(double value) {
  
  market_price_ = value;
}
inline void PortfolioUpdate::set_market_price(double value) {
  _internal_set_market_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.market_price)
}

// double market_value = 4;
inline void PortfolioUpdate::clear_market_value() {
  market_value_ = 0;
}
inline double PortfolioUpdate::_internal_market_value() const {
  return market_value_;
}
inline double PortfolioUpdate::market_value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.market_value)
  return _internal_market_value();
}
inline void PortfolioUpdate::_internal_set_market_value(double value) {
  
  market_value_ = value;
}
inline void PortfolioUpdate::set_market_value(double value) {
  _internal_set_market_value(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.market_value)
}

// double average_cost = 5;
inline void PortfolioUpdate::clear_average_cost() {
  average_cost_ = 0;
}
inline double PortfolioUpdate::_internal_average_cost() const {
  return average_cost_;
}
inline double PortfolioUpdate::average_cost() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.average_cost)
  return _internal_average_cost();
}
inline void PortfolioUpdate::_internal_set_average_cost(double value) {
  
  average_cost_ = value;
}
inline void PortfolioUpdate::set_average_cost(double value) {
  _internal_set_average_cost(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.average_cost)
}

// double unrealized_pnl = 6;
inline void PortfolioUpdate::clear_unrealized_pnl() {
  unrealized_pnl_ = 0;
}
inline double PortfolioUpdate::_internal_unrealized_pnl() const {
  return unrealized_pnl_;
}
inline double PortfolioUpdate::unrealized_pnl() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.unrealized_pnl)
  return _internal_unrealized_pnl();
}
inline void PortfolioUpdate::_internal_set_unrealized_pnl(double value) {
  
  unrealized_pnl_ = value;
}
inline void PortfolioUpdate::set_unrealized_pnl(double value) {
  _internal_set_unrealized_pnl(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.unrealized_pnl)
}

// double realized_pnl = 7;
inline void PortfolioUpdate::clear_realized_pnl() {
  realized_pnl_ = 0;
}
inline double PortfolioUpdate::_internal_realized_pnl() const {
  return realized_pnl_;
}
inline double PortfolioUpdate::realized_pnl() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.realized_pnl)
  return _internal_realized_pnl();
}
inline void PortfolioUpdate::_internal_set_realized_pnl(double value) {
  
  realized_pnl_ = value;
}
inline void PortfolioUpdate::set_realized_pnl(double value) {
  _internal_set_realized_pnl(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.realized_pnl)
}

// string account_number = 8;
inline void PortfolioUpdate::clear_account_number() {
  account_number_.ClearToEmpty();
}
inline const std::string& PortfolioUpdate::account_number() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.PortfolioUpdate.account_number)
  return _internal_account_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PortfolioUpdate::set_account_number(ArgT0&& arg0, ArgT... args) {
 
 account_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.PortfolioUpdate.account_number)
}
inline std::string* PortfolioUpdate::mutable_account_number() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.PortfolioUpdate.account_number)
  return _internal_mutable_account_number();
}
inline const std::string& PortfolioUpdate::_internal_account_number() const {
  return account_number_.Get();
}
inline void PortfolioUpdate::_internal_set_account_number(const std::string& value) {
  
  account_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PortfolioUpdate::_internal_mutable_account_number() {
  
  return account_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PortfolioUpdate::release_account_number() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.PortfolioUpdate.account_number)
  return account_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PortfolioUpdate::set_allocated_account_number(std::string* account_number) {
  if (account_number != nullptr) {
    
  } else {
    
  }
  account_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.PortfolioUpdate.account_number)
}

// -------------------------------------------------------------------

// FlexOrder

// uint32 order_id = 2;
inline void FlexOrder::clear_order_id() {
  order_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlexOrder::_internal_order_id() const {
  return order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlexOrder::order_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.FlexOrder.order_id)
  return _internal_order_id();
}
inline void FlexOrder::_internal_set_order_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  order_id_ = value;
}
inline void FlexOrder::set_order_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.FlexOrder.order_id)
}

// string account_number = 3;
inline void FlexOrder::clear_account_number() {
  account_number_.ClearToEmpty();
}
inline const std::string& FlexOrder::account_number() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.FlexOrder.account_number)
  return _internal_account_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlexOrder::set_account_number(ArgT0&& arg0, ArgT... args) {
 
 account_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.FlexOrder.account_number)
}
inline std::string* FlexOrder::mutable_account_number() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.FlexOrder.account_number)
  return _internal_mutable_account_number();
}
inline const std::string& FlexOrder::_internal_account_number() const {
  return account_number_.Get();
}
inline void FlexOrder::_internal_set_account_number(const std::string& value) {
  
  account_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlexOrder::_internal_mutable_account_number() {
  
  return account_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlexOrder::release_account_number() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.FlexOrder.account_number)
  return account_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlexOrder::set_allocated_account_number(std::string* account_number) {
  if (account_number != nullptr) {
    
  } else {
    
  }
  account_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.FlexOrder.account_number)
}

// uint32 time = 4;
inline void FlexOrder::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlexOrder::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlexOrder::time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.FlexOrder.time)
  return _internal_time();
}
inline void FlexOrder::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void FlexOrder::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.FlexOrder.time)
}

// string side = 5;
inline void FlexOrder::clear_side() {
  side_.ClearToEmpty();
}
inline const std::string& FlexOrder::side() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.FlexOrder.side)
  return _internal_side();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlexOrder::set_side(ArgT0&& arg0, ArgT... args) {
 
 side_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.FlexOrder.side)
}
inline std::string* FlexOrder::mutable_side() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.FlexOrder.side)
  return _internal_mutable_side();
}
inline const std::string& FlexOrder::_internal_side() const {
  return side_.Get();
}
inline void FlexOrder::_internal_set_side(const std::string& value) {
  
  side_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlexOrder::_internal_mutable_side() {
  
  return side_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlexOrder::release_side() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.FlexOrder.side)
  return side_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlexOrder::set_allocated_side(std::string* side) {
  if (side != nullptr) {
    
  } else {
    
  }
  side_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), side,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.FlexOrder.side)
}

// double shares = 6;
inline void FlexOrder::clear_shares() {
  shares_ = 0;
}
inline double FlexOrder::_internal_shares() const {
  return shares_;
}
inline double FlexOrder::shares() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.FlexOrder.shares)
  return _internal_shares();
}
inline void FlexOrder::_internal_set_shares(double value) {
  
  shares_ = value;
}
inline void FlexOrder::set_shares(double value) {
  _internal_set_shares(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.FlexOrder.shares)
}

// double price = 7;
inline void FlexOrder::clear_price() {
  price_ = 0;
}
inline double FlexOrder::_internal_price() const {
  return price_;
}
inline double FlexOrder::price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.FlexOrder.price)
  return _internal_price();
}
inline void FlexOrder::_internal_set_price(double value) {
  
  price_ = value;
}
inline void FlexOrder::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.FlexOrder.price)
}

// .Jde.Markets.Proto.Contract contract = 9;
inline bool FlexOrder::_internal_has_contract() const {
  return this != internal_default_instance() && contract_ != nullptr;
}
inline bool FlexOrder::has_contract() const {
  return _internal_has_contract();
}
inline const ::Jde::Markets::Proto::Contract& FlexOrder::_internal_contract() const {
  const ::Jde::Markets::Proto::Contract* p = contract_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::Contract&>(
      ::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& FlexOrder::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.FlexOrder.contract)
  return _internal_contract();
}
inline void FlexOrder::unsafe_arena_set_allocated_contract(
    ::Jde::Markets::Proto::Contract* contract) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  contract_ = contract;
  if (contract) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.FlexOrder.contract)
}
inline ::Jde::Markets::Proto::Contract* FlexOrder::release_contract() {
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::Contract* FlexOrder::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.FlexOrder.contract)
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Contract* FlexOrder::_internal_mutable_contract() {
  
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Contract>(GetArenaForAllocation());
    contract_ = p;
  }
  return contract_;
}
inline ::Jde::Markets::Proto::Contract* FlexOrder::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.FlexOrder.contract)
  return _internal_mutable_contract();
}
inline void FlexOrder::set_allocated_contract(::Jde::Markets::Proto::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract));
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    
  } else {
    
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.FlexOrder.contract)
}

// double commission = 10;
inline void FlexOrder::clear_commission() {
  commission_ = 0;
}
inline double FlexOrder::_internal_commission() const {
  return commission_;
}
inline double FlexOrder::commission() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.FlexOrder.commission)
  return _internal_commission();
}
inline void FlexOrder::_internal_set_commission(double value) {
  
  commission_ = value;
}
inline void FlexOrder::set_commission(double value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.FlexOrder.commission)
}

// string order_type = 11;
inline void FlexOrder::clear_order_type() {
  order_type_.ClearToEmpty();
}
inline const std::string& FlexOrder::order_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.FlexOrder.order_type)
  return _internal_order_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FlexOrder::set_order_type(ArgT0&& arg0, ArgT... args) {
 
 order_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.FlexOrder.order_type)
}
inline std::string* FlexOrder::mutable_order_type() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.FlexOrder.order_type)
  return _internal_mutable_order_type();
}
inline const std::string& FlexOrder::_internal_order_type() const {
  return order_type_.Get();
}
inline void FlexOrder::_internal_set_order_type(const std::string& value) {
  
  order_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FlexOrder::_internal_mutable_order_type() {
  
  return order_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FlexOrder::release_order_type() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.FlexOrder.order_type)
  return order_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FlexOrder::set_allocated_order_type(std::string* order_type) {
  if (order_type != nullptr) {
    
  } else {
    
  }
  order_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.FlexOrder.order_type)
}

// uint32 order_time = 12;
inline void FlexOrder::clear_order_time() {
  order_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlexOrder::_internal_order_time() const {
  return order_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlexOrder::order_time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.FlexOrder.order_time)
  return _internal_order_time();
}
inline void FlexOrder::_internal_set_order_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  order_time_ = value;
}
inline void FlexOrder::set_order_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_order_time(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.FlexOrder.order_time)
}

// -------------------------------------------------------------------

// Trade

// uint32 id = 1;
inline void Trade::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.id)
  return _internal_id();
}
inline void Trade::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Trade::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.id)
}

// uint32 order_id = 2;
inline void Trade::clear_order_id() {
  order_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::_internal_order_id() const {
  return order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::order_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.order_id)
  return _internal_order_id();
}
inline void Trade::_internal_set_order_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  order_id_ = value;
}
inline void Trade::set_order_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.order_id)
}

// string account_number = 3;
inline void Trade::clear_account_number() {
  account_number_.ClearToEmpty();
}
inline const std::string& Trade::account_number() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.account_number)
  return _internal_account_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Trade::set_account_number(ArgT0&& arg0, ArgT... args) {
 
 account_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.account_number)
}
inline std::string* Trade::mutable_account_number() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Trade.account_number)
  return _internal_mutable_account_number();
}
inline const std::string& Trade::_internal_account_number() const {
  return account_number_.Get();
}
inline void Trade::_internal_set_account_number(const std::string& value) {
  
  account_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Trade::_internal_mutable_account_number() {
  
  return account_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Trade::release_account_number() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Trade.account_number)
  return account_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Trade::set_allocated_account_number(std::string* account_number) {
  if (account_number != nullptr) {
    
  } else {
    
  }
  account_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Trade.account_number)
}

// uint32 time = 4;
inline void Trade::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.time)
  return _internal_time();
}
inline void Trade::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void Trade::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.time)
}

// string side = 5;
inline void Trade::clear_side() {
  side_.ClearToEmpty();
}
inline const std::string& Trade::side() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.side)
  return _internal_side();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Trade::set_side(ArgT0&& arg0, ArgT... args) {
 
 side_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.side)
}
inline std::string* Trade::mutable_side() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Trade.side)
  return _internal_mutable_side();
}
inline const std::string& Trade::_internal_side() const {
  return side_.Get();
}
inline void Trade::_internal_set_side(const std::string& value) {
  
  side_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Trade::_internal_mutable_side() {
  
  return side_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Trade::release_side() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Trade.side)
  return side_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Trade::set_allocated_side(std::string* side) {
  if (side != nullptr) {
    
  } else {
    
  }
  side_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), side,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Trade.side)
}

// double shares = 6;
inline void Trade::clear_shares() {
  shares_ = 0;
}
inline double Trade::_internal_shares() const {
  return shares_;
}
inline double Trade::shares() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.shares)
  return _internal_shares();
}
inline void Trade::_internal_set_shares(double value) {
  
  shares_ = value;
}
inline void Trade::set_shares(double value) {
  _internal_set_shares(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.shares)
}

// double price = 7;
inline void Trade::clear_price() {
  price_ = 0;
}
inline double Trade::_internal_price() const {
  return price_;
}
inline double Trade::price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.price)
  return _internal_price();
}
inline void Trade::_internal_set_price(double value) {
  
  price_ = value;
}
inline void Trade::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.price)
}

// string exec_id = 8;
inline void Trade::clear_exec_id() {
  exec_id_.ClearToEmpty();
}
inline const std::string& Trade::exec_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.exec_id)
  return _internal_exec_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Trade::set_exec_id(ArgT0&& arg0, ArgT... args) {
 
 exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.exec_id)
}
inline std::string* Trade::mutable_exec_id() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Trade.exec_id)
  return _internal_mutable_exec_id();
}
inline const std::string& Trade::_internal_exec_id() const {
  return exec_id_.Get();
}
inline void Trade::_internal_set_exec_id(const std::string& value) {
  
  exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Trade::_internal_mutable_exec_id() {
  
  return exec_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Trade::release_exec_id() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Trade.exec_id)
  return exec_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Trade::set_allocated_exec_id(std::string* exec_id) {
  if (exec_id != nullptr) {
    
  } else {
    
  }
  exec_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exec_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Trade.exec_id)
}

// .Jde.Markets.Proto.Contract contract = 9;
inline bool Trade::_internal_has_contract() const {
  return this != internal_default_instance() && contract_ != nullptr;
}
inline bool Trade::has_contract() const {
  return _internal_has_contract();
}
inline const ::Jde::Markets::Proto::Contract& Trade::_internal_contract() const {
  const ::Jde::Markets::Proto::Contract* p = contract_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::Contract&>(
      ::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& Trade::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.contract)
  return _internal_contract();
}
inline void Trade::unsafe_arena_set_allocated_contract(
    ::Jde::Markets::Proto::Contract* contract) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  contract_ = contract;
  if (contract) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.Trade.contract)
}
inline ::Jde::Markets::Proto::Contract* Trade::release_contract() {
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::Contract* Trade::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Trade.contract)
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Contract* Trade::_internal_mutable_contract() {
  
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Contract>(GetArenaForAllocation());
    contract_ = p;
  }
  return contract_;
}
inline ::Jde::Markets::Proto::Contract* Trade::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Trade.contract)
  return _internal_mutable_contract();
}
inline void Trade::set_allocated_contract(::Jde::Markets::Proto::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract));
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    
  } else {
    
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Trade.contract)
}

// double commission = 10;
inline void Trade::clear_commission() {
  commission_ = 0;
}
inline double Trade::_internal_commission() const {
  return commission_;
}
inline double Trade::commission() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.commission)
  return _internal_commission();
}
inline void Trade::_internal_set_commission(double value) {
  
  commission_ = value;
}
inline void Trade::set_commission(double value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.commission)
}

// string order_type = 11;
inline void Trade::clear_order_type() {
  order_type_.ClearToEmpty();
}
inline const std::string& Trade::order_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.order_type)
  return _internal_order_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Trade::set_order_type(ArgT0&& arg0, ArgT... args) {
 
 order_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.order_type)
}
inline std::string* Trade::mutable_order_type() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Trade.order_type)
  return _internal_mutable_order_type();
}
inline const std::string& Trade::_internal_order_type() const {
  return order_type_.Get();
}
inline void Trade::_internal_set_order_type(const std::string& value) {
  
  order_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Trade::_internal_mutable_order_type() {
  
  return order_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Trade::release_order_type() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Trade.order_type)
  return order_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Trade::set_allocated_order_type(std::string* order_type) {
  if (order_type != nullptr) {
    
  } else {
    
  }
  order_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Trade.order_type)
}

// uint32 order_time = 12;
inline void Trade::clear_order_time() {
  order_time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::_internal_order_time() const {
  return order_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Trade::order_time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.order_time)
  return _internal_order_time();
}
inline void Trade::_internal_set_order_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  order_time_ = value;
}
inline void Trade::set_order_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_order_time(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.order_time)
}

// bool is_api = 13;
inline void Trade::clear_is_api() {
  is_api_ = false;
}
inline bool Trade::_internal_is_api() const {
  return is_api_;
}
inline bool Trade::is_api() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Trade.is_api)
  return _internal_is_api();
}
inline void Trade::_internal_set_is_api(bool value) {
  
  is_api_ = value;
}
inline void Trade::set_is_api(bool value) {
  _internal_set_is_api(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Trade.is_api)
}

// -------------------------------------------------------------------

// Execution

// uint32 id = 1;
inline void Execution::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Execution::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Execution::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.id)
  return _internal_id();
}
inline void Execution::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Execution::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.id)
}

// uint32 order_id = 2;
inline void Execution::clear_order_id() {
  order_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Execution::_internal_order_id() const {
  return order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Execution::order_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.order_id)
  return _internal_order_id();
}
inline void Execution::_internal_set_order_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  order_id_ = value;
}
inline void Execution::set_order_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.order_id)
}

// string account_number = 3;
inline void Execution::clear_account_number() {
  account_number_.ClearToEmpty();
}
inline const std::string& Execution::account_number() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.account_number)
  return _internal_account_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Execution::set_account_number(ArgT0&& arg0, ArgT... args) {
 
 account_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.account_number)
}
inline std::string* Execution::mutable_account_number() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Execution.account_number)
  return _internal_mutable_account_number();
}
inline const std::string& Execution::_internal_account_number() const {
  return account_number_.Get();
}
inline void Execution::_internal_set_account_number(const std::string& value) {
  
  account_number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Execution::_internal_mutable_account_number() {
  
  return account_number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Execution::release_account_number() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Execution.account_number)
  return account_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Execution::set_allocated_account_number(std::string* account_number) {
  if (account_number != nullptr) {
    
  } else {
    
  }
  account_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_number,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Execution.account_number)
}

// uint32 time = 4;
inline void Execution::clear_time() {
  time_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Execution::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Execution::time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.time)
  return _internal_time();
}
inline void Execution::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_ = value;
}
inline void Execution::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.time)
}

// string side = 5;
inline void Execution::clear_side() {
  side_.ClearToEmpty();
}
inline const std::string& Execution::side() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.side)
  return _internal_side();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Execution::set_side(ArgT0&& arg0, ArgT... args) {
 
 side_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.side)
}
inline std::string* Execution::mutable_side() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Execution.side)
  return _internal_mutable_side();
}
inline const std::string& Execution::_internal_side() const {
  return side_.Get();
}
inline void Execution::_internal_set_side(const std::string& value) {
  
  side_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Execution::_internal_mutable_side() {
  
  return side_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Execution::release_side() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Execution.side)
  return side_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Execution::set_allocated_side(std::string* side) {
  if (side != nullptr) {
    
  } else {
    
  }
  side_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), side,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Execution.side)
}

// double shares = 6;
inline void Execution::clear_shares() {
  shares_ = 0;
}
inline double Execution::_internal_shares() const {
  return shares_;
}
inline double Execution::shares() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.shares)
  return _internal_shares();
}
inline void Execution::_internal_set_shares(double value) {
  
  shares_ = value;
}
inline void Execution::set_shares(double value) {
  _internal_set_shares(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.shares)
}

// double price = 7;
inline void Execution::clear_price() {
  price_ = 0;
}
inline double Execution::_internal_price() const {
  return price_;
}
inline double Execution::price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.price)
  return _internal_price();
}
inline void Execution::_internal_set_price(double value) {
  
  price_ = value;
}
inline void Execution::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.price)
}

// string exec_id = 8;
inline void Execution::clear_exec_id() {
  exec_id_.ClearToEmpty();
}
inline const std::string& Execution::exec_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.exec_id)
  return _internal_exec_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Execution::set_exec_id(ArgT0&& arg0, ArgT... args) {
 
 exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.exec_id)
}
inline std::string* Execution::mutable_exec_id() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Execution.exec_id)
  return _internal_mutable_exec_id();
}
inline const std::string& Execution::_internal_exec_id() const {
  return exec_id_.Get();
}
inline void Execution::_internal_set_exec_id(const std::string& value) {
  
  exec_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Execution::_internal_mutable_exec_id() {
  
  return exec_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Execution::release_exec_id() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Execution.exec_id)
  return exec_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Execution::set_allocated_exec_id(std::string* exec_id) {
  if (exec_id != nullptr) {
    
  } else {
    
  }
  exec_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exec_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Execution.exec_id)
}

// .Jde.Markets.Proto.Contract contract = 9;
inline bool Execution::_internal_has_contract() const {
  return this != internal_default_instance() && contract_ != nullptr;
}
inline bool Execution::has_contract() const {
  return _internal_has_contract();
}
inline const ::Jde::Markets::Proto::Contract& Execution::_internal_contract() const {
  const ::Jde::Markets::Proto::Contract* p = contract_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::Contract&>(
      ::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& Execution::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.contract)
  return _internal_contract();
}
inline void Execution::unsafe_arena_set_allocated_contract(
    ::Jde::Markets::Proto::Contract* contract) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  contract_ = contract;
  if (contract) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.Execution.contract)
}
inline ::Jde::Markets::Proto::Contract* Execution::release_contract() {
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::Contract* Execution::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Execution.contract)
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Contract* Execution::_internal_mutable_contract() {
  
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Contract>(GetArenaForAllocation());
    contract_ = p;
  }
  return contract_;
}
inline ::Jde::Markets::Proto::Contract* Execution::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Execution.contract)
  return _internal_mutable_contract();
}
inline void Execution::set_allocated_contract(::Jde::Markets::Proto::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract));
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    
  } else {
    
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Execution.contract)
}

// string exchange = 14;
inline void Execution::clear_exchange() {
  exchange_.ClearToEmpty();
}
inline const std::string& Execution::exchange() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.exchange)
  return _internal_exchange();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Execution::set_exchange(ArgT0&& arg0, ArgT... args) {
 
 exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.exchange)
}
inline std::string* Execution::mutable_exchange() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Execution.exchange)
  return _internal_mutable_exchange();
}
inline const std::string& Execution::_internal_exchange() const {
  return exchange_.Get();
}
inline void Execution::_internal_set_exchange(const std::string& value) {
  
  exchange_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Execution::_internal_mutable_exchange() {
  
  return exchange_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Execution::release_exchange() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Execution.exchange)
  return exchange_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Execution::set_allocated_exchange(std::string* exchange) {
  if (exchange != nullptr) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Execution.exchange)
}

// int32 perm_id = 15;
inline void Execution::clear_perm_id() {
  perm_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Execution::_internal_perm_id() const {
  return perm_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Execution::perm_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.perm_id)
  return _internal_perm_id();
}
inline void Execution::_internal_set_perm_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  perm_id_ = value;
}
inline void Execution::set_perm_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_perm_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.perm_id)
}

// uint32 client_id = 16;
inline void Execution::clear_client_id() {
  client_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Execution::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Execution::client_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.client_id)
  return _internal_client_id();
}
inline void Execution::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  client_id_ = value;
}
inline void Execution::set_client_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.client_id)
}

// int32 liquidation = 17;
inline void Execution::clear_liquidation() {
  liquidation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Execution::_internal_liquidation() const {
  return liquidation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Execution::liquidation() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.liquidation)
  return _internal_liquidation();
}
inline void Execution::_internal_set_liquidation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  liquidation_ = value;
}
inline void Execution::set_liquidation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_liquidation(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.liquidation)
}

// double cumulative_quantity = 18;
inline void Execution::clear_cumulative_quantity() {
  cumulative_quantity_ = 0;
}
inline double Execution::_internal_cumulative_quantity() const {
  return cumulative_quantity_;
}
inline double Execution::cumulative_quantity() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.cumulative_quantity)
  return _internal_cumulative_quantity();
}
inline void Execution::_internal_set_cumulative_quantity(double value) {
  
  cumulative_quantity_ = value;
}
inline void Execution::set_cumulative_quantity(double value) {
  _internal_set_cumulative_quantity(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.cumulative_quantity)
}

// double avg_price = 19;
inline void Execution::clear_avg_price() {
  avg_price_ = 0;
}
inline double Execution::_internal_avg_price() const {
  return avg_price_;
}
inline double Execution::avg_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.avg_price)
  return _internal_avg_price();
}
inline void Execution::_internal_set_avg_price(double value) {
  
  avg_price_ = value;
}
inline void Execution::set_avg_price(double value) {
  _internal_set_avg_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.avg_price)
}

// string order_ref = 20;
inline void Execution::clear_order_ref() {
  order_ref_.ClearToEmpty();
}
inline const std::string& Execution::order_ref() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.order_ref)
  return _internal_order_ref();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Execution::set_order_ref(ArgT0&& arg0, ArgT... args) {
 
 order_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.order_ref)
}
inline std::string* Execution::mutable_order_ref() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Execution.order_ref)
  return _internal_mutable_order_ref();
}
inline const std::string& Execution::_internal_order_ref() const {
  return order_ref_.Get();
}
inline void Execution::_internal_set_order_ref(const std::string& value) {
  
  order_ref_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Execution::_internal_mutable_order_ref() {
  
  return order_ref_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Execution::release_order_ref() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Execution.order_ref)
  return order_ref_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Execution::set_allocated_order_ref(std::string* order_ref) {
  if (order_ref != nullptr) {
    
  } else {
    
  }
  order_ref_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_ref,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Execution.order_ref)
}

// string ev_rule = 21;
inline void Execution::clear_ev_rule() {
  ev_rule_.ClearToEmpty();
}
inline const std::string& Execution::ev_rule() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.ev_rule)
  return _internal_ev_rule();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Execution::set_ev_rule(ArgT0&& arg0, ArgT... args) {
 
 ev_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.ev_rule)
}
inline std::string* Execution::mutable_ev_rule() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Execution.ev_rule)
  return _internal_mutable_ev_rule();
}
inline const std::string& Execution::_internal_ev_rule() const {
  return ev_rule_.Get();
}
inline void Execution::_internal_set_ev_rule(const std::string& value) {
  
  ev_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Execution::_internal_mutable_ev_rule() {
  
  return ev_rule_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Execution::release_ev_rule() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Execution.ev_rule)
  return ev_rule_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Execution::set_allocated_ev_rule(std::string* ev_rule) {
  if (ev_rule != nullptr) {
    
  } else {
    
  }
  ev_rule_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ev_rule,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Execution.ev_rule)
}

// double ev_multiplier = 22;
inline void Execution::clear_ev_multiplier() {
  ev_multiplier_ = 0;
}
inline double Execution::_internal_ev_multiplier() const {
  return ev_multiplier_;
}
inline double Execution::ev_multiplier() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.ev_multiplier)
  return _internal_ev_multiplier();
}
inline void Execution::_internal_set_ev_multiplier(double value) {
  
  ev_multiplier_ = value;
}
inline void Execution::set_ev_multiplier(double value) {
  _internal_set_ev_multiplier(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.ev_multiplier)
}

// string model_code = 23;
inline void Execution::clear_model_code() {
  model_code_.ClearToEmpty();
}
inline const std::string& Execution::model_code() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.model_code)
  return _internal_model_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Execution::set_model_code(ArgT0&& arg0, ArgT... args) {
 
 model_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.model_code)
}
inline std::string* Execution::mutable_model_code() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Execution.model_code)
  return _internal_mutable_model_code();
}
inline const std::string& Execution::_internal_model_code() const {
  return model_code_.Get();
}
inline void Execution::_internal_set_model_code(const std::string& value) {
  
  model_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Execution::_internal_mutable_model_code() {
  
  return model_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Execution::release_model_code() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Execution.model_code)
  return model_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Execution::set_allocated_model_code(std::string* model_code) {
  if (model_code != nullptr) {
    
  } else {
    
  }
  model_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_code,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Execution.model_code)
}

// int32 last_liquidity = 24;
inline void Execution::clear_last_liquidity() {
  last_liquidity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Execution::_internal_last_liquidity() const {
  return last_liquidity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Execution::last_liquidity() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Execution.last_liquidity)
  return _internal_last_liquidity();
}
inline void Execution::_internal_set_last_liquidity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_liquidity_ = value;
}
inline void Execution::set_last_liquidity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_liquidity(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Execution.last_liquidity)
}

// -------------------------------------------------------------------

// Flex

// uint32 id = 1;
inline void Flex::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Flex::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Flex::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Flex.id)
  return _internal_id();
}
inline void Flex::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Flex::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Flex.id)
}

// repeated .Jde.Markets.Proto.Results.FlexOrder orders = 2;
inline int Flex::_internal_orders_size() const {
  return orders_.size();
}
inline int Flex::orders_size() const {
  return _internal_orders_size();
}
inline void Flex::clear_orders() {
  orders_.Clear();
}
inline ::Jde::Markets::Proto::Results::FlexOrder* Flex::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Flex.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::FlexOrder >*
Flex::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.Flex.orders)
  return &orders_;
}
inline const ::Jde::Markets::Proto::Results::FlexOrder& Flex::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::FlexOrder& Flex::orders(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Flex.orders)
  return _internal_orders(index);
}
inline ::Jde::Markets::Proto::Results::FlexOrder* Flex::_internal_add_orders() {
  return orders_.Add();
}
inline ::Jde::Markets::Proto::Results::FlexOrder* Flex::add_orders() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.Flex.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::FlexOrder >&
Flex::orders() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.Flex.orders)
  return orders_;
}

// repeated .Jde.Markets.Proto.Results.Trade trades = 3;
inline int Flex::_internal_trades_size() const {
  return trades_.size();
}
inline int Flex::trades_size() const {
  return _internal_trades_size();
}
inline void Flex::clear_trades() {
  trades_.Clear();
}
inline ::Jde::Markets::Proto::Results::Trade* Flex::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Flex.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Trade >*
Flex::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.Flex.trades)
  return &trades_;
}
inline const ::Jde::Markets::Proto::Results::Trade& Flex::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::Trade& Flex::trades(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Flex.trades)
  return _internal_trades(index);
}
inline ::Jde::Markets::Proto::Results::Trade* Flex::_internal_add_trades() {
  return trades_.Add();
}
inline ::Jde::Markets::Proto::Results::Trade* Flex::add_trades() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.Flex.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Trade >&
Flex::trades() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.Flex.trades)
  return trades_;
}

// -------------------------------------------------------------------

// Error

// uint32 request_id = 1;
inline void Error::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Error::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Error::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Error.request_id)
  return _internal_request_id();
}
inline void Error::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void Error::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Error.request_id)
}

// int32 code = 2;
inline void Error::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Error::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Error::code() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Error.code)
  return _internal_code();
}
inline void Error::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void Error::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Error.code)
}

// string message = 3;
inline void Error::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Error.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Error::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Error.message)
}
inline std::string* Error::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Error.message)
  return _internal_mutable_message();
}
inline const std::string& Error::_internal_message() const {
  return message_.Get();
}
inline void Error::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Error::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Error.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Error::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Error.message)
}

// -------------------------------------------------------------------

// Option

// uint32 id = 1;
inline void Option::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Option::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Option::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.id)
  return _internal_id();
}
inline void Option::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void Option::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.id)
}

// float strike = 2;
inline void Option::clear_strike() {
  strike_ = 0;
}
inline float Option::_internal_strike() const {
  return strike_;
}
inline float Option::strike() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.strike)
  return _internal_strike();
}
inline void Option::_internal_set_strike(float value) {
  
  strike_ = value;
}
inline void Option::set_strike(float value) {
  _internal_set_strike(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.strike)
}

// float bid = 3;
inline void Option::clear_bid() {
  bid_ = 0;
}
inline float Option::_internal_bid() const {
  return bid_;
}
inline float Option::bid() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.bid)
  return _internal_bid();
}
inline void Option::_internal_set_bid(float value) {
  
  bid_ = value;
}
inline void Option::set_bid(float value) {
  _internal_set_bid(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.bid)
}

// float ask = 4;
inline void Option::clear_ask() {
  ask_ = 0;
}
inline float Option::_internal_ask() const {
  return ask_;
}
inline float Option::ask() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.ask)
  return _internal_ask();
}
inline void Option::_internal_set_ask(float value) {
  
  ask_ = value;
}
inline void Option::set_ask(float value) {
  _internal_set_ask(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.ask)
}

// float last = 5;
inline void Option::clear_last() {
  last_ = 0;
}
inline float Option::_internal_last() const {
  return last_;
}
inline float Option::last() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.last)
  return _internal_last();
}
inline void Option::_internal_set_last(float value) {
  
  last_ = value;
}
inline void Option::set_last(float value) {
  _internal_set_last(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.last)
}

// uint32 volume = 6;
inline void Option::clear_volume() {
  volume_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Option::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Option::volume() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.volume)
  return _internal_volume();
}
inline void Option::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  volume_ = value;
}
inline void Option::set_volume(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.volume)
}

// uint32 open_interest = 7;
inline void Option::clear_open_interest() {
  open_interest_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Option::_internal_open_interest() const {
  return open_interest_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Option::open_interest() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.open_interest)
  return _internal_open_interest();
}
inline void Option::_internal_set_open_interest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  open_interest_ = value;
}
inline void Option::set_open_interest(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_open_interest(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.open_interest)
}

// int32 oi_change = 8;
inline void Option::clear_oi_change() {
  oi_change_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Option::_internal_oi_change() const {
  return oi_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Option::oi_change() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.oi_change)
  return _internal_oi_change();
}
inline void Option::_internal_set_oi_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  oi_change_ = value;
}
inline void Option::set_oi_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_oi_change(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.oi_change)
}

// float previous_price = 9;
inline void Option::clear_previous_price() {
  previous_price_ = 0;
}
inline float Option::_internal_previous_price() const {
  return previous_price_;
}
inline float Option::previous_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Option.previous_price)
  return _internal_previous_price();
}
inline void Option::_internal_set_previous_price(float value) {
  
  previous_price_ = value;
}
inline void Option::set_previous_price(float value) {
  _internal_set_previous_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Option.previous_price)
}

// -------------------------------------------------------------------

// OptionCalculation

// uint32 request_id = 1;
inline void OptionCalculation::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionCalculation::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionCalculation::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionCalculation.request_id)
  return _internal_request_id();
}
inline void OptionCalculation::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void OptionCalculation::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionCalculation.request_id)
}

// .Jde.Markets.Proto.Results.ETickType tick_type = 2;
inline void OptionCalculation::clear_tick_type() {
  tick_type_ = 0;
}
inline ::Jde::Markets::Proto::Results::ETickType OptionCalculation::_internal_tick_type() const {
  return static_cast< ::Jde::Markets::Proto::Results::ETickType >(tick_type_);
}
inline ::Jde::Markets::Proto::Results::ETickType OptionCalculation::tick_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionCalculation.tick_type)
  return _internal_tick_type();
}
inline void OptionCalculation::_internal_set_tick_type(::Jde::Markets::Proto::Results::ETickType value) {
  
  tick_type_ = value;
}
inline void OptionCalculation::set_tick_type(::Jde::Markets::Proto::Results::ETickType value) {
  _internal_set_tick_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionCalculation.tick_type)
}

// bool price_based = 3;
inline void OptionCalculation::clear_price_based() {
  price_based_ = false;
}
inline bool OptionCalculation::_internal_price_based() const {
  return price_based_;
}
inline bool OptionCalculation::price_based() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionCalculation.price_based)
  return _internal_price_based();
}
inline void OptionCalculation::_internal_set_price_based(bool value) {
  
  price_based_ = value;
}
inline void OptionCalculation::set_price_based(bool value) {
  _internal_set_price_based(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionCalculation.price_based)
}

// double implied_volatility = 4;
inline void OptionCalculation::clear_implied_volatility() {
  implied_volatility_ = 0;
}
inline double OptionCalculation::_internal_implied_volatility() const {
  return implied_volatility_;
}
inline double OptionCalculation::implied_volatility() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionCalculation.implied_volatility)
  return _internal_implied_volatility();
}
inline void OptionCalculation::_internal_set_implied_volatility(double value) {
  
  implied_volatility_ = value;
}
inline void OptionCalculation::set_implied_volatility(double value) {
  _internal_set_implied_volatility(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionCalculation.implied_volatility)
}

// double delta = 5;
inline void OptionCalculation::clear_delta() {
  delta_ = 0;
}
inline double OptionCalculation::_internal_delta() const {
  return delta_;
}
inline double OptionCalculation::delta() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionCalculation.delta)
  return _internal_delta();
}
inline void OptionCalculation::_internal_set_delta(double value) {
  
  delta_ = value;
}
inline void OptionCalculation::set_delta(double value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionCalculation.delta)
}

// double option_price = 6;
inline void OptionCalculation::clear_option_price() {
  option_price_ = 0;
}
inline double OptionCalculation::_internal_option_price() const {
  return option_price_;
}
inline double OptionCalculation::option_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionCalculation.option_price)
  return _internal_option_price();
}
inline void OptionCalculation::_internal_set_option_price(double value) {
  
  option_price_ = value;
}
inline void OptionCalculation::set_option_price(double value) {
  _internal_set_option_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionCalculation.option_price)
}

// double pv_dividend = 7;
inline void OptionCalculation::clear_pv_dividend() {
  pv_dividend_ = 0;
}
inline double OptionCalculation::_internal_pv_dividend() const {
  return pv_dividend_;
}
inline double OptionCalculation::pv_dividend() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionCalculation.pv_dividend)
  return _internal_pv_dividend();
}
inline void OptionCalculation::_internal_set_pv_dividend(double value) {
  
  pv_dividend_ = value;
}
inline void OptionCalculation::set_pv_dividend(double value) {
  _internal_set_pv_dividend(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionCalculation.pv_dividend)
}

// double gamma = 8;
inline void OptionCalculation::clear_gamma() {
  gamma_ = 0;
}
inline double OptionCalculation::_internal_gamma() const {
  return gamma_;
}
inline double OptionCalculation::gamma() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionCalculation.gamma)
  return _internal_gamma();
}
inline void OptionCalculation::_internal_set_gamma(double value) {
  
  gamma_ = value;
}
inline void OptionCalculation::set_gamma(double value) {
  _internal_set_gamma(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionCalculation.gamma)
}

// double vega = 9;
inline void OptionCalculation::clear_vega() {
  vega_ = 0;
}
inline double OptionCalculation::_internal_vega() const {
  return vega_;
}
inline double OptionCalculation::vega() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionCalculation.vega)
  return _internal_vega();
}
inline void OptionCalculation::_internal_set_vega(double value) {
  
  vega_ = value;
}
inline void OptionCalculation::set_vega(double value) {
  _internal_set_vega(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionCalculation.vega)
}

// double theta = 10;
inline void OptionCalculation::clear_theta() {
  theta_ = 0;
}
inline double OptionCalculation::_internal_theta() const {
  return theta_;
}
inline double OptionCalculation::theta() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionCalculation.theta)
  return _internal_theta();
}
inline void OptionCalculation::_internal_set_theta(double value) {
  
  theta_ = value;
}
inline void OptionCalculation::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionCalculation.theta)
}

// double underlying_price = 11;
inline void OptionCalculation::clear_underlying_price() {
  underlying_price_ = 0;
}
inline double OptionCalculation::_internal_underlying_price() const {
  return underlying_price_;
}
inline double OptionCalculation::underlying_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionCalculation.underlying_price)
  return _internal_underlying_price();
}
inline void OptionCalculation::_internal_set_underlying_price(double value) {
  
  underlying_price_ = value;
}
inline void OptionCalculation::set_underlying_price(double value) {
  _internal_set_underlying_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionCalculation.underlying_price)
}

// -------------------------------------------------------------------

// OptionDay

// bool is_call = 1;
inline void OptionDay::clear_is_call() {
  is_call_ = false;
}
inline bool OptionDay::_internal_is_call() const {
  return is_call_;
}
inline bool OptionDay::is_call() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionDay.is_call)
  return _internal_is_call();
}
inline void OptionDay::_internal_set_is_call(bool value) {
  
  is_call_ = value;
}
inline void OptionDay::set_is_call(bool value) {
  _internal_set_is_call(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionDay.is_call)
}

// uint32 expiration_days = 2;
inline void OptionDay::clear_expiration_days() {
  expiration_days_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionDay::_internal_expiration_days() const {
  return expiration_days_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionDay::expiration_days() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionDay.expiration_days)
  return _internal_expiration_days();
}
inline void OptionDay::_internal_set_expiration_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiration_days_ = value;
}
inline void OptionDay::set_expiration_days(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiration_days(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionDay.expiration_days)
}

// repeated .Jde.Markets.Proto.Results.Option values = 3;
inline int OptionDay::_internal_values_size() const {
  return values_.size();
}
inline int OptionDay::values_size() const {
  return _internal_values_size();
}
inline void OptionDay::clear_values() {
  values_.Clear();
}
inline ::Jde::Markets::Proto::Results::Option* OptionDay::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OptionDay.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Option >*
OptionDay::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.OptionDay.values)
  return &values_;
}
inline const ::Jde::Markets::Proto::Results::Option& OptionDay::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::Option& OptionDay::values(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionDay.values)
  return _internal_values(index);
}
inline ::Jde::Markets::Proto::Results::Option* OptionDay::_internal_add_values() {
  return values_.Add();
}
inline ::Jde::Markets::Proto::Results::Option* OptionDay::add_values() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.OptionDay.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::Option >&
OptionDay::values() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.OptionDay.values)
  return values_;
}

// -------------------------------------------------------------------

// OptionValues

// uint32 id = 1;
inline void OptionValues::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionValues::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionValues::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionValues.id)
  return _internal_id();
}
inline void OptionValues::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void OptionValues::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionValues.id)
}

// uint32 day = 2;
inline void OptionValues::clear_day() {
  day_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionValues::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionValues::day() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionValues.day)
  return _internal_day();
}
inline void OptionValues::_internal_set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  day_ = value;
}
inline void OptionValues::set_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionValues.day)
}

// repeated .Jde.Markets.Proto.Results.OptionDay option_days = 3;
inline int OptionValues::_internal_option_days_size() const {
  return option_days_.size();
}
inline int OptionValues::option_days_size() const {
  return _internal_option_days_size();
}
inline void OptionValues::clear_option_days() {
  option_days_.Clear();
}
inline ::Jde::Markets::Proto::Results::OptionDay* OptionValues::mutable_option_days(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OptionValues.option_days)
  return option_days_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::OptionDay >*
OptionValues::mutable_option_days() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.OptionValues.option_days)
  return &option_days_;
}
inline const ::Jde::Markets::Proto::Results::OptionDay& OptionValues::_internal_option_days(int index) const {
  return option_days_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::OptionDay& OptionValues::option_days(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionValues.option_days)
  return _internal_option_days(index);
}
inline ::Jde::Markets::Proto::Results::OptionDay* OptionValues::_internal_add_option_days() {
  return option_days_.Add();
}
inline ::Jde::Markets::Proto::Results::OptionDay* OptionValues::add_option_days() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.OptionValues.option_days)
  return _internal_add_option_days();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::OptionDay >&
OptionValues::option_days() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.OptionValues.option_days)
  return option_days_;
}

// -------------------------------------------------------------------

// OrderStatus

// int32 id = 1;
inline void OrderStatus::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderStatus::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderStatus::id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderStatus.id)
  return _internal_id();
}
inline void OrderStatus::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void OrderStatus::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderStatus.id)
}

// int32 order_id = 2;
inline void OrderStatus::clear_order_id() {
  order_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderStatus::_internal_order_id() const {
  return order_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderStatus::order_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderStatus.order_id)
  return _internal_order_id();
}
inline void OrderStatus::_internal_set_order_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_id_ = value;
}
inline void OrderStatus::set_order_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderStatus.order_id)
}

// .Jde.Markets.Proto.Results.EOrderStatus status = 3;
inline void OrderStatus::clear_status() {
  status_ = 0;
}
inline ::Jde::Markets::Proto::Results::EOrderStatus OrderStatus::_internal_status() const {
  return static_cast< ::Jde::Markets::Proto::Results::EOrderStatus >(status_);
}
inline ::Jde::Markets::Proto::Results::EOrderStatus OrderStatus::status() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderStatus.status)
  return _internal_status();
}
inline void OrderStatus::_internal_set_status(::Jde::Markets::Proto::Results::EOrderStatus value) {
  
  status_ = value;
}
inline void OrderStatus::set_status(::Jde::Markets::Proto::Results::EOrderStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderStatus.status)
}

// double filled = 4;
inline void OrderStatus::clear_filled() {
  filled_ = 0;
}
inline double OrderStatus::_internal_filled() const {
  return filled_;
}
inline double OrderStatus::filled() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderStatus.filled)
  return _internal_filled();
}
inline void OrderStatus::_internal_set_filled(double value) {
  
  filled_ = value;
}
inline void OrderStatus::set_filled(double value) {
  _internal_set_filled(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderStatus.filled)
}

// double remaining = 5;
inline void OrderStatus::clear_remaining() {
  remaining_ = 0;
}
inline double OrderStatus::_internal_remaining() const {
  return remaining_;
}
inline double OrderStatus::remaining() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderStatus.remaining)
  return _internal_remaining();
}
inline void OrderStatus::_internal_set_remaining(double value) {
  
  remaining_ = value;
}
inline void OrderStatus::set_remaining(double value) {
  _internal_set_remaining(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderStatus.remaining)
}

// double average_fill_price = 6;
inline void OrderStatus::clear_average_fill_price() {
  average_fill_price_ = 0;
}
inline double OrderStatus::_internal_average_fill_price() const {
  return average_fill_price_;
}
inline double OrderStatus::average_fill_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderStatus.average_fill_price)
  return _internal_average_fill_price();
}
inline void OrderStatus::_internal_set_average_fill_price(double value) {
  
  average_fill_price_ = value;
}
inline void OrderStatus::set_average_fill_price(double value) {
  _internal_set_average_fill_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderStatus.average_fill_price)
}

// int32 perm_id = 7;
inline void OrderStatus::clear_perm_id() {
  perm_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderStatus::_internal_perm_id() const {
  return perm_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderStatus::perm_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderStatus.perm_id)
  return _internal_perm_id();
}
inline void OrderStatus::_internal_set_perm_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  perm_id_ = value;
}
inline void OrderStatus::set_perm_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_perm_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderStatus.perm_id)
}

// int32 parent_id = 8;
inline void OrderStatus::clear_parent_id() {
  parent_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderStatus::_internal_parent_id() const {
  return parent_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderStatus::parent_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderStatus.parent_id)
  return _internal_parent_id();
}
inline void OrderStatus::_internal_set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parent_id_ = value;
}
inline void OrderStatus::set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parent_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderStatus.parent_id)
}

// double last_fill_price = 9;
inline void OrderStatus::clear_last_fill_price() {
  last_fill_price_ = 0;
}
inline double OrderStatus::_internal_last_fill_price() const {
  return last_fill_price_;
}
inline double OrderStatus::last_fill_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderStatus.last_fill_price)
  return _internal_last_fill_price();
}
inline void OrderStatus::_internal_set_last_fill_price(double value) {
  
  last_fill_price_ = value;
}
inline void OrderStatus::set_last_fill_price(double value) {
  _internal_set_last_fill_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderStatus.last_fill_price)
}

// int32 client_id = 10;
inline void OrderStatus::clear_client_id() {
  client_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderStatus::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OrderStatus::client_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderStatus.client_id)
  return _internal_client_id();
}
inline void OrderStatus::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_id_ = value;
}
inline void OrderStatus::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderStatus.client_id)
}

// string why_held = 11;
inline void OrderStatus::clear_why_held() {
  why_held_.ClearToEmpty();
}
inline const std::string& OrderStatus::why_held() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderStatus.why_held)
  return _internal_why_held();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderStatus::set_why_held(ArgT0&& arg0, ArgT... args) {
 
 why_held_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderStatus.why_held)
}
inline std::string* OrderStatus::mutable_why_held() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderStatus.why_held)
  return _internal_mutable_why_held();
}
inline const std::string& OrderStatus::_internal_why_held() const {
  return why_held_.Get();
}
inline void OrderStatus::_internal_set_why_held(const std::string& value) {
  
  why_held_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderStatus::_internal_mutable_why_held() {
  
  return why_held_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderStatus::release_why_held() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderStatus.why_held)
  return why_held_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderStatus::set_allocated_why_held(std::string* why_held) {
  if (why_held != nullptr) {
    
  } else {
    
  }
  why_held_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), why_held,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderStatus.why_held)
}

// double market_cap_price = 12;
inline void OrderStatus::clear_market_cap_price() {
  market_cap_price_ = 0;
}
inline double OrderStatus::_internal_market_cap_price() const {
  return market_cap_price_;
}
inline double OrderStatus::market_cap_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderStatus.market_cap_price)
  return _internal_market_cap_price();
}
inline void OrderStatus::_internal_set_market_cap_price(double value) {
  
  market_cap_price_ = value;
}
inline void OrderStatus::set_market_cap_price(double value) {
  _internal_set_market_cap_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderStatus.market_cap_price)
}

// -------------------------------------------------------------------

// StringList

// uint32 request_id = 1;
inline void StringList::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StringList::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StringList::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.StringList.request_id)
  return _internal_request_id();
}
inline void StringList::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void StringList::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.StringList.request_id)
}

// repeated string values = 2;
inline int StringList::_internal_values_size() const {
  return values_.size();
}
inline int StringList::values_size() const {
  return _internal_values_size();
}
inline void StringList::clear_values() {
  values_.Clear();
}
inline std::string* StringList::add_values() {
  // @@protoc_insertion_point(field_add_mutable:Jde.Markets.Proto.Results.StringList.values)
  return _internal_add_values();
}
inline const std::string& StringList::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& StringList::values(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.StringList.values)
  return _internal_values(index);
}
inline std::string* StringList::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.StringList.values)
  return values_.Mutable(index);
}
inline void StringList::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.StringList.values)
  values_.Mutable(index)->assign(value);
}
inline void StringList::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.StringList.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void StringList::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Jde.Markets.Proto.Results.StringList.values)
}
inline void StringList::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Jde.Markets.Proto.Results.StringList.values)
}
inline std::string* StringList::_internal_add_values() {
  return values_.Add();
}
inline void StringList::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.StringList.values)
}
inline void StringList::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.StringList.values)
}
inline void StringList::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Jde.Markets.Proto.Results.StringList.values)
}
inline void StringList::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Jde.Markets.Proto.Results.StringList.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringList::values() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.StringList.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringList::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.StringList.values)
  return &values_;
}

// -------------------------------------------------------------------

// WatchList

// uint32 request_id = 1;
inline void WatchList::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchList::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 WatchList::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.WatchList.request_id)
  return _internal_request_id();
}
inline void WatchList::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void WatchList::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.WatchList.request_id)
}

// .Jde.Markets.Proto.Watch.File file = 2;
inline bool WatchList::_internal_has_file() const {
  return this != internal_default_instance() && file_ != nullptr;
}
inline bool WatchList::has_file() const {
  return _internal_has_file();
}
inline const ::Jde::Markets::Proto::Watch::File& WatchList::_internal_file() const {
  const ::Jde::Markets::Proto::Watch::File* p = file_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::Watch::File&>(
      ::Jde::Markets::Proto::Watch::_File_default_instance_);
}
inline const ::Jde::Markets::Proto::Watch::File& WatchList::file() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.WatchList.file)
  return _internal_file();
}
inline void WatchList::unsafe_arena_set_allocated_file(
    ::Jde::Markets::Proto::Watch::File* file) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_);
  }
  file_ = file;
  if (file) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.WatchList.file)
}
inline ::Jde::Markets::Proto::Watch::File* WatchList::release_file() {
  
  ::Jde::Markets::Proto::Watch::File* temp = file_;
  file_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::Watch::File* WatchList::unsafe_arena_release_file() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.WatchList.file)
  
  ::Jde::Markets::Proto::Watch::File* temp = file_;
  file_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Watch::File* WatchList::_internal_mutable_file() {
  
  if (file_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Watch::File>(GetArenaForAllocation());
    file_ = p;
  }
  return file_;
}
inline ::Jde::Markets::Proto::Watch::File* WatchList::mutable_file() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.WatchList.file)
  return _internal_mutable_file();
}
inline void WatchList::set_allocated_file(::Jde::Markets::Proto::Watch::File* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(file_);
  }
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file));
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    
  } else {
    
  }
  file_ = file;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.WatchList.file)
}

// -------------------------------------------------------------------

// Statistics

// uint32 request_id = 1;
inline void Statistics::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Statistics.request_id)
  return _internal_request_id();
}
inline void Statistics::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void Statistics::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Statistics.request_id)
}

// uint32 count = 2;
inline void Statistics::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Statistics::count() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Statistics.count)
  return _internal_count();
}
inline void Statistics::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void Statistics::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Statistics.count)
}

// double average = 3;
inline void Statistics::clear_average() {
  average_ = 0;
}
inline double Statistics::_internal_average() const {
  return average_;
}
inline double Statistics::average() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Statistics.average)
  return _internal_average();
}
inline void Statistics::_internal_set_average(double value) {
  
  average_ = value;
}
inline void Statistics::set_average(double value) {
  _internal_set_average(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Statistics.average)
}

// double variance = 4;
inline void Statistics::clear_variance() {
  variance_ = 0;
}
inline double Statistics::_internal_variance() const {
  return variance_;
}
inline double Statistics::variance() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Statistics.variance)
  return _internal_variance();
}
inline void Statistics::_internal_set_variance(double value) {
  
  variance_ = value;
}
inline void Statistics::set_variance(double value) {
  _internal_set_variance(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Statistics.variance)
}

// double min = 5;
inline void Statistics::clear_min() {
  min_ = 0;
}
inline double Statistics::_internal_min() const {
  return min_;
}
inline double Statistics::min() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Statistics.min)
  return _internal_min();
}
inline void Statistics::_internal_set_min(double value) {
  
  min_ = value;
}
inline void Statistics::set_min(double value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Statistics.min)
}

// double max = 6;
inline void Statistics::clear_max() {
  max_ = 0;
}
inline double Statistics::_internal_max() const {
  return max_;
}
inline double Statistics::max() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Statistics.max)
  return _internal_max();
}
inline void Statistics::_internal_set_max(double value) {
  
  max_ = value;
}
inline void Statistics::set_max(double value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Statistics.max)
}

// -------------------------------------------------------------------

// Custom

// uint32 request_id = 1;
inline void Custom::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Custom::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Custom::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Custom.request_id)
  return _internal_request_id();
}
inline void Custom::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void Custom::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Custom.request_id)
}

// bytes message = 2;
inline void Custom::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& Custom::message() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Custom.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Custom::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.Custom.message)
}
inline std::string* Custom::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Custom.message)
  return _internal_mutable_message();
}
inline const std::string& Custom::_internal_message() const {
  return message_.Get();
}
inline void Custom::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Custom::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Custom::release_message() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.Custom.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Custom::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.Custom.message)
}

// -------------------------------------------------------------------

// MessageUnion

// .Jde.Markets.Proto.Results.Position position = 1;
inline bool MessageUnion::_internal_has_position() const {
  return Value_case() == kPosition;
}
inline bool MessageUnion::has_position() const {
  return _internal_has_position();
}
inline void MessageUnion::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void MessageUnion::clear_position() {
  if (_internal_has_position()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.position_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::Position* MessageUnion::release_position() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.position)
  if (_internal_has_position()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::Position* temp = Value_.position_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::Position& MessageUnion::_internal_position() const {
  return _internal_has_position()
      ? *Value_.position_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::Position&>(::Jde::Markets::Proto::Results::_Position_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::Position& MessageUnion::position() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.position)
  return _internal_position();
}
inline ::Jde::Markets::Proto::Results::Position* MessageUnion::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.position)
  if (_internal_has_position()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::Position* temp = Value_.position_;
    Value_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_position(::Jde::Markets::Proto::Results::Position* position) {
  clear_Value();
  if (position) {
    set_has_position();
    Value_.position_ = position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.position)
}
inline ::Jde::Markets::Proto::Results::Position* MessageUnion::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_Value();
    set_has_position();
    Value_.position_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::Position >(GetArenaForAllocation());
  }
  return Value_.position_;
}
inline ::Jde::Markets::Proto::Results::Position* MessageUnion::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.position)
  return _internal_mutable_position();
}

// .Jde.Markets.Proto.Contract contract = 2;
inline bool MessageUnion::_internal_has_contract() const {
  return Value_case() == kContract;
}
inline bool MessageUnion::has_contract() const {
  return _internal_has_contract();
}
inline void MessageUnion::set_has_contract() {
  _oneof_case_[0] = kContract;
}
inline ::Jde::Markets::Proto::Contract* MessageUnion::release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.contract)
  if (_internal_has_contract()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Contract* temp = Value_.contract_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Contract& MessageUnion::_internal_contract() const {
  return _internal_has_contract()
      ? *Value_.contract_
      : reinterpret_cast< ::Jde::Markets::Proto::Contract&>(::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& MessageUnion::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.contract)
  return _internal_contract();
}
inline ::Jde::Markets::Proto::Contract* MessageUnion::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.contract)
  if (_internal_has_contract()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Contract* temp = Value_.contract_;
    Value_.contract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_contract(::Jde::Markets::Proto::Contract* contract) {
  clear_Value();
  if (contract) {
    set_has_contract();
    Value_.contract_ = contract;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.contract)
}
inline ::Jde::Markets::Proto::Contract* MessageUnion::_internal_mutable_contract() {
  if (!_internal_has_contract()) {
    clear_Value();
    set_has_contract();
    Value_.contract_ = CreateMaybeMessage< ::Jde::Markets::Proto::Contract >(GetArenaForAllocation());
  }
  return Value_.contract_;
}
inline ::Jde::Markets::Proto::Contract* MessageUnion::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.contract)
  return _internal_mutable_contract();
}

// .Jde.Markets.Proto.Results.MessageValue message = 3;
inline bool MessageUnion::_internal_has_message() const {
  return Value_case() == kMessage;
}
inline bool MessageUnion::has_message() const {
  return _internal_has_message();
}
inline void MessageUnion::set_has_message() {
  _oneof_case_[0] = kMessage;
}
inline void MessageUnion::clear_message() {
  if (_internal_has_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.message_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::MessageValue* MessageUnion::release_message() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.message)
  if (_internal_has_message()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::MessageValue* temp = Value_.message_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::MessageValue& MessageUnion::_internal_message() const {
  return _internal_has_message()
      ? *Value_.message_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::MessageValue&>(::Jde::Markets::Proto::Results::_MessageValue_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::MessageValue& MessageUnion::message() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.message)
  return _internal_message();
}
inline ::Jde::Markets::Proto::Results::MessageValue* MessageUnion::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.message)
  if (_internal_has_message()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::MessageValue* temp = Value_.message_;
    Value_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_message(::Jde::Markets::Proto::Results::MessageValue* message) {
  clear_Value();
  if (message) {
    set_has_message();
    Value_.message_ = message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.message)
}
inline ::Jde::Markets::Proto::Results::MessageValue* MessageUnion::_internal_mutable_message() {
  if (!_internal_has_message()) {
    clear_Value();
    set_has_message();
    Value_.message_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::MessageValue >(GetArenaForAllocation());
  }
  return Value_.message_;
}
inline ::Jde::Markets::Proto::Results::MessageValue* MessageUnion::mutable_message() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.message)
  return _internal_mutable_message();
}

// .Jde.Markets.Proto.Results.StringMap string_map = 4;
inline bool MessageUnion::_internal_has_string_map() const {
  return Value_case() == kStringMap;
}
inline bool MessageUnion::has_string_map() const {
  return _internal_has_string_map();
}
inline void MessageUnion::set_has_string_map() {
  _oneof_case_[0] = kStringMap;
}
inline void MessageUnion::clear_string_map() {
  if (_internal_has_string_map()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.string_map_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::StringMap* MessageUnion::release_string_map() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.string_map)
  if (_internal_has_string_map()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::StringMap* temp = Value_.string_map_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.string_map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::StringMap& MessageUnion::_internal_string_map() const {
  return _internal_has_string_map()
      ? *Value_.string_map_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::StringMap&>(::Jde::Markets::Proto::Results::_StringMap_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::StringMap& MessageUnion::string_map() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.string_map)
  return _internal_string_map();
}
inline ::Jde::Markets::Proto::Results::StringMap* MessageUnion::unsafe_arena_release_string_map() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.string_map)
  if (_internal_has_string_map()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::StringMap* temp = Value_.string_map_;
    Value_.string_map_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_string_map(::Jde::Markets::Proto::Results::StringMap* string_map) {
  clear_Value();
  if (string_map) {
    set_has_string_map();
    Value_.string_map_ = string_map;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.string_map)
}
inline ::Jde::Markets::Proto::Results::StringMap* MessageUnion::_internal_mutable_string_map() {
  if (!_internal_has_string_map()) {
    clear_Value();
    set_has_string_map();
    Value_.string_map_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::StringMap >(GetArenaForAllocation());
  }
  return Value_.string_map_;
}
inline ::Jde::Markets::Proto::Results::StringMap* MessageUnion::mutable_string_map() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.string_map)
  return _internal_mutable_string_map();
}

// .Jde.Markets.Proto.Results.AccountUpdate account_update = 5;
inline bool MessageUnion::_internal_has_account_update() const {
  return Value_case() == kAccountUpdate;
}
inline bool MessageUnion::has_account_update() const {
  return _internal_has_account_update();
}
inline void MessageUnion::set_has_account_update() {
  _oneof_case_[0] = kAccountUpdate;
}
inline void MessageUnion::clear_account_update() {
  if (_internal_has_account_update()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.account_update_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::AccountUpdate* MessageUnion::release_account_update() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.account_update)
  if (_internal_has_account_update()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::AccountUpdate* temp = Value_.account_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.account_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::AccountUpdate& MessageUnion::_internal_account_update() const {
  return _internal_has_account_update()
      ? *Value_.account_update_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::AccountUpdate&>(::Jde::Markets::Proto::Results::_AccountUpdate_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::AccountUpdate& MessageUnion::account_update() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.account_update)
  return _internal_account_update();
}
inline ::Jde::Markets::Proto::Results::AccountUpdate* MessageUnion::unsafe_arena_release_account_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.account_update)
  if (_internal_has_account_update()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::AccountUpdate* temp = Value_.account_update_;
    Value_.account_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_account_update(::Jde::Markets::Proto::Results::AccountUpdate* account_update) {
  clear_Value();
  if (account_update) {
    set_has_account_update();
    Value_.account_update_ = account_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.account_update)
}
inline ::Jde::Markets::Proto::Results::AccountUpdate* MessageUnion::_internal_mutable_account_update() {
  if (!_internal_has_account_update()) {
    clear_Value();
    set_has_account_update();
    Value_.account_update_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::AccountUpdate >(GetArenaForAllocation());
  }
  return Value_.account_update_;
}
inline ::Jde::Markets::Proto::Results::AccountUpdate* MessageUnion::mutable_account_update() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.account_update)
  return _internal_mutable_account_update();
}

// .Jde.Markets.Proto.Results.AccountUpdateMulti account_update_multi = 6;
inline bool MessageUnion::_internal_has_account_update_multi() const {
  return Value_case() == kAccountUpdateMulti;
}
inline bool MessageUnion::has_account_update_multi() const {
  return _internal_has_account_update_multi();
}
inline void MessageUnion::set_has_account_update_multi() {
  _oneof_case_[0] = kAccountUpdateMulti;
}
inline void MessageUnion::clear_account_update_multi() {
  if (_internal_has_account_update_multi()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.account_update_multi_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::AccountUpdateMulti* MessageUnion::release_account_update_multi() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.account_update_multi)
  if (_internal_has_account_update_multi()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::AccountUpdateMulti* temp = Value_.account_update_multi_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.account_update_multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::AccountUpdateMulti& MessageUnion::_internal_account_update_multi() const {
  return _internal_has_account_update_multi()
      ? *Value_.account_update_multi_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::AccountUpdateMulti&>(::Jde::Markets::Proto::Results::_AccountUpdateMulti_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::AccountUpdateMulti& MessageUnion::account_update_multi() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.account_update_multi)
  return _internal_account_update_multi();
}
inline ::Jde::Markets::Proto::Results::AccountUpdateMulti* MessageUnion::unsafe_arena_release_account_update_multi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.account_update_multi)
  if (_internal_has_account_update_multi()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::AccountUpdateMulti* temp = Value_.account_update_multi_;
    Value_.account_update_multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_account_update_multi(::Jde::Markets::Proto::Results::AccountUpdateMulti* account_update_multi) {
  clear_Value();
  if (account_update_multi) {
    set_has_account_update_multi();
    Value_.account_update_multi_ = account_update_multi;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.account_update_multi)
}
inline ::Jde::Markets::Proto::Results::AccountUpdateMulti* MessageUnion::_internal_mutable_account_update_multi() {
  if (!_internal_has_account_update_multi()) {
    clear_Value();
    set_has_account_update_multi();
    Value_.account_update_multi_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::AccountUpdateMulti >(GetArenaForAllocation());
  }
  return Value_.account_update_multi_;
}
inline ::Jde::Markets::Proto::Results::AccountUpdateMulti* MessageUnion::mutable_account_update_multi() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.account_update_multi)
  return _internal_mutable_account_update_multi();
}

// .Jde.Markets.Proto.Results.CommissionReport commission_report = 7;
inline bool MessageUnion::_internal_has_commission_report() const {
  return Value_case() == kCommissionReport;
}
inline bool MessageUnion::has_commission_report() const {
  return _internal_has_commission_report();
}
inline void MessageUnion::set_has_commission_report() {
  _oneof_case_[0] = kCommissionReport;
}
inline void MessageUnion::clear_commission_report() {
  if (_internal_has_commission_report()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.commission_report_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::CommissionReport* MessageUnion::release_commission_report() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.commission_report)
  if (_internal_has_commission_report()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::CommissionReport* temp = Value_.commission_report_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.commission_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::CommissionReport& MessageUnion::_internal_commission_report() const {
  return _internal_has_commission_report()
      ? *Value_.commission_report_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::CommissionReport&>(::Jde::Markets::Proto::Results::_CommissionReport_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::CommissionReport& MessageUnion::commission_report() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.commission_report)
  return _internal_commission_report();
}
inline ::Jde::Markets::Proto::Results::CommissionReport* MessageUnion::unsafe_arena_release_commission_report() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.commission_report)
  if (_internal_has_commission_report()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::CommissionReport* temp = Value_.commission_report_;
    Value_.commission_report_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_commission_report(::Jde::Markets::Proto::Results::CommissionReport* commission_report) {
  clear_Value();
  if (commission_report) {
    set_has_commission_report();
    Value_.commission_report_ = commission_report;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.commission_report)
}
inline ::Jde::Markets::Proto::Results::CommissionReport* MessageUnion::_internal_mutable_commission_report() {
  if (!_internal_has_commission_report()) {
    clear_Value();
    set_has_commission_report();
    Value_.commission_report_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::CommissionReport >(GetArenaForAllocation());
  }
  return Value_.commission_report_;
}
inline ::Jde::Markets::Proto::Results::CommissionReport* MessageUnion::mutable_commission_report() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.commission_report)
  return _internal_mutable_commission_report();
}

// .Jde.Markets.Proto.Results.ContractDetailsResult contract_details = 8;
inline bool MessageUnion::_internal_has_contract_details() const {
  return Value_case() == kContractDetails;
}
inline bool MessageUnion::has_contract_details() const {
  return _internal_has_contract_details();
}
inline void MessageUnion::set_has_contract_details() {
  _oneof_case_[0] = kContractDetails;
}
inline void MessageUnion::clear_contract_details() {
  if (_internal_has_contract_details()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.contract_details_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::ContractDetailsResult* MessageUnion::release_contract_details() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.contract_details)
  if (_internal_has_contract_details()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::ContractDetailsResult* temp = Value_.contract_details_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.contract_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::ContractDetailsResult& MessageUnion::_internal_contract_details() const {
  return _internal_has_contract_details()
      ? *Value_.contract_details_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::ContractDetailsResult&>(::Jde::Markets::Proto::Results::_ContractDetailsResult_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::ContractDetailsResult& MessageUnion::contract_details() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.contract_details)
  return _internal_contract_details();
}
inline ::Jde::Markets::Proto::Results::ContractDetailsResult* MessageUnion::unsafe_arena_release_contract_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.contract_details)
  if (_internal_has_contract_details()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::ContractDetailsResult* temp = Value_.contract_details_;
    Value_.contract_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_contract_details(::Jde::Markets::Proto::Results::ContractDetailsResult* contract_details) {
  clear_Value();
  if (contract_details) {
    set_has_contract_details();
    Value_.contract_details_ = contract_details;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.contract_details)
}
inline ::Jde::Markets::Proto::Results::ContractDetailsResult* MessageUnion::_internal_mutable_contract_details() {
  if (!_internal_has_contract_details()) {
    clear_Value();
    set_has_contract_details();
    Value_.contract_details_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::ContractDetailsResult >(GetArenaForAllocation());
  }
  return Value_.contract_details_;
}
inline ::Jde::Markets::Proto::Results::ContractDetailsResult* MessageUnion::mutable_contract_details() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.contract_details)
  return _internal_mutable_contract_details();
}

// .Jde.Markets.Proto.Results.Execution execution = 9;
inline bool MessageUnion::_internal_has_execution() const {
  return Value_case() == kExecution;
}
inline bool MessageUnion::has_execution() const {
  return _internal_has_execution();
}
inline void MessageUnion::set_has_execution() {
  _oneof_case_[0] = kExecution;
}
inline void MessageUnion::clear_execution() {
  if (_internal_has_execution()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.execution_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::Execution* MessageUnion::release_execution() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.execution)
  if (_internal_has_execution()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::Execution* temp = Value_.execution_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.execution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::Execution& MessageUnion::_internal_execution() const {
  return _internal_has_execution()
      ? *Value_.execution_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::Execution&>(::Jde::Markets::Proto::Results::_Execution_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::Execution& MessageUnion::execution() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.execution)
  return _internal_execution();
}
inline ::Jde::Markets::Proto::Results::Execution* MessageUnion::unsafe_arena_release_execution() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.execution)
  if (_internal_has_execution()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::Execution* temp = Value_.execution_;
    Value_.execution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_execution(::Jde::Markets::Proto::Results::Execution* execution) {
  clear_Value();
  if (execution) {
    set_has_execution();
    Value_.execution_ = execution;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.execution)
}
inline ::Jde::Markets::Proto::Results::Execution* MessageUnion::_internal_mutable_execution() {
  if (!_internal_has_execution()) {
    clear_Value();
    set_has_execution();
    Value_.execution_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::Execution >(GetArenaForAllocation());
  }
  return Value_.execution_;
}
inline ::Jde::Markets::Proto::Results::Execution* MessageUnion::mutable_execution() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.execution)
  return _internal_mutable_execution();
}

// .Jde.Markets.Proto.Results.PortfolioUpdate portfolio_update = 10;
inline bool MessageUnion::_internal_has_portfolio_update() const {
  return Value_case() == kPortfolioUpdate;
}
inline bool MessageUnion::has_portfolio_update() const {
  return _internal_has_portfolio_update();
}
inline void MessageUnion::set_has_portfolio_update() {
  _oneof_case_[0] = kPortfolioUpdate;
}
inline void MessageUnion::clear_portfolio_update() {
  if (_internal_has_portfolio_update()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.portfolio_update_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::PortfolioUpdate* MessageUnion::release_portfolio_update() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.portfolio_update)
  if (_internal_has_portfolio_update()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::PortfolioUpdate* temp = Value_.portfolio_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.portfolio_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::PortfolioUpdate& MessageUnion::_internal_portfolio_update() const {
  return _internal_has_portfolio_update()
      ? *Value_.portfolio_update_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::PortfolioUpdate&>(::Jde::Markets::Proto::Results::_PortfolioUpdate_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::PortfolioUpdate& MessageUnion::portfolio_update() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.portfolio_update)
  return _internal_portfolio_update();
}
inline ::Jde::Markets::Proto::Results::PortfolioUpdate* MessageUnion::unsafe_arena_release_portfolio_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.portfolio_update)
  if (_internal_has_portfolio_update()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::PortfolioUpdate* temp = Value_.portfolio_update_;
    Value_.portfolio_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_portfolio_update(::Jde::Markets::Proto::Results::PortfolioUpdate* portfolio_update) {
  clear_Value();
  if (portfolio_update) {
    set_has_portfolio_update();
    Value_.portfolio_update_ = portfolio_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.portfolio_update)
}
inline ::Jde::Markets::Proto::Results::PortfolioUpdate* MessageUnion::_internal_mutable_portfolio_update() {
  if (!_internal_has_portfolio_update()) {
    clear_Value();
    set_has_portfolio_update();
    Value_.portfolio_update_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::PortfolioUpdate >(GetArenaForAllocation());
  }
  return Value_.portfolio_update_;
}
inline ::Jde::Markets::Proto::Results::PortfolioUpdate* MessageUnion::mutable_portfolio_update() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.portfolio_update)
  return _internal_mutable_portfolio_update();
}

// .Jde.Markets.Proto.Results.TickGeneric tick_generic = 11;
inline bool MessageUnion::_internal_has_tick_generic() const {
  return Value_case() == kTickGeneric;
}
inline bool MessageUnion::has_tick_generic() const {
  return _internal_has_tick_generic();
}
inline void MessageUnion::set_has_tick_generic() {
  _oneof_case_[0] = kTickGeneric;
}
inline void MessageUnion::clear_tick_generic() {
  if (_internal_has_tick_generic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.tick_generic_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::TickGeneric* MessageUnion::release_tick_generic() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.tick_generic)
  if (_internal_has_tick_generic()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::TickGeneric* temp = Value_.tick_generic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.tick_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::TickGeneric& MessageUnion::_internal_tick_generic() const {
  return _internal_has_tick_generic()
      ? *Value_.tick_generic_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::TickGeneric&>(::Jde::Markets::Proto::Results::_TickGeneric_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::TickGeneric& MessageUnion::tick_generic() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.tick_generic)
  return _internal_tick_generic();
}
inline ::Jde::Markets::Proto::Results::TickGeneric* MessageUnion::unsafe_arena_release_tick_generic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.tick_generic)
  if (_internal_has_tick_generic()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::TickGeneric* temp = Value_.tick_generic_;
    Value_.tick_generic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_tick_generic(::Jde::Markets::Proto::Results::TickGeneric* tick_generic) {
  clear_Value();
  if (tick_generic) {
    set_has_tick_generic();
    Value_.tick_generic_ = tick_generic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.tick_generic)
}
inline ::Jde::Markets::Proto::Results::TickGeneric* MessageUnion::_internal_mutable_tick_generic() {
  if (!_internal_has_tick_generic()) {
    clear_Value();
    set_has_tick_generic();
    Value_.tick_generic_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::TickGeneric >(GetArenaForAllocation());
  }
  return Value_.tick_generic_;
}
inline ::Jde::Markets::Proto::Results::TickGeneric* MessageUnion::mutable_tick_generic() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.tick_generic)
  return _internal_mutable_tick_generic();
}

// .Jde.Markets.Proto.Results.TickPrice tick_price = 12;
inline bool MessageUnion::_internal_has_tick_price() const {
  return Value_case() == kTickPrice;
}
inline bool MessageUnion::has_tick_price() const {
  return _internal_has_tick_price();
}
inline void MessageUnion::set_has_tick_price() {
  _oneof_case_[0] = kTickPrice;
}
inline void MessageUnion::clear_tick_price() {
  if (_internal_has_tick_price()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.tick_price_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::TickPrice* MessageUnion::release_tick_price() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.tick_price)
  if (_internal_has_tick_price()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::TickPrice* temp = Value_.tick_price_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.tick_price_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::TickPrice& MessageUnion::_internal_tick_price() const {
  return _internal_has_tick_price()
      ? *Value_.tick_price_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::TickPrice&>(::Jde::Markets::Proto::Results::_TickPrice_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::TickPrice& MessageUnion::tick_price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.tick_price)
  return _internal_tick_price();
}
inline ::Jde::Markets::Proto::Results::TickPrice* MessageUnion::unsafe_arena_release_tick_price() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.tick_price)
  if (_internal_has_tick_price()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::TickPrice* temp = Value_.tick_price_;
    Value_.tick_price_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_tick_price(::Jde::Markets::Proto::Results::TickPrice* tick_price) {
  clear_Value();
  if (tick_price) {
    set_has_tick_price();
    Value_.tick_price_ = tick_price;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.tick_price)
}
inline ::Jde::Markets::Proto::Results::TickPrice* MessageUnion::_internal_mutable_tick_price() {
  if (!_internal_has_tick_price()) {
    clear_Value();
    set_has_tick_price();
    Value_.tick_price_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::TickPrice >(GetArenaForAllocation());
  }
  return Value_.tick_price_;
}
inline ::Jde::Markets::Proto::Results::TickPrice* MessageUnion::mutable_tick_price() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.tick_price)
  return _internal_mutable_tick_price();
}

// .Jde.Markets.Proto.Results.TickSize tick_size = 13;
inline bool MessageUnion::_internal_has_tick_size() const {
  return Value_case() == kTickSize;
}
inline bool MessageUnion::has_tick_size() const {
  return _internal_has_tick_size();
}
inline void MessageUnion::set_has_tick_size() {
  _oneof_case_[0] = kTickSize;
}
inline void MessageUnion::clear_tick_size() {
  if (_internal_has_tick_size()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.tick_size_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::TickSize* MessageUnion::release_tick_size() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.tick_size)
  if (_internal_has_tick_size()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::TickSize* temp = Value_.tick_size_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.tick_size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::TickSize& MessageUnion::_internal_tick_size() const {
  return _internal_has_tick_size()
      ? *Value_.tick_size_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::TickSize&>(::Jde::Markets::Proto::Results::_TickSize_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::TickSize& MessageUnion::tick_size() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.tick_size)
  return _internal_tick_size();
}
inline ::Jde::Markets::Proto::Results::TickSize* MessageUnion::unsafe_arena_release_tick_size() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.tick_size)
  if (_internal_has_tick_size()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::TickSize* temp = Value_.tick_size_;
    Value_.tick_size_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_tick_size(::Jde::Markets::Proto::Results::TickSize* tick_size) {
  clear_Value();
  if (tick_size) {
    set_has_tick_size();
    Value_.tick_size_ = tick_size;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.tick_size)
}
inline ::Jde::Markets::Proto::Results::TickSize* MessageUnion::_internal_mutable_tick_size() {
  if (!_internal_has_tick_size()) {
    clear_Value();
    set_has_tick_size();
    Value_.tick_size_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::TickSize >(GetArenaForAllocation());
  }
  return Value_.tick_size_;
}
inline ::Jde::Markets::Proto::Results::TickSize* MessageUnion::mutable_tick_size() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.tick_size)
  return _internal_mutable_tick_size();
}

// .Jde.Markets.Proto.Results.TickString tick_string = 14;
inline bool MessageUnion::_internal_has_tick_string() const {
  return Value_case() == kTickString;
}
inline bool MessageUnion::has_tick_string() const {
  return _internal_has_tick_string();
}
inline void MessageUnion::set_has_tick_string() {
  _oneof_case_[0] = kTickString;
}
inline void MessageUnion::clear_tick_string() {
  if (_internal_has_tick_string()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.tick_string_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::TickString* MessageUnion::release_tick_string() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.tick_string)
  if (_internal_has_tick_string()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::TickString* temp = Value_.tick_string_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.tick_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::TickString& MessageUnion::_internal_tick_string() const {
  return _internal_has_tick_string()
      ? *Value_.tick_string_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::TickString&>(::Jde::Markets::Proto::Results::_TickString_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::TickString& MessageUnion::tick_string() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.tick_string)
  return _internal_tick_string();
}
inline ::Jde::Markets::Proto::Results::TickString* MessageUnion::unsafe_arena_release_tick_string() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.tick_string)
  if (_internal_has_tick_string()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::TickString* temp = Value_.tick_string_;
    Value_.tick_string_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_tick_string(::Jde::Markets::Proto::Results::TickString* tick_string) {
  clear_Value();
  if (tick_string) {
    set_has_tick_string();
    Value_.tick_string_ = tick_string;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.tick_string)
}
inline ::Jde::Markets::Proto::Results::TickString* MessageUnion::_internal_mutable_tick_string() {
  if (!_internal_has_tick_string()) {
    clear_Value();
    set_has_tick_string();
    Value_.tick_string_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::TickString >(GetArenaForAllocation());
  }
  return Value_.tick_string_;
}
inline ::Jde::Markets::Proto::Results::TickString* MessageUnion::mutable_tick_string() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.tick_string)
  return _internal_mutable_tick_string();
}

// .Jde.Markets.Proto.Results.Error error = 15;
inline bool MessageUnion::_internal_has_error() const {
  return Value_case() == kError;
}
inline bool MessageUnion::has_error() const {
  return _internal_has_error();
}
inline void MessageUnion::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void MessageUnion::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.error_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::Error* MessageUnion::release_error() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.error)
  if (_internal_has_error()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::Error* temp = Value_.error_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::Error& MessageUnion::_internal_error() const {
  return _internal_has_error()
      ? *Value_.error_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::Error&>(::Jde::Markets::Proto::Results::_Error_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::Error& MessageUnion::error() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.error)
  return _internal_error();
}
inline ::Jde::Markets::Proto::Results::Error* MessageUnion::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.error)
  if (_internal_has_error()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::Error* temp = Value_.error_;
    Value_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_error(::Jde::Markets::Proto::Results::Error* error) {
  clear_Value();
  if (error) {
    set_has_error();
    Value_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.error)
}
inline ::Jde::Markets::Proto::Results::Error* MessageUnion::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_Value();
    set_has_error();
    Value_.error_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::Error >(GetArenaForAllocation());
  }
  return Value_.error_;
}
inline ::Jde::Markets::Proto::Results::Error* MessageUnion::mutable_error() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.error)
  return _internal_mutable_error();
}

// .Jde.Markets.Proto.Results.OptionValues options = 16;
inline bool MessageUnion::_internal_has_options() const {
  return Value_case() == kOptions;
}
inline bool MessageUnion::has_options() const {
  return _internal_has_options();
}
inline void MessageUnion::set_has_options() {
  _oneof_case_[0] = kOptions;
}
inline void MessageUnion::clear_options() {
  if (_internal_has_options()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.options_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::OptionValues* MessageUnion::release_options() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.options)
  if (_internal_has_options()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::OptionValues* temp = Value_.options_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::OptionValues& MessageUnion::_internal_options() const {
  return _internal_has_options()
      ? *Value_.options_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::OptionValues&>(::Jde::Markets::Proto::Results::_OptionValues_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::OptionValues& MessageUnion::options() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.options)
  return _internal_options();
}
inline ::Jde::Markets::Proto::Results::OptionValues* MessageUnion::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.options)
  if (_internal_has_options()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::OptionValues* temp = Value_.options_;
    Value_.options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_options(::Jde::Markets::Proto::Results::OptionValues* options) {
  clear_Value();
  if (options) {
    set_has_options();
    Value_.options_ = options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.options)
}
inline ::Jde::Markets::Proto::Results::OptionValues* MessageUnion::_internal_mutable_options() {
  if (!_internal_has_options()) {
    clear_Value();
    set_has_options();
    Value_.options_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::OptionValues >(GetArenaForAllocation());
  }
  return Value_.options_;
}
inline ::Jde::Markets::Proto::Results::OptionValues* MessageUnion::mutable_options() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.options)
  return _internal_mutable_options();
}

// .Jde.Markets.Proto.Results.HistoricalData historical_data = 17;
inline bool MessageUnion::_internal_has_historical_data() const {
  return Value_case() == kHistoricalData;
}
inline bool MessageUnion::has_historical_data() const {
  return _internal_has_historical_data();
}
inline void MessageUnion::set_has_historical_data() {
  _oneof_case_[0] = kHistoricalData;
}
inline void MessageUnion::clear_historical_data() {
  if (_internal_has_historical_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.historical_data_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::HistoricalData* MessageUnion::release_historical_data() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.historical_data)
  if (_internal_has_historical_data()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::HistoricalData* temp = Value_.historical_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.historical_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::HistoricalData& MessageUnion::_internal_historical_data() const {
  return _internal_has_historical_data()
      ? *Value_.historical_data_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::HistoricalData&>(::Jde::Markets::Proto::Results::_HistoricalData_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::HistoricalData& MessageUnion::historical_data() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.historical_data)
  return _internal_historical_data();
}
inline ::Jde::Markets::Proto::Results::HistoricalData* MessageUnion::unsafe_arena_release_historical_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.historical_data)
  if (_internal_has_historical_data()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::HistoricalData* temp = Value_.historical_data_;
    Value_.historical_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_historical_data(::Jde::Markets::Proto::Results::HistoricalData* historical_data) {
  clear_Value();
  if (historical_data) {
    set_has_historical_data();
    Value_.historical_data_ = historical_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.historical_data)
}
inline ::Jde::Markets::Proto::Results::HistoricalData* MessageUnion::_internal_mutable_historical_data() {
  if (!_internal_has_historical_data()) {
    clear_Value();
    set_has_historical_data();
    Value_.historical_data_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::HistoricalData >(GetArenaForAllocation());
  }
  return Value_.historical_data_;
}
inline ::Jde::Markets::Proto::Results::HistoricalData* MessageUnion::mutable_historical_data() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.historical_data)
  return _internal_mutable_historical_data();
}

// .Jde.Markets.Proto.Results.StringResult string_result = 18;
inline bool MessageUnion::_internal_has_string_result() const {
  return Value_case() == kStringResult;
}
inline bool MessageUnion::has_string_result() const {
  return _internal_has_string_result();
}
inline void MessageUnion::set_has_string_result() {
  _oneof_case_[0] = kStringResult;
}
inline void MessageUnion::clear_string_result() {
  if (_internal_has_string_result()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.string_result_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::StringResult* MessageUnion::release_string_result() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.string_result)
  if (_internal_has_string_result()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::StringResult* temp = Value_.string_result_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.string_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::StringResult& MessageUnion::_internal_string_result() const {
  return _internal_has_string_result()
      ? *Value_.string_result_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::StringResult&>(::Jde::Markets::Proto::Results::_StringResult_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::StringResult& MessageUnion::string_result() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.string_result)
  return _internal_string_result();
}
inline ::Jde::Markets::Proto::Results::StringResult* MessageUnion::unsafe_arena_release_string_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.string_result)
  if (_internal_has_string_result()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::StringResult* temp = Value_.string_result_;
    Value_.string_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_string_result(::Jde::Markets::Proto::Results::StringResult* string_result) {
  clear_Value();
  if (string_result) {
    set_has_string_result();
    Value_.string_result_ = string_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.string_result)
}
inline ::Jde::Markets::Proto::Results::StringResult* MessageUnion::_internal_mutable_string_result() {
  if (!_internal_has_string_result()) {
    clear_Value();
    set_has_string_result();
    Value_.string_result_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::StringResult >(GetArenaForAllocation());
  }
  return Value_.string_result_;
}
inline ::Jde::Markets::Proto::Results::StringResult* MessageUnion::mutable_string_result() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.string_result)
  return _internal_mutable_string_result();
}

// .Jde.Markets.Proto.Results.Flex flex = 19;
inline bool MessageUnion::_internal_has_flex() const {
  return Value_case() == kFlex;
}
inline bool MessageUnion::has_flex() const {
  return _internal_has_flex();
}
inline void MessageUnion::set_has_flex() {
  _oneof_case_[0] = kFlex;
}
inline void MessageUnion::clear_flex() {
  if (_internal_has_flex()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.flex_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::Flex* MessageUnion::release_flex() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.flex)
  if (_internal_has_flex()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::Flex* temp = Value_.flex_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.flex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::Flex& MessageUnion::_internal_flex() const {
  return _internal_has_flex()
      ? *Value_.flex_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::Flex&>(::Jde::Markets::Proto::Results::_Flex_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::Flex& MessageUnion::flex() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.flex)
  return _internal_flex();
}
inline ::Jde::Markets::Proto::Results::Flex* MessageUnion::unsafe_arena_release_flex() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.flex)
  if (_internal_has_flex()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::Flex* temp = Value_.flex_;
    Value_.flex_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_flex(::Jde::Markets::Proto::Results::Flex* flex) {
  clear_Value();
  if (flex) {
    set_has_flex();
    Value_.flex_ = flex;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.flex)
}
inline ::Jde::Markets::Proto::Results::Flex* MessageUnion::_internal_mutable_flex() {
  if (!_internal_has_flex()) {
    clear_Value();
    set_has_flex();
    Value_.flex_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::Flex >(GetArenaForAllocation());
  }
  return Value_.flex_;
}
inline ::Jde::Markets::Proto::Results::Flex* MessageUnion::mutable_flex() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.flex)
  return _internal_mutable_flex();
}

// .Jde.Markets.Proto.Results.OrderStatus order_status = 20;
inline bool MessageUnion::_internal_has_order_status() const {
  return Value_case() == kOrderStatus;
}
inline bool MessageUnion::has_order_status() const {
  return _internal_has_order_status();
}
inline void MessageUnion::set_has_order_status() {
  _oneof_case_[0] = kOrderStatus;
}
inline void MessageUnion::clear_order_status() {
  if (_internal_has_order_status()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.order_status_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::OrderStatus* MessageUnion::release_order_status() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.order_status)
  if (_internal_has_order_status()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::OrderStatus* temp = Value_.order_status_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.order_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::OrderStatus& MessageUnion::_internal_order_status() const {
  return _internal_has_order_status()
      ? *Value_.order_status_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::OrderStatus&>(::Jde::Markets::Proto::Results::_OrderStatus_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::OrderStatus& MessageUnion::order_status() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.order_status)
  return _internal_order_status();
}
inline ::Jde::Markets::Proto::Results::OrderStatus* MessageUnion::unsafe_arena_release_order_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.order_status)
  if (_internal_has_order_status()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::OrderStatus* temp = Value_.order_status_;
    Value_.order_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_order_status(::Jde::Markets::Proto::Results::OrderStatus* order_status) {
  clear_Value();
  if (order_status) {
    set_has_order_status();
    Value_.order_status_ = order_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.order_status)
}
inline ::Jde::Markets::Proto::Results::OrderStatus* MessageUnion::_internal_mutable_order_status() {
  if (!_internal_has_order_status()) {
    clear_Value();
    set_has_order_status();
    Value_.order_status_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::OrderStatus >(GetArenaForAllocation());
  }
  return Value_.order_status_;
}
inline ::Jde::Markets::Proto::Results::OrderStatus* MessageUnion::mutable_order_status() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.order_status)
  return _internal_mutable_order_status();
}

// .Jde.Markets.Proto.Results.OpenOrder open_order = 21;
inline bool MessageUnion::_internal_has_open_order() const {
  return Value_case() == kOpenOrder;
}
inline bool MessageUnion::has_open_order() const {
  return _internal_has_open_order();
}
inline void MessageUnion::set_has_open_order() {
  _oneof_case_[0] = kOpenOrder;
}
inline void MessageUnion::clear_open_order() {
  if (_internal_has_open_order()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.open_order_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::OpenOrder* MessageUnion::release_open_order() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.open_order)
  if (_internal_has_open_order()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::OpenOrder* temp = Value_.open_order_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.open_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::OpenOrder& MessageUnion::_internal_open_order() const {
  return _internal_has_open_order()
      ? *Value_.open_order_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::OpenOrder&>(::Jde::Markets::Proto::Results::_OpenOrder_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::OpenOrder& MessageUnion::open_order() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.open_order)
  return _internal_open_order();
}
inline ::Jde::Markets::Proto::Results::OpenOrder* MessageUnion::unsafe_arena_release_open_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.open_order)
  if (_internal_has_open_order()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::OpenOrder* temp = Value_.open_order_;
    Value_.open_order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_open_order(::Jde::Markets::Proto::Results::OpenOrder* open_order) {
  clear_Value();
  if (open_order) {
    set_has_open_order();
    Value_.open_order_ = open_order;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.open_order)
}
inline ::Jde::Markets::Proto::Results::OpenOrder* MessageUnion::_internal_mutable_open_order() {
  if (!_internal_has_open_order()) {
    clear_Value();
    set_has_open_order();
    Value_.open_order_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::OpenOrder >(GetArenaForAllocation());
  }
  return Value_.open_order_;
}
inline ::Jde::Markets::Proto::Results::OpenOrder* MessageUnion::mutable_open_order() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.open_order)
  return _internal_mutable_open_order();
}

// .Jde.Markets.Proto.Results.OptionExchanges option_exchanges = 22;
inline bool MessageUnion::_internal_has_option_exchanges() const {
  return Value_case() == kOptionExchanges;
}
inline bool MessageUnion::has_option_exchanges() const {
  return _internal_has_option_exchanges();
}
inline void MessageUnion::set_has_option_exchanges() {
  _oneof_case_[0] = kOptionExchanges;
}
inline void MessageUnion::clear_option_exchanges() {
  if (_internal_has_option_exchanges()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.option_exchanges_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::OptionExchanges* MessageUnion::release_option_exchanges() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.option_exchanges)
  if (_internal_has_option_exchanges()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::OptionExchanges* temp = Value_.option_exchanges_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.option_exchanges_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::OptionExchanges& MessageUnion::_internal_option_exchanges() const {
  return _internal_has_option_exchanges()
      ? *Value_.option_exchanges_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::OptionExchanges&>(::Jde::Markets::Proto::Results::_OptionExchanges_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::OptionExchanges& MessageUnion::option_exchanges() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.option_exchanges)
  return _internal_option_exchanges();
}
inline ::Jde::Markets::Proto::Results::OptionExchanges* MessageUnion::unsafe_arena_release_option_exchanges() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.option_exchanges)
  if (_internal_has_option_exchanges()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::OptionExchanges* temp = Value_.option_exchanges_;
    Value_.option_exchanges_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_option_exchanges(::Jde::Markets::Proto::Results::OptionExchanges* option_exchanges) {
  clear_Value();
  if (option_exchanges) {
    set_has_option_exchanges();
    Value_.option_exchanges_ = option_exchanges;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.option_exchanges)
}
inline ::Jde::Markets::Proto::Results::OptionExchanges* MessageUnion::_internal_mutable_option_exchanges() {
  if (!_internal_has_option_exchanges()) {
    clear_Value();
    set_has_option_exchanges();
    Value_.option_exchanges_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::OptionExchanges >(GetArenaForAllocation());
  }
  return Value_.option_exchanges_;
}
inline ::Jde::Markets::Proto::Results::OptionExchanges* MessageUnion::mutable_option_exchanges() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.option_exchanges)
  return _internal_mutable_option_exchanges();
}

// .Jde.Markets.Proto.Results.EResults type = 23;
inline bool MessageUnion::_internal_has_type() const {
  return Value_case() == kType;
}
inline bool MessageUnion::has_type() const {
  return _internal_has_type();
}
inline void MessageUnion::set_has_type() {
  _oneof_case_[0] = kType;
}
inline void MessageUnion::clear_type() {
  if (_internal_has_type()) {
    Value_.type_ = 0;
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::EResults MessageUnion::_internal_type() const {
  if (_internal_has_type()) {
    return static_cast< ::Jde::Markets::Proto::Results::EResults >(Value_.type_);
  }
  return static_cast< ::Jde::Markets::Proto::Results::EResults >(0);
}
inline ::Jde::Markets::Proto::Results::EResults MessageUnion::type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.type)
  return _internal_type();
}
inline void MessageUnion::_internal_set_type(::Jde::Markets::Proto::Results::EResults value) {
  if (!_internal_has_type()) {
    clear_Value();
    set_has_type();
  }
  Value_.type_ = value;
}
inline void MessageUnion::set_type(::Jde::Markets::Proto::Results::EResults value) {
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.MessageUnion.type)
  _internal_set_type(value);
}

// .Jde.Markets.Proto.Results.DaySummary day_summary = 24;
inline bool MessageUnion::_internal_has_day_summary() const {
  return Value_case() == kDaySummary;
}
inline bool MessageUnion::has_day_summary() const {
  return _internal_has_day_summary();
}
inline void MessageUnion::set_has_day_summary() {
  _oneof_case_[0] = kDaySummary;
}
inline void MessageUnion::clear_day_summary() {
  if (_internal_has_day_summary()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.day_summary_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::DaySummary* MessageUnion::release_day_summary() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.day_summary)
  if (_internal_has_day_summary()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::DaySummary* temp = Value_.day_summary_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.day_summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::DaySummary& MessageUnion::_internal_day_summary() const {
  return _internal_has_day_summary()
      ? *Value_.day_summary_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::DaySummary&>(::Jde::Markets::Proto::Results::_DaySummary_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::DaySummary& MessageUnion::day_summary() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.day_summary)
  return _internal_day_summary();
}
inline ::Jde::Markets::Proto::Results::DaySummary* MessageUnion::unsafe_arena_release_day_summary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.day_summary)
  if (_internal_has_day_summary()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::DaySummary* temp = Value_.day_summary_;
    Value_.day_summary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_day_summary(::Jde::Markets::Proto::Results::DaySummary* day_summary) {
  clear_Value();
  if (day_summary) {
    set_has_day_summary();
    Value_.day_summary_ = day_summary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.day_summary)
}
inline ::Jde::Markets::Proto::Results::DaySummary* MessageUnion::_internal_mutable_day_summary() {
  if (!_internal_has_day_summary()) {
    clear_Value();
    set_has_day_summary();
    Value_.day_summary_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::DaySummary >(GetArenaForAllocation());
  }
  return Value_.day_summary_;
}
inline ::Jde::Markets::Proto::Results::DaySummary* MessageUnion::mutable_day_summary() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.day_summary)
  return _internal_mutable_day_summary();
}

// .Jde.Markets.Proto.Results.Fundamentals fundamentals = 25;
inline bool MessageUnion::_internal_has_fundamentals() const {
  return Value_case() == kFundamentals;
}
inline bool MessageUnion::has_fundamentals() const {
  return _internal_has_fundamentals();
}
inline void MessageUnion::set_has_fundamentals() {
  _oneof_case_[0] = kFundamentals;
}
inline void MessageUnion::clear_fundamentals() {
  if (_internal_has_fundamentals()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.fundamentals_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::Fundamentals* MessageUnion::release_fundamentals() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.fundamentals)
  if (_internal_has_fundamentals()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::Fundamentals* temp = Value_.fundamentals_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.fundamentals_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::Fundamentals& MessageUnion::_internal_fundamentals() const {
  return _internal_has_fundamentals()
      ? *Value_.fundamentals_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::Fundamentals&>(::Jde::Markets::Proto::Results::_Fundamentals_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::Fundamentals& MessageUnion::fundamentals() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.fundamentals)
  return _internal_fundamentals();
}
inline ::Jde::Markets::Proto::Results::Fundamentals* MessageUnion::unsafe_arena_release_fundamentals() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.fundamentals)
  if (_internal_has_fundamentals()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::Fundamentals* temp = Value_.fundamentals_;
    Value_.fundamentals_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_fundamentals(::Jde::Markets::Proto::Results::Fundamentals* fundamentals) {
  clear_Value();
  if (fundamentals) {
    set_has_fundamentals();
    Value_.fundamentals_ = fundamentals;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.fundamentals)
}
inline ::Jde::Markets::Proto::Results::Fundamentals* MessageUnion::_internal_mutable_fundamentals() {
  if (!_internal_has_fundamentals()) {
    clear_Value();
    set_has_fundamentals();
    Value_.fundamentals_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::Fundamentals >(GetArenaForAllocation());
  }
  return Value_.fundamentals_;
}
inline ::Jde::Markets::Proto::Results::Fundamentals* MessageUnion::mutable_fundamentals() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.fundamentals)
  return _internal_mutable_fundamentals();
}

// .Jde.Markets.Proto.Results.PositionMulti position_multi = 26;
inline bool MessageUnion::_internal_has_position_multi() const {
  return Value_case() == kPositionMulti;
}
inline bool MessageUnion::has_position_multi() const {
  return _internal_has_position_multi();
}
inline void MessageUnion::set_has_position_multi() {
  _oneof_case_[0] = kPositionMulti;
}
inline void MessageUnion::clear_position_multi() {
  if (_internal_has_position_multi()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.position_multi_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::PositionMulti* MessageUnion::release_position_multi() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.position_multi)
  if (_internal_has_position_multi()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::PositionMulti* temp = Value_.position_multi_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.position_multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::PositionMulti& MessageUnion::_internal_position_multi() const {
  return _internal_has_position_multi()
      ? *Value_.position_multi_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::PositionMulti&>(::Jde::Markets::Proto::Results::_PositionMulti_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::PositionMulti& MessageUnion::position_multi() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.position_multi)
  return _internal_position_multi();
}
inline ::Jde::Markets::Proto::Results::PositionMulti* MessageUnion::unsafe_arena_release_position_multi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.position_multi)
  if (_internal_has_position_multi()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::PositionMulti* temp = Value_.position_multi_;
    Value_.position_multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_position_multi(::Jde::Markets::Proto::Results::PositionMulti* position_multi) {
  clear_Value();
  if (position_multi) {
    set_has_position_multi();
    Value_.position_multi_ = position_multi;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.position_multi)
}
inline ::Jde::Markets::Proto::Results::PositionMulti* MessageUnion::_internal_mutable_position_multi() {
  if (!_internal_has_position_multi()) {
    clear_Value();
    set_has_position_multi();
    Value_.position_multi_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::PositionMulti >(GetArenaForAllocation());
  }
  return Value_.position_multi_;
}
inline ::Jde::Markets::Proto::Results::PositionMulti* MessageUnion::mutable_position_multi() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.position_multi)
  return _internal_mutable_position_multi();
}

// .Jde.Markets.Proto.Results.WatchList watch_list = 27;
inline bool MessageUnion::_internal_has_watch_list() const {
  return Value_case() == kWatchList;
}
inline bool MessageUnion::has_watch_list() const {
  return _internal_has_watch_list();
}
inline void MessageUnion::set_has_watch_list() {
  _oneof_case_[0] = kWatchList;
}
inline void MessageUnion::clear_watch_list() {
  if (_internal_has_watch_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.watch_list_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::WatchList* MessageUnion::release_watch_list() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.watch_list)
  if (_internal_has_watch_list()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::WatchList* temp = Value_.watch_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.watch_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::WatchList& MessageUnion::_internal_watch_list() const {
  return _internal_has_watch_list()
      ? *Value_.watch_list_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::WatchList&>(::Jde::Markets::Proto::Results::_WatchList_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::WatchList& MessageUnion::watch_list() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.watch_list)
  return _internal_watch_list();
}
inline ::Jde::Markets::Proto::Results::WatchList* MessageUnion::unsafe_arena_release_watch_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.watch_list)
  if (_internal_has_watch_list()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::WatchList* temp = Value_.watch_list_;
    Value_.watch_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_watch_list(::Jde::Markets::Proto::Results::WatchList* watch_list) {
  clear_Value();
  if (watch_list) {
    set_has_watch_list();
    Value_.watch_list_ = watch_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.watch_list)
}
inline ::Jde::Markets::Proto::Results::WatchList* MessageUnion::_internal_mutable_watch_list() {
  if (!_internal_has_watch_list()) {
    clear_Value();
    set_has_watch_list();
    Value_.watch_list_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::WatchList >(GetArenaForAllocation());
  }
  return Value_.watch_list_;
}
inline ::Jde::Markets::Proto::Results::WatchList* MessageUnion::mutable_watch_list() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.watch_list)
  return _internal_mutable_watch_list();
}

// .Jde.Markets.Proto.Results.StringList string_list = 28;
inline bool MessageUnion::_internal_has_string_list() const {
  return Value_case() == kStringList;
}
inline bool MessageUnion::has_string_list() const {
  return _internal_has_string_list();
}
inline void MessageUnion::set_has_string_list() {
  _oneof_case_[0] = kStringList;
}
inline void MessageUnion::clear_string_list() {
  if (_internal_has_string_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.string_list_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::StringList* MessageUnion::release_string_list() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.string_list)
  if (_internal_has_string_list()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::StringList* temp = Value_.string_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.string_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::StringList& MessageUnion::_internal_string_list() const {
  return _internal_has_string_list()
      ? *Value_.string_list_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::StringList&>(::Jde::Markets::Proto::Results::_StringList_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::StringList& MessageUnion::string_list() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.string_list)
  return _internal_string_list();
}
inline ::Jde::Markets::Proto::Results::StringList* MessageUnion::unsafe_arena_release_string_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.string_list)
  if (_internal_has_string_list()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::StringList* temp = Value_.string_list_;
    Value_.string_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_string_list(::Jde::Markets::Proto::Results::StringList* string_list) {
  clear_Value();
  if (string_list) {
    set_has_string_list();
    Value_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.string_list)
}
inline ::Jde::Markets::Proto::Results::StringList* MessageUnion::_internal_mutable_string_list() {
  if (!_internal_has_string_list()) {
    clear_Value();
    set_has_string_list();
    Value_.string_list_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::StringList >(GetArenaForAllocation());
  }
  return Value_.string_list_;
}
inline ::Jde::Markets::Proto::Results::StringList* MessageUnion::mutable_string_list() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.string_list)
  return _internal_mutable_string_list();
}

// .Jde.Markets.Proto.Results.NewsArticle news_article = 29;
inline bool MessageUnion::_internal_has_news_article() const {
  return Value_case() == kNewsArticle;
}
inline bool MessageUnion::has_news_article() const {
  return _internal_has_news_article();
}
inline void MessageUnion::set_has_news_article() {
  _oneof_case_[0] = kNewsArticle;
}
inline void MessageUnion::clear_news_article() {
  if (_internal_has_news_article()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.news_article_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::NewsArticle* MessageUnion::release_news_article() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.news_article)
  if (_internal_has_news_article()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::NewsArticle* temp = Value_.news_article_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.news_article_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::NewsArticle& MessageUnion::_internal_news_article() const {
  return _internal_has_news_article()
      ? *Value_.news_article_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::NewsArticle&>(::Jde::Markets::Proto::Results::_NewsArticle_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::NewsArticle& MessageUnion::news_article() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.news_article)
  return _internal_news_article();
}
inline ::Jde::Markets::Proto::Results::NewsArticle* MessageUnion::unsafe_arena_release_news_article() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.news_article)
  if (_internal_has_news_article()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::NewsArticle* temp = Value_.news_article_;
    Value_.news_article_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_news_article(::Jde::Markets::Proto::Results::NewsArticle* news_article) {
  clear_Value();
  if (news_article) {
    set_has_news_article();
    Value_.news_article_ = news_article;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.news_article)
}
inline ::Jde::Markets::Proto::Results::NewsArticle* MessageUnion::_internal_mutable_news_article() {
  if (!_internal_has_news_article()) {
    clear_Value();
    set_has_news_article();
    Value_.news_article_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::NewsArticle >(GetArenaForAllocation());
  }
  return Value_.news_article_;
}
inline ::Jde::Markets::Proto::Results::NewsArticle* MessageUnion::mutable_news_article() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.news_article)
  return _internal_mutable_news_article();
}

// .Jde.Markets.Proto.Results.TickNews tick_news = 30;
inline bool MessageUnion::_internal_has_tick_news() const {
  return Value_case() == kTickNews;
}
inline bool MessageUnion::has_tick_news() const {
  return _internal_has_tick_news();
}
inline void MessageUnion::set_has_tick_news() {
  _oneof_case_[0] = kTickNews;
}
inline void MessageUnion::clear_tick_news() {
  if (_internal_has_tick_news()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.tick_news_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::TickNews* MessageUnion::release_tick_news() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.tick_news)
  if (_internal_has_tick_news()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::TickNews* temp = Value_.tick_news_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.tick_news_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::TickNews& MessageUnion::_internal_tick_news() const {
  return _internal_has_tick_news()
      ? *Value_.tick_news_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::TickNews&>(::Jde::Markets::Proto::Results::_TickNews_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::TickNews& MessageUnion::tick_news() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.tick_news)
  return _internal_tick_news();
}
inline ::Jde::Markets::Proto::Results::TickNews* MessageUnion::unsafe_arena_release_tick_news() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.tick_news)
  if (_internal_has_tick_news()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::TickNews* temp = Value_.tick_news_;
    Value_.tick_news_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_tick_news(::Jde::Markets::Proto::Results::TickNews* tick_news) {
  clear_Value();
  if (tick_news) {
    set_has_tick_news();
    Value_.tick_news_ = tick_news;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.tick_news)
}
inline ::Jde::Markets::Proto::Results::TickNews* MessageUnion::_internal_mutable_tick_news() {
  if (!_internal_has_tick_news()) {
    clear_Value();
    set_has_tick_news();
    Value_.tick_news_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::TickNews >(GetArenaForAllocation());
  }
  return Value_.tick_news_;
}
inline ::Jde::Markets::Proto::Results::TickNews* MessageUnion::mutable_tick_news() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.tick_news)
  return _internal_mutable_tick_news();
}

// .Jde.Markets.Proto.Results.HistoricalNewsCollection historical_news = 31;
inline bool MessageUnion::_internal_has_historical_news() const {
  return Value_case() == kHistoricalNews;
}
inline bool MessageUnion::has_historical_news() const {
  return _internal_has_historical_news();
}
inline void MessageUnion::set_has_historical_news() {
  _oneof_case_[0] = kHistoricalNews;
}
inline void MessageUnion::clear_historical_news() {
  if (_internal_has_historical_news()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.historical_news_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::HistoricalNewsCollection* MessageUnion::release_historical_news() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.historical_news)
  if (_internal_has_historical_news()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::HistoricalNewsCollection* temp = Value_.historical_news_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.historical_news_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::HistoricalNewsCollection& MessageUnion::_internal_historical_news() const {
  return _internal_has_historical_news()
      ? *Value_.historical_news_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::HistoricalNewsCollection&>(::Jde::Markets::Proto::Results::_HistoricalNewsCollection_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::HistoricalNewsCollection& MessageUnion::historical_news() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.historical_news)
  return _internal_historical_news();
}
inline ::Jde::Markets::Proto::Results::HistoricalNewsCollection* MessageUnion::unsafe_arena_release_historical_news() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.historical_news)
  if (_internal_has_historical_news()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::HistoricalNewsCollection* temp = Value_.historical_news_;
    Value_.historical_news_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_historical_news(::Jde::Markets::Proto::Results::HistoricalNewsCollection* historical_news) {
  clear_Value();
  if (historical_news) {
    set_has_historical_news();
    Value_.historical_news_ = historical_news;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.historical_news)
}
inline ::Jde::Markets::Proto::Results::HistoricalNewsCollection* MessageUnion::_internal_mutable_historical_news() {
  if (!_internal_has_historical_news()) {
    clear_Value();
    set_has_historical_news();
    Value_.historical_news_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::HistoricalNewsCollection >(GetArenaForAllocation());
  }
  return Value_.historical_news_;
}
inline ::Jde::Markets::Proto::Results::HistoricalNewsCollection* MessageUnion::mutable_historical_news() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.historical_news)
  return _internal_mutable_historical_news();
}

// .Jde.Markets.Proto.Results.Statistics statistics = 32;
inline bool MessageUnion::_internal_has_statistics() const {
  return Value_case() == kStatistics;
}
inline bool MessageUnion::has_statistics() const {
  return _internal_has_statistics();
}
inline void MessageUnion::set_has_statistics() {
  _oneof_case_[0] = kStatistics;
}
inline void MessageUnion::clear_statistics() {
  if (_internal_has_statistics()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.statistics_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::Statistics* MessageUnion::release_statistics() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.statistics)
  if (_internal_has_statistics()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::Statistics* temp = Value_.statistics_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.statistics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::Statistics& MessageUnion::_internal_statistics() const {
  return _internal_has_statistics()
      ? *Value_.statistics_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::Statistics&>(::Jde::Markets::Proto::Results::_Statistics_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::Statistics& MessageUnion::statistics() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.statistics)
  return _internal_statistics();
}
inline ::Jde::Markets::Proto::Results::Statistics* MessageUnion::unsafe_arena_release_statistics() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.statistics)
  if (_internal_has_statistics()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::Statistics* temp = Value_.statistics_;
    Value_.statistics_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_statistics(::Jde::Markets::Proto::Results::Statistics* statistics) {
  clear_Value();
  if (statistics) {
    set_has_statistics();
    Value_.statistics_ = statistics;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.statistics)
}
inline ::Jde::Markets::Proto::Results::Statistics* MessageUnion::_internal_mutable_statistics() {
  if (!_internal_has_statistics()) {
    clear_Value();
    set_has_statistics();
    Value_.statistics_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::Statistics >(GetArenaForAllocation());
  }
  return Value_.statistics_;
}
inline ::Jde::Markets::Proto::Results::Statistics* MessageUnion::mutable_statistics() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.statistics)
  return _internal_mutable_statistics();
}

// .Jde.Markets.Proto.Results.OptionCalculation option_calculation = 33;
inline bool MessageUnion::_internal_has_option_calculation() const {
  return Value_case() == kOptionCalculation;
}
inline bool MessageUnion::has_option_calculation() const {
  return _internal_has_option_calculation();
}
inline void MessageUnion::set_has_option_calculation() {
  _oneof_case_[0] = kOptionCalculation;
}
inline void MessageUnion::clear_option_calculation() {
  if (_internal_has_option_calculation()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.option_calculation_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::OptionCalculation* MessageUnion::release_option_calculation() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.option_calculation)
  if (_internal_has_option_calculation()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::OptionCalculation* temp = Value_.option_calculation_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.option_calculation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::OptionCalculation& MessageUnion::_internal_option_calculation() const {
  return _internal_has_option_calculation()
      ? *Value_.option_calculation_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::OptionCalculation&>(::Jde::Markets::Proto::Results::_OptionCalculation_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::OptionCalculation& MessageUnion::option_calculation() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.option_calculation)
  return _internal_option_calculation();
}
inline ::Jde::Markets::Proto::Results::OptionCalculation* MessageUnion::unsafe_arena_release_option_calculation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.option_calculation)
  if (_internal_has_option_calculation()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::OptionCalculation* temp = Value_.option_calculation_;
    Value_.option_calculation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_option_calculation(::Jde::Markets::Proto::Results::OptionCalculation* option_calculation) {
  clear_Value();
  if (option_calculation) {
    set_has_option_calculation();
    Value_.option_calculation_ = option_calculation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.option_calculation)
}
inline ::Jde::Markets::Proto::Results::OptionCalculation* MessageUnion::_internal_mutable_option_calculation() {
  if (!_internal_has_option_calculation()) {
    clear_Value();
    set_has_option_calculation();
    Value_.option_calculation_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::OptionCalculation >(GetArenaForAllocation());
  }
  return Value_.option_calculation_;
}
inline ::Jde::Markets::Proto::Results::OptionCalculation* MessageUnion::mutable_option_calculation() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.option_calculation)
  return _internal_mutable_option_calculation();
}

// .Jde.Markets.Proto.Results.Custom custom = 34;
inline bool MessageUnion::_internal_has_custom() const {
  return Value_case() == kCustom;
}
inline bool MessageUnion::has_custom() const {
  return _internal_has_custom();
}
inline void MessageUnion::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void MessageUnion::clear_custom() {
  if (_internal_has_custom()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.custom_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Markets::Proto::Results::Custom* MessageUnion::release_custom() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.custom)
  if (_internal_has_custom()) {
    clear_has_Value();
      ::Jde::Markets::Proto::Results::Custom* temp = Value_.custom_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Proto::Results::Custom& MessageUnion::_internal_custom() const {
  return _internal_has_custom()
      ? *Value_.custom_
      : reinterpret_cast< ::Jde::Markets::Proto::Results::Custom&>(::Jde::Markets::Proto::Results::_Custom_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::Custom& MessageUnion::custom() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.custom)
  return _internal_custom();
}
inline ::Jde::Markets::Proto::Results::Custom* MessageUnion::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.custom)
  if (_internal_has_custom()) {
    clear_has_Value();
    ::Jde::Markets::Proto::Results::Custom* temp = Value_.custom_;
    Value_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_custom(::Jde::Markets::Proto::Results::Custom* custom) {
  clear_Value();
  if (custom) {
    set_has_custom();
    Value_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.custom)
}
inline ::Jde::Markets::Proto::Results::Custom* MessageUnion::_internal_mutable_custom() {
  if (!_internal_has_custom()) {
    clear_Value();
    set_has_custom();
    Value_.custom_ = CreateMaybeMessage< ::Jde::Markets::Proto::Results::Custom >(GetArenaForAllocation());
  }
  return Value_.custom_;
}
inline ::Jde::Markets::Proto::Results::Custom* MessageUnion::mutable_custom() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.custom)
  return _internal_mutable_custom();
}

// .Jde.Markets.Edgar.Proto.Investors investors = 35;
inline bool MessageUnion::_internal_has_investors() const {
  return Value_case() == kInvestors;
}
inline bool MessageUnion::has_investors() const {
  return _internal_has_investors();
}
inline void MessageUnion::set_has_investors() {
  _oneof_case_[0] = kInvestors;
}
inline ::Jde::Markets::Edgar::Proto::Investors* MessageUnion::release_investors() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.investors)
  if (_internal_has_investors()) {
    clear_has_Value();
      ::Jde::Markets::Edgar::Proto::Investors* temp = Value_.investors_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.investors_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Edgar::Proto::Investors& MessageUnion::_internal_investors() const {
  return _internal_has_investors()
      ? *Value_.investors_
      : reinterpret_cast< ::Jde::Markets::Edgar::Proto::Investors&>(::Jde::Markets::Edgar::Proto::_Investors_default_instance_);
}
inline const ::Jde::Markets::Edgar::Proto::Investors& MessageUnion::investors() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.investors)
  return _internal_investors();
}
inline ::Jde::Markets::Edgar::Proto::Investors* MessageUnion::unsafe_arena_release_investors() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.investors)
  if (_internal_has_investors()) {
    clear_has_Value();
    ::Jde::Markets::Edgar::Proto::Investors* temp = Value_.investors_;
    Value_.investors_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_investors(::Jde::Markets::Edgar::Proto::Investors* investors) {
  clear_Value();
  if (investors) {
    set_has_investors();
    Value_.investors_ = investors;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.investors)
}
inline ::Jde::Markets::Edgar::Proto::Investors* MessageUnion::_internal_mutable_investors() {
  if (!_internal_has_investors()) {
    clear_Value();
    set_has_investors();
    Value_.investors_ = CreateMaybeMessage< ::Jde::Markets::Edgar::Proto::Investors >(GetArenaForAllocation());
  }
  return Value_.investors_;
}
inline ::Jde::Markets::Edgar::Proto::Investors* MessageUnion::mutable_investors() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.investors)
  return _internal_mutable_investors();
}

// .Jde.Markets.Edgar.Proto.Filings filings = 36;
inline bool MessageUnion::_internal_has_filings() const {
  return Value_case() == kFilings;
}
inline bool MessageUnion::has_filings() const {
  return _internal_has_filings();
}
inline void MessageUnion::set_has_filings() {
  _oneof_case_[0] = kFilings;
}
inline ::Jde::Markets::Edgar::Proto::Filings* MessageUnion::release_filings() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.MessageUnion.filings)
  if (_internal_has_filings()) {
    clear_has_Value();
      ::Jde::Markets::Edgar::Proto::Filings* temp = Value_.filings_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.filings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Markets::Edgar::Proto::Filings& MessageUnion::_internal_filings() const {
  return _internal_has_filings()
      ? *Value_.filings_
      : reinterpret_cast< ::Jde::Markets::Edgar::Proto::Filings&>(::Jde::Markets::Edgar::Proto::_Filings_default_instance_);
}
inline const ::Jde::Markets::Edgar::Proto::Filings& MessageUnion::filings() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.MessageUnion.filings)
  return _internal_filings();
}
inline ::Jde::Markets::Edgar::Proto::Filings* MessageUnion::unsafe_arena_release_filings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Markets.Proto.Results.MessageUnion.filings)
  if (_internal_has_filings()) {
    clear_has_Value();
    ::Jde::Markets::Edgar::Proto::Filings* temp = Value_.filings_;
    Value_.filings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageUnion::unsafe_arena_set_allocated_filings(::Jde::Markets::Edgar::Proto::Filings* filings) {
  clear_Value();
  if (filings) {
    set_has_filings();
    Value_.filings_ = filings;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.MessageUnion.filings)
}
inline ::Jde::Markets::Edgar::Proto::Filings* MessageUnion::_internal_mutable_filings() {
  if (!_internal_has_filings()) {
    clear_Value();
    set_has_filings();
    Value_.filings_ = CreateMaybeMessage< ::Jde::Markets::Edgar::Proto::Filings >(GetArenaForAllocation());
  }
  return Value_.filings_;
}
inline ::Jde::Markets::Edgar::Proto::Filings* MessageUnion::mutable_filings() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.MessageUnion.filings)
  return _internal_mutable_filings();
}

inline bool MessageUnion::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void MessageUnion::clear_has_Value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline MessageUnion::ValueCase MessageUnion::Value_case() const {
  return MessageUnion::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Transmission

// repeated .Jde.Markets.Proto.Results.MessageUnion messages = 1;
inline int Transmission::_internal_messages_size() const {
  return messages_.size();
}
inline int Transmission::messages_size() const {
  return _internal_messages_size();
}
inline void Transmission::clear_messages() {
  messages_.Clear();
}
inline ::Jde::Markets::Proto::Results::MessageUnion* Transmission::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.Transmission.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::MessageUnion >*
Transmission::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.Transmission.messages)
  return &messages_;
}
inline const ::Jde::Markets::Proto::Results::MessageUnion& Transmission::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::MessageUnion& Transmission::messages(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.Transmission.messages)
  return _internal_messages(index);
}
inline ::Jde::Markets::Proto::Results::MessageUnion* Transmission::_internal_add_messages() {
  return messages_.Add();
}
inline ::Jde::Markets::Proto::Results::MessageUnion* Transmission::add_messages() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.Transmission.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::MessageUnion >&
Transmission::messages() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.Transmission.messages)
  return messages_;
}

// -------------------------------------------------------------------

// TickGeneric

// uint32 request_id = 1;
inline void TickGeneric::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TickGeneric::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TickGeneric::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickGeneric.request_id)
  return _internal_request_id();
}
inline void TickGeneric::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void TickGeneric::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickGeneric.request_id)
}

// .Jde.Markets.Proto.Results.ETickType tick_type = 2;
inline void TickGeneric::clear_tick_type() {
  tick_type_ = 0;
}
inline ::Jde::Markets::Proto::Results::ETickType TickGeneric::_internal_tick_type() const {
  return static_cast< ::Jde::Markets::Proto::Results::ETickType >(tick_type_);
}
inline ::Jde::Markets::Proto::Results::ETickType TickGeneric::tick_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickGeneric.tick_type)
  return _internal_tick_type();
}
inline void TickGeneric::_internal_set_tick_type(::Jde::Markets::Proto::Results::ETickType value) {
  
  tick_type_ = value;
}
inline void TickGeneric::set_tick_type(::Jde::Markets::Proto::Results::ETickType value) {
  _internal_set_tick_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickGeneric.tick_type)
}

// double value = 3;
inline void TickGeneric::clear_value() {
  value_ = 0;
}
inline double TickGeneric::_internal_value() const {
  return value_;
}
inline double TickGeneric::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickGeneric.value)
  return _internal_value();
}
inline void TickGeneric::_internal_set_value(double value) {
  
  value_ = value;
}
inline void TickGeneric::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickGeneric.value)
}

// -------------------------------------------------------------------

// TickAttrib

// bool can_auto_execute = 1;
inline void TickAttrib::clear_can_auto_execute() {
  can_auto_execute_ = false;
}
inline bool TickAttrib::_internal_can_auto_execute() const {
  return can_auto_execute_;
}
inline bool TickAttrib::can_auto_execute() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickAttrib.can_auto_execute)
  return _internal_can_auto_execute();
}
inline void TickAttrib::_internal_set_can_auto_execute(bool value) {
  
  can_auto_execute_ = value;
}
inline void TickAttrib::set_can_auto_execute(bool value) {
  _internal_set_can_auto_execute(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickAttrib.can_auto_execute)
}

// bool past_limit = 2;
inline void TickAttrib::clear_past_limit() {
  past_limit_ = false;
}
inline bool TickAttrib::_internal_past_limit() const {
  return past_limit_;
}
inline bool TickAttrib::past_limit() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickAttrib.past_limit)
  return _internal_past_limit();
}
inline void TickAttrib::_internal_set_past_limit(bool value) {
  
  past_limit_ = value;
}
inline void TickAttrib::set_past_limit(bool value) {
  _internal_set_past_limit(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickAttrib.past_limit)
}

// bool pre_open = 3;
inline void TickAttrib::clear_pre_open() {
  pre_open_ = false;
}
inline bool TickAttrib::_internal_pre_open() const {
  return pre_open_;
}
inline bool TickAttrib::pre_open() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickAttrib.pre_open)
  return _internal_pre_open();
}
inline void TickAttrib::_internal_set_pre_open(bool value) {
  
  pre_open_ = value;
}
inline void TickAttrib::set_pre_open(bool value) {
  _internal_set_pre_open(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickAttrib.pre_open)
}

// -------------------------------------------------------------------

// TickPrice

// uint32 request_id = 1;
inline void TickPrice::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TickPrice::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TickPrice::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickPrice.request_id)
  return _internal_request_id();
}
inline void TickPrice::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void TickPrice::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickPrice.request_id)
}

// .Jde.Markets.Proto.Results.ETickType tick_type = 2;
inline void TickPrice::clear_tick_type() {
  tick_type_ = 0;
}
inline ::Jde::Markets::Proto::Results::ETickType TickPrice::_internal_tick_type() const {
  return static_cast< ::Jde::Markets::Proto::Results::ETickType >(tick_type_);
}
inline ::Jde::Markets::Proto::Results::ETickType TickPrice::tick_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickPrice.tick_type)
  return _internal_tick_type();
}
inline void TickPrice::_internal_set_tick_type(::Jde::Markets::Proto::Results::ETickType value) {
  
  tick_type_ = value;
}
inline void TickPrice::set_tick_type(::Jde::Markets::Proto::Results::ETickType value) {
  _internal_set_tick_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickPrice.tick_type)
}

// double price = 3;
inline void TickPrice::clear_price() {
  price_ = 0;
}
inline double TickPrice::_internal_price() const {
  return price_;
}
inline double TickPrice::price() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickPrice.price)
  return _internal_price();
}
inline void TickPrice::_internal_set_price(double value) {
  
  price_ = value;
}
inline void TickPrice::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickPrice.price)
}

// .Jde.Markets.Proto.Results.TickAttrib attributes = 4;
inline bool TickPrice::_internal_has_attributes() const {
  return this != internal_default_instance() && attributes_ != nullptr;
}
inline bool TickPrice::has_attributes() const {
  return _internal_has_attributes();
}
inline void TickPrice::clear_attributes() {
  if (GetArenaForAllocation() == nullptr && attributes_ != nullptr) {
    delete attributes_;
  }
  attributes_ = nullptr;
}
inline const ::Jde::Markets::Proto::Results::TickAttrib& TickPrice::_internal_attributes() const {
  const ::Jde::Markets::Proto::Results::TickAttrib* p = attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::Results::TickAttrib&>(
      ::Jde::Markets::Proto::Results::_TickAttrib_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::TickAttrib& TickPrice::attributes() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickPrice.attributes)
  return _internal_attributes();
}
inline void TickPrice::unsafe_arena_set_allocated_attributes(
    ::Jde::Markets::Proto::Results::TickAttrib* attributes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attributes_);
  }
  attributes_ = attributes;
  if (attributes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.TickPrice.attributes)
}
inline ::Jde::Markets::Proto::Results::TickAttrib* TickPrice::release_attributes() {
  
  ::Jde::Markets::Proto::Results::TickAttrib* temp = attributes_;
  attributes_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::Results::TickAttrib* TickPrice::unsafe_arena_release_attributes() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.TickPrice.attributes)
  
  ::Jde::Markets::Proto::Results::TickAttrib* temp = attributes_;
  attributes_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Results::TickAttrib* TickPrice::_internal_mutable_attributes() {
  
  if (attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Results::TickAttrib>(GetArenaForAllocation());
    attributes_ = p;
  }
  return attributes_;
}
inline ::Jde::Markets::Proto::Results::TickAttrib* TickPrice::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.TickPrice.attributes)
  return _internal_mutable_attributes();
}
inline void TickPrice::set_allocated_attributes(::Jde::Markets::Proto::Results::TickAttrib* attributes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete attributes_;
  }
  if (attributes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Jde::Markets::Proto::Results::TickAttrib>::GetOwningArena(attributes);
    if (message_arena != submessage_arena) {
      attributes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attributes, submessage_arena);
    }
    
  } else {
    
  }
  attributes_ = attributes;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.TickPrice.attributes)
}

// -------------------------------------------------------------------

// TickSize

// uint32 request_id = 1;
inline void TickSize::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TickSize::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TickSize::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickSize.request_id)
  return _internal_request_id();
}
inline void TickSize::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void TickSize::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickSize.request_id)
}

// .Jde.Markets.Proto.Results.ETickType tick_type = 2;
inline void TickSize::clear_tick_type() {
  tick_type_ = 0;
}
inline ::Jde::Markets::Proto::Results::ETickType TickSize::_internal_tick_type() const {
  return static_cast< ::Jde::Markets::Proto::Results::ETickType >(tick_type_);
}
inline ::Jde::Markets::Proto::Results::ETickType TickSize::tick_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickSize.tick_type)
  return _internal_tick_type();
}
inline void TickSize::_internal_set_tick_type(::Jde::Markets::Proto::Results::ETickType value) {
  
  tick_type_ = value;
}
inline void TickSize::set_tick_type(::Jde::Markets::Proto::Results::ETickType value) {
  _internal_set_tick_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickSize.tick_type)
}

// int32 size = 3;
inline void TickSize::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickSize::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TickSize::size() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickSize.size)
  return _internal_size();
}
inline void TickSize::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void TickSize::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickSize.size)
}

// -------------------------------------------------------------------

// TickString

// uint32 request_id = 1;
inline void TickString::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TickString::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TickString::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickString.request_id)
  return _internal_request_id();
}
inline void TickString::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void TickString::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickString.request_id)
}

// .Jde.Markets.Proto.Results.ETickType tick_type = 2;
inline void TickString::clear_tick_type() {
  tick_type_ = 0;
}
inline ::Jde::Markets::Proto::Results::ETickType TickString::_internal_tick_type() const {
  return static_cast< ::Jde::Markets::Proto::Results::ETickType >(tick_type_);
}
inline ::Jde::Markets::Proto::Results::ETickType TickString::tick_type() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickString.tick_type)
  return _internal_tick_type();
}
inline void TickString::_internal_set_tick_type(::Jde::Markets::Proto::Results::ETickType value) {
  
  tick_type_ = value;
}
inline void TickString::set_tick_type(::Jde::Markets::Proto::Results::ETickType value) {
  _internal_set_tick_type(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickString.tick_type)
}

// string value = 3;
inline void TickString::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& TickString::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.TickString.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TickString::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.TickString.value)
}
inline std::string* TickString::mutable_value() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.TickString.value)
  return _internal_mutable_value();
}
inline const std::string& TickString::_internal_value() const {
  return value_.Get();
}
inline void TickString::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TickString::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TickString::release_value() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.TickString.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TickString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.TickString.value)
}

// -------------------------------------------------------------------

// OrderState

// string status = 1;
inline void OrderState::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& OrderState::status() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.status)
}
inline std::string* OrderState::mutable_status() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.status)
  return _internal_mutable_status();
}
inline const std::string& OrderState::_internal_status() const {
  return status_.Get();
}
inline void OrderState::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_status() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.status)
}

// string init_margin_before = 2;
inline void OrderState::clear_init_margin_before() {
  init_margin_before_.ClearToEmpty();
}
inline const std::string& OrderState::init_margin_before() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.init_margin_before)
  return _internal_init_margin_before();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_init_margin_before(ArgT0&& arg0, ArgT... args) {
 
 init_margin_before_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.init_margin_before)
}
inline std::string* OrderState::mutable_init_margin_before() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.init_margin_before)
  return _internal_mutable_init_margin_before();
}
inline const std::string& OrderState::_internal_init_margin_before() const {
  return init_margin_before_.Get();
}
inline void OrderState::_internal_set_init_margin_before(const std::string& value) {
  
  init_margin_before_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_init_margin_before() {
  
  return init_margin_before_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_init_margin_before() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.init_margin_before)
  return init_margin_before_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_init_margin_before(std::string* init_margin_before) {
  if (init_margin_before != nullptr) {
    
  } else {
    
  }
  init_margin_before_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), init_margin_before,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.init_margin_before)
}

// string maint_margin_before = 3;
inline void OrderState::clear_maint_margin_before() {
  maint_margin_before_.ClearToEmpty();
}
inline const std::string& OrderState::maint_margin_before() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.maint_margin_before)
  return _internal_maint_margin_before();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_maint_margin_before(ArgT0&& arg0, ArgT... args) {
 
 maint_margin_before_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.maint_margin_before)
}
inline std::string* OrderState::mutable_maint_margin_before() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.maint_margin_before)
  return _internal_mutable_maint_margin_before();
}
inline const std::string& OrderState::_internal_maint_margin_before() const {
  return maint_margin_before_.Get();
}
inline void OrderState::_internal_set_maint_margin_before(const std::string& value) {
  
  maint_margin_before_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_maint_margin_before() {
  
  return maint_margin_before_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_maint_margin_before() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.maint_margin_before)
  return maint_margin_before_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_maint_margin_before(std::string* maint_margin_before) {
  if (maint_margin_before != nullptr) {
    
  } else {
    
  }
  maint_margin_before_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maint_margin_before,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.maint_margin_before)
}

// string equity_with_loan_before = 4;
inline void OrderState::clear_equity_with_loan_before() {
  equity_with_loan_before_.ClearToEmpty();
}
inline const std::string& OrderState::equity_with_loan_before() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.equity_with_loan_before)
  return _internal_equity_with_loan_before();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_equity_with_loan_before(ArgT0&& arg0, ArgT... args) {
 
 equity_with_loan_before_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.equity_with_loan_before)
}
inline std::string* OrderState::mutable_equity_with_loan_before() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.equity_with_loan_before)
  return _internal_mutable_equity_with_loan_before();
}
inline const std::string& OrderState::_internal_equity_with_loan_before() const {
  return equity_with_loan_before_.Get();
}
inline void OrderState::_internal_set_equity_with_loan_before(const std::string& value) {
  
  equity_with_loan_before_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_equity_with_loan_before() {
  
  return equity_with_loan_before_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_equity_with_loan_before() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.equity_with_loan_before)
  return equity_with_loan_before_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_equity_with_loan_before(std::string* equity_with_loan_before) {
  if (equity_with_loan_before != nullptr) {
    
  } else {
    
  }
  equity_with_loan_before_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equity_with_loan_before,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.equity_with_loan_before)
}

// string init_margin_change = 5;
inline void OrderState::clear_init_margin_change() {
  init_margin_change_.ClearToEmpty();
}
inline const std::string& OrderState::init_margin_change() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.init_margin_change)
  return _internal_init_margin_change();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_init_margin_change(ArgT0&& arg0, ArgT... args) {
 
 init_margin_change_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.init_margin_change)
}
inline std::string* OrderState::mutable_init_margin_change() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.init_margin_change)
  return _internal_mutable_init_margin_change();
}
inline const std::string& OrderState::_internal_init_margin_change() const {
  return init_margin_change_.Get();
}
inline void OrderState::_internal_set_init_margin_change(const std::string& value) {
  
  init_margin_change_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_init_margin_change() {
  
  return init_margin_change_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_init_margin_change() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.init_margin_change)
  return init_margin_change_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_init_margin_change(std::string* init_margin_change) {
  if (init_margin_change != nullptr) {
    
  } else {
    
  }
  init_margin_change_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), init_margin_change,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.init_margin_change)
}

// string maint_margin_change = 6;
inline void OrderState::clear_maint_margin_change() {
  maint_margin_change_.ClearToEmpty();
}
inline const std::string& OrderState::maint_margin_change() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.maint_margin_change)
  return _internal_maint_margin_change();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_maint_margin_change(ArgT0&& arg0, ArgT... args) {
 
 maint_margin_change_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.maint_margin_change)
}
inline std::string* OrderState::mutable_maint_margin_change() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.maint_margin_change)
  return _internal_mutable_maint_margin_change();
}
inline const std::string& OrderState::_internal_maint_margin_change() const {
  return maint_margin_change_.Get();
}
inline void OrderState::_internal_set_maint_margin_change(const std::string& value) {
  
  maint_margin_change_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_maint_margin_change() {
  
  return maint_margin_change_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_maint_margin_change() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.maint_margin_change)
  return maint_margin_change_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_maint_margin_change(std::string* maint_margin_change) {
  if (maint_margin_change != nullptr) {
    
  } else {
    
  }
  maint_margin_change_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maint_margin_change,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.maint_margin_change)
}

// string equity_with_loan_change = 7;
inline void OrderState::clear_equity_with_loan_change() {
  equity_with_loan_change_.ClearToEmpty();
}
inline const std::string& OrderState::equity_with_loan_change() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.equity_with_loan_change)
  return _internal_equity_with_loan_change();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_equity_with_loan_change(ArgT0&& arg0, ArgT... args) {
 
 equity_with_loan_change_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.equity_with_loan_change)
}
inline std::string* OrderState::mutable_equity_with_loan_change() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.equity_with_loan_change)
  return _internal_mutable_equity_with_loan_change();
}
inline const std::string& OrderState::_internal_equity_with_loan_change() const {
  return equity_with_loan_change_.Get();
}
inline void OrderState::_internal_set_equity_with_loan_change(const std::string& value) {
  
  equity_with_loan_change_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_equity_with_loan_change() {
  
  return equity_with_loan_change_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_equity_with_loan_change() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.equity_with_loan_change)
  return equity_with_loan_change_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_equity_with_loan_change(std::string* equity_with_loan_change) {
  if (equity_with_loan_change != nullptr) {
    
  } else {
    
  }
  equity_with_loan_change_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equity_with_loan_change,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.equity_with_loan_change)
}

// string init_margin_after = 8;
inline void OrderState::clear_init_margin_after() {
  init_margin_after_.ClearToEmpty();
}
inline const std::string& OrderState::init_margin_after() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.init_margin_after)
  return _internal_init_margin_after();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_init_margin_after(ArgT0&& arg0, ArgT... args) {
 
 init_margin_after_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.init_margin_after)
}
inline std::string* OrderState::mutable_init_margin_after() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.init_margin_after)
  return _internal_mutable_init_margin_after();
}
inline const std::string& OrderState::_internal_init_margin_after() const {
  return init_margin_after_.Get();
}
inline void OrderState::_internal_set_init_margin_after(const std::string& value) {
  
  init_margin_after_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_init_margin_after() {
  
  return init_margin_after_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_init_margin_after() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.init_margin_after)
  return init_margin_after_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_init_margin_after(std::string* init_margin_after) {
  if (init_margin_after != nullptr) {
    
  } else {
    
  }
  init_margin_after_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), init_margin_after,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.init_margin_after)
}

// string maint_margin_after = 9;
inline void OrderState::clear_maint_margin_after() {
  maint_margin_after_.ClearToEmpty();
}
inline const std::string& OrderState::maint_margin_after() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.maint_margin_after)
  return _internal_maint_margin_after();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_maint_margin_after(ArgT0&& arg0, ArgT... args) {
 
 maint_margin_after_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.maint_margin_after)
}
inline std::string* OrderState::mutable_maint_margin_after() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.maint_margin_after)
  return _internal_mutable_maint_margin_after();
}
inline const std::string& OrderState::_internal_maint_margin_after() const {
  return maint_margin_after_.Get();
}
inline void OrderState::_internal_set_maint_margin_after(const std::string& value) {
  
  maint_margin_after_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_maint_margin_after() {
  
  return maint_margin_after_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_maint_margin_after() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.maint_margin_after)
  return maint_margin_after_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_maint_margin_after(std::string* maint_margin_after) {
  if (maint_margin_after != nullptr) {
    
  } else {
    
  }
  maint_margin_after_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maint_margin_after,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.maint_margin_after)
}

// string equity_with_loan_after = 10;
inline void OrderState::clear_equity_with_loan_after() {
  equity_with_loan_after_.ClearToEmpty();
}
inline const std::string& OrderState::equity_with_loan_after() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.equity_with_loan_after)
  return _internal_equity_with_loan_after();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_equity_with_loan_after(ArgT0&& arg0, ArgT... args) {
 
 equity_with_loan_after_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.equity_with_loan_after)
}
inline std::string* OrderState::mutable_equity_with_loan_after() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.equity_with_loan_after)
  return _internal_mutable_equity_with_loan_after();
}
inline const std::string& OrderState::_internal_equity_with_loan_after() const {
  return equity_with_loan_after_.Get();
}
inline void OrderState::_internal_set_equity_with_loan_after(const std::string& value) {
  
  equity_with_loan_after_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_equity_with_loan_after() {
  
  return equity_with_loan_after_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_equity_with_loan_after() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.equity_with_loan_after)
  return equity_with_loan_after_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_equity_with_loan_after(std::string* equity_with_loan_after) {
  if (equity_with_loan_after != nullptr) {
    
  } else {
    
  }
  equity_with_loan_after_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), equity_with_loan_after,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.equity_with_loan_after)
}

// double commission = 11;
inline void OrderState::clear_commission() {
  commission_ = 0;
}
inline double OrderState::_internal_commission() const {
  return commission_;
}
inline double OrderState::commission() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.commission)
  return _internal_commission();
}
inline void OrderState::_internal_set_commission(double value) {
  
  commission_ = value;
}
inline void OrderState::set_commission(double value) {
  _internal_set_commission(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.commission)
}

// double min_commission = 12;
inline void OrderState::clear_min_commission() {
  min_commission_ = 0;
}
inline double OrderState::_internal_min_commission() const {
  return min_commission_;
}
inline double OrderState::min_commission() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.min_commission)
  return _internal_min_commission();
}
inline void OrderState::_internal_set_min_commission(double value) {
  
  min_commission_ = value;
}
inline void OrderState::set_min_commission(double value) {
  _internal_set_min_commission(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.min_commission)
}

// double max_commission = 13;
inline void OrderState::clear_max_commission() {
  max_commission_ = 0;
}
inline double OrderState::_internal_max_commission() const {
  return max_commission_;
}
inline double OrderState::max_commission() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.max_commission)
  return _internal_max_commission();
}
inline void OrderState::_internal_set_max_commission(double value) {
  
  max_commission_ = value;
}
inline void OrderState::set_max_commission(double value) {
  _internal_set_max_commission(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.max_commission)
}

// string commission_currency = 14;
inline void OrderState::clear_commission_currency() {
  commission_currency_.ClearToEmpty();
}
inline const std::string& OrderState::commission_currency() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.commission_currency)
  return _internal_commission_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_commission_currency(ArgT0&& arg0, ArgT... args) {
 
 commission_currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.commission_currency)
}
inline std::string* OrderState::mutable_commission_currency() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.commission_currency)
  return _internal_mutable_commission_currency();
}
inline const std::string& OrderState::_internal_commission_currency() const {
  return commission_currency_.Get();
}
inline void OrderState::_internal_set_commission_currency(const std::string& value) {
  
  commission_currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_commission_currency() {
  
  return commission_currency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_commission_currency() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.commission_currency)
  return commission_currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_commission_currency(std::string* commission_currency) {
  if (commission_currency != nullptr) {
    
  } else {
    
  }
  commission_currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commission_currency,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.commission_currency)
}

// string warning_text = 15;
inline void OrderState::clear_warning_text() {
  warning_text_.ClearToEmpty();
}
inline const std::string& OrderState::warning_text() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.warning_text)
  return _internal_warning_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_warning_text(ArgT0&& arg0, ArgT... args) {
 
 warning_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.warning_text)
}
inline std::string* OrderState::mutable_warning_text() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.warning_text)
  return _internal_mutable_warning_text();
}
inline const std::string& OrderState::_internal_warning_text() const {
  return warning_text_.Get();
}
inline void OrderState::_internal_set_warning_text(const std::string& value) {
  
  warning_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_warning_text() {
  
  return warning_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_warning_text() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.warning_text)
  return warning_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_warning_text(std::string* warning_text) {
  if (warning_text != nullptr) {
    
  } else {
    
  }
  warning_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), warning_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.warning_text)
}

// string completed_time = 16;
inline void OrderState::clear_completed_time() {
  completed_time_.ClearToEmpty();
}
inline const std::string& OrderState::completed_time() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.completed_time)
  return _internal_completed_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_completed_time(ArgT0&& arg0, ArgT... args) {
 
 completed_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.completed_time)
}
inline std::string* OrderState::mutable_completed_time() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.completed_time)
  return _internal_mutable_completed_time();
}
inline const std::string& OrderState::_internal_completed_time() const {
  return completed_time_.Get();
}
inline void OrderState::_internal_set_completed_time(const std::string& value) {
  
  completed_time_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_completed_time() {
  
  return completed_time_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_completed_time() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.completed_time)
  return completed_time_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_completed_time(std::string* completed_time) {
  if (completed_time != nullptr) {
    
  } else {
    
  }
  completed_time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), completed_time,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.completed_time)
}

// string completed_status = 17;
inline void OrderState::clear_completed_status() {
  completed_status_.ClearToEmpty();
}
inline const std::string& OrderState::completed_status() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OrderState.completed_status)
  return _internal_completed_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OrderState::set_completed_status(ArgT0&& arg0, ArgT... args) {
 
 completed_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OrderState.completed_status)
}
inline std::string* OrderState::mutable_completed_status() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OrderState.completed_status)
  return _internal_mutable_completed_status();
}
inline const std::string& OrderState::_internal_completed_status() const {
  return completed_status_.Get();
}
inline void OrderState::_internal_set_completed_status(const std::string& value) {
  
  completed_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* OrderState::_internal_mutable_completed_status() {
  
  return completed_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* OrderState::release_completed_status() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OrderState.completed_status)
  return completed_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void OrderState::set_allocated_completed_status(std::string* completed_status) {
  if (completed_status != nullptr) {
    
  } else {
    
  }
  completed_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), completed_status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OrderState.completed_status)
}

// -------------------------------------------------------------------

// OpenOrder

// uint32 web_id = 1;
inline void OpenOrder::clear_web_id() {
  web_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenOrder::_internal_web_id() const {
  return web_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenOrder::web_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OpenOrder.web_id)
  return _internal_web_id();
}
inline void OpenOrder::_internal_set_web_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  web_id_ = value;
}
inline void OpenOrder::set_web_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_web_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OpenOrder.web_id)
}

// .Jde.Markets.Proto.Contract contract = 2;
inline bool OpenOrder::_internal_has_contract() const {
  return this != internal_default_instance() && contract_ != nullptr;
}
inline bool OpenOrder::has_contract() const {
  return _internal_has_contract();
}
inline const ::Jde::Markets::Proto::Contract& OpenOrder::_internal_contract() const {
  const ::Jde::Markets::Proto::Contract* p = contract_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::Contract&>(
      ::Jde::Markets::Proto::_Contract_default_instance_);
}
inline const ::Jde::Markets::Proto::Contract& OpenOrder::contract() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OpenOrder.contract)
  return _internal_contract();
}
inline void OpenOrder::unsafe_arena_set_allocated_contract(
    ::Jde::Markets::Proto::Contract* contract) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  contract_ = contract;
  if (contract) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.OpenOrder.contract)
}
inline ::Jde::Markets::Proto::Contract* OpenOrder::release_contract() {
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::Contract* OpenOrder::unsafe_arena_release_contract() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OpenOrder.contract)
  
  ::Jde::Markets::Proto::Contract* temp = contract_;
  contract_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Contract* OpenOrder::_internal_mutable_contract() {
  
  if (contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Contract>(GetArenaForAllocation());
    contract_ = p;
  }
  return contract_;
}
inline ::Jde::Markets::Proto::Contract* OpenOrder::mutable_contract() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OpenOrder.contract)
  return _internal_mutable_contract();
}
inline void OpenOrder::set_allocated_contract(::Jde::Markets::Proto::Contract* contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract_);
  }
  if (contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contract));
    if (message_arena != submessage_arena) {
      contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contract, submessage_arena);
    }
    
  } else {
    
  }
  contract_ = contract;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OpenOrder.contract)
}

// .Jde.Markets.Proto.Order order = 3;
inline bool OpenOrder::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool OpenOrder::has_order() const {
  return _internal_has_order();
}
inline const ::Jde::Markets::Proto::Order& OpenOrder::_internal_order() const {
  const ::Jde::Markets::Proto::Order* p = order_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::Order&>(
      ::Jde::Markets::Proto::_Order_default_instance_);
}
inline const ::Jde::Markets::Proto::Order& OpenOrder::order() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OpenOrder.order)
  return _internal_order();
}
inline void OpenOrder::unsafe_arena_set_allocated_order(
    ::Jde::Markets::Proto::Order* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.OpenOrder.order)
}
inline ::Jde::Markets::Proto::Order* OpenOrder::release_order() {
  
  ::Jde::Markets::Proto::Order* temp = order_;
  order_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::Order* OpenOrder::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OpenOrder.order)
  
  ::Jde::Markets::Proto::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Order* OpenOrder::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Order>(GetArenaForAllocation());
    order_ = p;
  }
  return order_;
}
inline ::Jde::Markets::Proto::Order* OpenOrder::mutable_order() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OpenOrder.order)
  return _internal_mutable_order();
}
inline void OpenOrder::set_allocated_order(::Jde::Markets::Proto::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order));
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OpenOrder.order)
}

// .Jde.Markets.Proto.Results.OrderState state = 4;
inline bool OpenOrder::_internal_has_state() const {
  return this != internal_default_instance() && state_ != nullptr;
}
inline bool OpenOrder::has_state() const {
  return _internal_has_state();
}
inline void OpenOrder::clear_state() {
  if (GetArenaForAllocation() == nullptr && state_ != nullptr) {
    delete state_;
  }
  state_ = nullptr;
}
inline const ::Jde::Markets::Proto::Results::OrderState& OpenOrder::_internal_state() const {
  const ::Jde::Markets::Proto::Results::OrderState* p = state_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Proto::Results::OrderState&>(
      ::Jde::Markets::Proto::Results::_OrderState_default_instance_);
}
inline const ::Jde::Markets::Proto::Results::OrderState& OpenOrder::state() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OpenOrder.state)
  return _internal_state();
}
inline void OpenOrder::unsafe_arena_set_allocated_state(
    ::Jde::Markets::Proto::Results::OrderState* state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(state_);
  }
  state_ = state;
  if (state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Proto.Results.OpenOrder.state)
}
inline ::Jde::Markets::Proto::Results::OrderState* OpenOrder::release_state() {
  
  ::Jde::Markets::Proto::Results::OrderState* temp = state_;
  state_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Proto::Results::OrderState* OpenOrder::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.OpenOrder.state)
  
  ::Jde::Markets::Proto::Results::OrderState* temp = state_;
  state_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Proto::Results::OrderState* OpenOrder::_internal_mutable_state() {
  
  if (state_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Proto::Results::OrderState>(GetArenaForAllocation());
    state_ = p;
  }
  return state_;
}
inline ::Jde::Markets::Proto::Results::OrderState* OpenOrder::mutable_state() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OpenOrder.state)
  return _internal_mutable_state();
}
inline void OpenOrder::set_allocated_state(::Jde::Markets::Proto::Results::OrderState* state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete state_;
  }
  if (state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Jde::Markets::Proto::Results::OrderState>::GetOwningArena(state);
    if (message_arena != submessage_arena) {
      state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, state, submessage_arena);
    }
    
  } else {
    
  }
  state_ = state;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.OpenOrder.state)
}

// -------------------------------------------------------------------

// ExchangeContracts

// .Jde.Markets.Proto.Exchanges exchange = 1;
inline void ExchangeContracts::clear_exchange() {
  exchange_ = 0;
}
inline ::Jde::Markets::Proto::Exchanges ExchangeContracts::_internal_exchange() const {
  return static_cast< ::Jde::Markets::Proto::Exchanges >(exchange_);
}
inline ::Jde::Markets::Proto::Exchanges ExchangeContracts::exchange() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ExchangeContracts.exchange)
  return _internal_exchange();
}
inline void ExchangeContracts::_internal_set_exchange(::Jde::Markets::Proto::Exchanges value) {
  
  exchange_ = value;
}
inline void ExchangeContracts::set_exchange(::Jde::Markets::Proto::Exchanges value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ExchangeContracts.exchange)
}

// uint32 underlying_contract_id = 2;
inline void ExchangeContracts::clear_underlying_contract_id() {
  underlying_contract_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExchangeContracts::_internal_underlying_contract_id() const {
  return underlying_contract_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExchangeContracts::underlying_contract_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ExchangeContracts.underlying_contract_id)
  return _internal_underlying_contract_id();
}
inline void ExchangeContracts::_internal_set_underlying_contract_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  underlying_contract_id_ = value;
}
inline void ExchangeContracts::set_underlying_contract_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_underlying_contract_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ExchangeContracts.underlying_contract_id)
}

// string trading_class = 3;
inline void ExchangeContracts::clear_trading_class() {
  trading_class_.ClearToEmpty();
}
inline const std::string& ExchangeContracts::trading_class() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ExchangeContracts.trading_class)
  return _internal_trading_class();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExchangeContracts::set_trading_class(ArgT0&& arg0, ArgT... args) {
 
 trading_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ExchangeContracts.trading_class)
}
inline std::string* ExchangeContracts::mutable_trading_class() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ExchangeContracts.trading_class)
  return _internal_mutable_trading_class();
}
inline const std::string& ExchangeContracts::_internal_trading_class() const {
  return trading_class_.Get();
}
inline void ExchangeContracts::_internal_set_trading_class(const std::string& value) {
  
  trading_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExchangeContracts::_internal_mutable_trading_class() {
  
  return trading_class_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExchangeContracts::release_trading_class() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ExchangeContracts.trading_class)
  return trading_class_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExchangeContracts::set_allocated_trading_class(std::string* trading_class) {
  if (trading_class != nullptr) {
    
  } else {
    
  }
  trading_class_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trading_class,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ExchangeContracts.trading_class)
}

// string multiplier = 4;
inline void ExchangeContracts::clear_multiplier() {
  multiplier_.ClearToEmpty();
}
inline const std::string& ExchangeContracts::multiplier() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ExchangeContracts.multiplier)
  return _internal_multiplier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExchangeContracts::set_multiplier(ArgT0&& arg0, ArgT... args) {
 
 multiplier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ExchangeContracts.multiplier)
}
inline std::string* ExchangeContracts::mutable_multiplier() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.ExchangeContracts.multiplier)
  return _internal_mutable_multiplier();
}
inline const std::string& ExchangeContracts::_internal_multiplier() const {
  return multiplier_.Get();
}
inline void ExchangeContracts::_internal_set_multiplier(const std::string& value) {
  
  multiplier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExchangeContracts::_internal_mutable_multiplier() {
  
  return multiplier_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExchangeContracts::release_multiplier() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Proto.Results.ExchangeContracts.multiplier)
  return multiplier_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExchangeContracts::set_allocated_multiplier(std::string* multiplier) {
  if (multiplier != nullptr) {
    
  } else {
    
  }
  multiplier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multiplier,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Proto.Results.ExchangeContracts.multiplier)
}

// repeated uint32 expirations = 5;
inline int ExchangeContracts::_internal_expirations_size() const {
  return expirations_.size();
}
inline int ExchangeContracts::expirations_size() const {
  return _internal_expirations_size();
}
inline void ExchangeContracts::clear_expirations() {
  expirations_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExchangeContracts::_internal_expirations(int index) const {
  return expirations_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ExchangeContracts::expirations(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ExchangeContracts.expirations)
  return _internal_expirations(index);
}
inline void ExchangeContracts::set_expirations(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  expirations_.Set(index, value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ExchangeContracts.expirations)
}
inline void ExchangeContracts::_internal_add_expirations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  expirations_.Add(value);
}
inline void ExchangeContracts::add_expirations(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_expirations(value);
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.ExchangeContracts.expirations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExchangeContracts::_internal_expirations() const {
  return expirations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ExchangeContracts::expirations() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.ExchangeContracts.expirations)
  return _internal_expirations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExchangeContracts::_internal_mutable_expirations() {
  return &expirations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ExchangeContracts::mutable_expirations() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.ExchangeContracts.expirations)
  return _internal_mutable_expirations();
}

// repeated double strikes = 6;
inline int ExchangeContracts::_internal_strikes_size() const {
  return strikes_.size();
}
inline int ExchangeContracts::strikes_size() const {
  return _internal_strikes_size();
}
inline void ExchangeContracts::clear_strikes() {
  strikes_.Clear();
}
inline double ExchangeContracts::_internal_strikes(int index) const {
  return strikes_.Get(index);
}
inline double ExchangeContracts::strikes(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.ExchangeContracts.strikes)
  return _internal_strikes(index);
}
inline void ExchangeContracts::set_strikes(int index, double value) {
  strikes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.ExchangeContracts.strikes)
}
inline void ExchangeContracts::_internal_add_strikes(double value) {
  strikes_.Add(value);
}
inline void ExchangeContracts::add_strikes(double value) {
  _internal_add_strikes(value);
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.ExchangeContracts.strikes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ExchangeContracts::_internal_strikes() const {
  return strikes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
ExchangeContracts::strikes() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.ExchangeContracts.strikes)
  return _internal_strikes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ExchangeContracts::_internal_mutable_strikes() {
  return &strikes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
ExchangeContracts::mutable_strikes() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.ExchangeContracts.strikes)
  return _internal_mutable_strikes();
}

// -------------------------------------------------------------------

// OptionExchanges

// uint32 request_id = 1;
inline void OptionExchanges::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionExchanges::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OptionExchanges::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionExchanges.request_id)
  return _internal_request_id();
}
inline void OptionExchanges::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void OptionExchanges::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Proto.Results.OptionExchanges.request_id)
}

// repeated .Jde.Markets.Proto.Results.ExchangeContracts exchanges = 2;
inline int OptionExchanges::_internal_exchanges_size() const {
  return exchanges_.size();
}
inline int OptionExchanges::exchanges_size() const {
  return _internal_exchanges_size();
}
inline void OptionExchanges::clear_exchanges() {
  exchanges_.Clear();
}
inline ::Jde::Markets::Proto::Results::ExchangeContracts* OptionExchanges::mutable_exchanges(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Proto.Results.OptionExchanges.exchanges)
  return exchanges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ExchangeContracts >*
OptionExchanges::mutable_exchanges() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Proto.Results.OptionExchanges.exchanges)
  return &exchanges_;
}
inline const ::Jde::Markets::Proto::Results::ExchangeContracts& OptionExchanges::_internal_exchanges(int index) const {
  return exchanges_.Get(index);
}
inline const ::Jde::Markets::Proto::Results::ExchangeContracts& OptionExchanges::exchanges(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Proto.Results.OptionExchanges.exchanges)
  return _internal_exchanges(index);
}
inline ::Jde::Markets::Proto::Results::ExchangeContracts* OptionExchanges::_internal_add_exchanges() {
  return exchanges_.Add();
}
inline ::Jde::Markets::Proto::Results::ExchangeContracts* OptionExchanges::add_exchanges() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Proto.Results.OptionExchanges.exchanges)
  return _internal_add_exchanges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Proto::Results::ExchangeContracts >&
OptionExchanges::exchanges() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Proto.Results.OptionExchanges.exchanges)
  return exchanges_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Results
}  // namespace Proto
}  // namespace Markets
}  // namespace Jde

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Jde::Markets::Proto::Results::ETickType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Markets::Proto::Results::ETickType>() {
  return ::Jde::Markets::Proto::Results::ETickType_descriptor();
}
template <> struct is_proto_enum< ::Jde::Markets::Proto::Results::EResults> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Markets::Proto::Results::EResults>() {
  return ::Jde::Markets::Proto::Results::EResults_descriptor();
}
template <> struct is_proto_enum< ::Jde::Markets::Proto::Results::EOrderStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Markets::Proto::Results::EOrderStatus>() {
  return ::Jde::Markets::Proto::Results::EOrderStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_results_2eproto
