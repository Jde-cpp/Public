// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: edgar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_edgar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_edgar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_edgar_2eproto JDE_MARKETS_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct JDE_MARKETS_EXPORT TableStruct_edgar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern JDE_MARKETS_EXPORT const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_edgar_2eproto;
namespace Jde {
namespace Markets {
namespace Edgar {
namespace Proto {
class Company;
struct CompanyDefaultTypeInternal;
JDE_MARKETS_EXPORT extern CompanyDefaultTypeInternal _Company_default_instance_;
class File13F;
struct File13FDefaultTypeInternal;
JDE_MARKETS_EXPORT extern File13FDefaultTypeInternal _File13F_default_instance_;
class Filing;
struct FilingDefaultTypeInternal;
JDE_MARKETS_EXPORT extern FilingDefaultTypeInternal _Filing_default_instance_;
class Filings;
struct FilingsDefaultTypeInternal;
JDE_MARKETS_EXPORT extern FilingsDefaultTypeInternal _Filings_default_instance_;
class Form13F;
struct Form13FDefaultTypeInternal;
JDE_MARKETS_EXPORT extern Form13FDefaultTypeInternal _Form13F_default_instance_;
class InfoTable;
struct InfoTableDefaultTypeInternal;
JDE_MARKETS_EXPORT extern InfoTableDefaultTypeInternal _InfoTable_default_instance_;
class Investment;
struct InvestmentDefaultTypeInternal;
JDE_MARKETS_EXPORT extern InvestmentDefaultTypeInternal _Investment_default_instance_;
class Investor;
struct InvestorDefaultTypeInternal;
JDE_MARKETS_EXPORT extern InvestorDefaultTypeInternal _Investor_default_instance_;
class Investors;
struct InvestorsDefaultTypeInternal;
JDE_MARKETS_EXPORT extern InvestorsDefaultTypeInternal _Investors_default_instance_;
class MasterIndex;
struct MasterIndexDefaultTypeInternal;
JDE_MARKETS_EXPORT extern MasterIndexDefaultTypeInternal _MasterIndex_default_instance_;
}  // namespace Proto
}  // namespace Edgar
}  // namespace Markets
}  // namespace Jde
PROTOBUF_NAMESPACE_OPEN
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Edgar::Proto::Company* Arena::CreateMaybeMessage<::Jde::Markets::Edgar::Proto::Company>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Edgar::Proto::File13F* Arena::CreateMaybeMessage<::Jde::Markets::Edgar::Proto::File13F>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Edgar::Proto::Filing* Arena::CreateMaybeMessage<::Jde::Markets::Edgar::Proto::Filing>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Edgar::Proto::Filings* Arena::CreateMaybeMessage<::Jde::Markets::Edgar::Proto::Filings>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Edgar::Proto::Form13F* Arena::CreateMaybeMessage<::Jde::Markets::Edgar::Proto::Form13F>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Edgar::Proto::InfoTable* Arena::CreateMaybeMessage<::Jde::Markets::Edgar::Proto::InfoTable>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Edgar::Proto::Investment* Arena::CreateMaybeMessage<::Jde::Markets::Edgar::Proto::Investment>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Edgar::Proto::Investor* Arena::CreateMaybeMessage<::Jde::Markets::Edgar::Proto::Investor>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Edgar::Proto::Investors* Arena::CreateMaybeMessage<::Jde::Markets::Edgar::Proto::Investors>(Arena*);
template<> JDE_MARKETS_EXPORT ::Jde::Markets::Edgar::Proto::MasterIndex* Arena::CreateMaybeMessage<::Jde::Markets::Edgar::Proto::MasterIndex>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Jde {
namespace Markets {
namespace Edgar {
namespace Proto {

// ===================================================================

class JDE_MARKETS_EXPORT InfoTable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Edgar.Proto.InfoTable) */ {
 public:
  inline InfoTable() : InfoTable(nullptr) {}
  ~InfoTable() override;
  explicit constexpr InfoTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoTable(const InfoTable& from);
  InfoTable(InfoTable&& from) noexcept
    : InfoTable() {
    *this = ::std::move(from);
  }

  inline InfoTable& operator=(const InfoTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoTable& operator=(InfoTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoTable* internal_default_instance() {
    return reinterpret_cast<const InfoTable*>(
               &_InfoTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InfoTable& a, InfoTable& b) {
    a.Swap(&b);
  }
  inline void Swap(InfoTable* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InfoTable* New() const final {
    return new InfoTable();
  }

  InfoTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InfoTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InfoTable& from);
  void MergeFrom(const InfoTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InfoTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Edgar.Proto.InfoTable";
  }
  protected:
  explicit InfoTable(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCusipFieldNumber = 1,
    kClassIdFieldNumber = 2,
    kValueFieldNumber = 3,
    kSharesFieldNumber = 4,
    kIsPrincipalFieldNumber = 5,
  };
  // string cusip = 1;
  void clear_cusip();
  const std::string& cusip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cusip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cusip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_cusip();
  void set_allocated_cusip(std::string* cusip);
  private:
  const std::string& _internal_cusip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cusip(const std::string& value);
  std::string* _internal_mutable_cusip();
  public:

  // uint32 class_id = 2;
  void clear_class_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 class_id() const;
  void set_class_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_class_id() const;
  void _internal_set_class_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 shares = 4;
  void clear_shares();
  ::PROTOBUF_NAMESPACE_ID::int32 shares() const;
  void set_shares(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shares() const;
  void _internal_set_shares(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_principal = 5;
  void clear_is_principal();
  bool is_principal() const;
  void set_is_principal(bool value);
  private:
  bool _internal_is_principal() const;
  void _internal_set_is_principal(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Edgar.Proto.InfoTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cusip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 class_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  ::PROTOBUF_NAMESPACE_ID::int32 shares_;
  bool is_principal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_edgar_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Form13F final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Edgar.Proto.Form13F) */ {
 public:
  inline Form13F() : Form13F(nullptr) {}
  ~Form13F() override;
  explicit constexpr Form13F(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Form13F(const Form13F& from);
  Form13F(Form13F&& from) noexcept
    : Form13F() {
    *this = ::std::move(from);
  }

  inline Form13F& operator=(const Form13F& from) {
    CopyFrom(from);
    return *this;
  }
  inline Form13F& operator=(Form13F&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Form13F& default_instance() {
    return *internal_default_instance();
  }
  static inline const Form13F* internal_default_instance() {
    return reinterpret_cast<const Form13F*>(
               &_Form13F_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Form13F& a, Form13F& b) {
    a.Swap(&b);
  }
  inline void Swap(Form13F* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Form13F* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Form13F* New() const final {
    return new Form13F();
  }

  Form13F* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Form13F>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Form13F& from);
  void MergeFrom(const Form13F& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Form13F* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Edgar.Proto.Form13F";
  }
  protected:
  explicit Form13F(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHoldingsFieldNumber = 6,
    kCikFieldNumber = 1,
    kQuarterFieldNumber = 2,
    kYearFieldNumber = 3,
    kLineNumberFieldNumber = 4,
    kValueFieldNumber = 5,
  };
  // repeated .Jde.Markets.Edgar.Proto.InfoTable holdings = 6;
  int holdings_size() const;
  private:
  int _internal_holdings_size() const;
  public:
  void clear_holdings();
  ::Jde::Markets::Edgar::Proto::InfoTable* mutable_holdings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::InfoTable >*
      mutable_holdings();
  private:
  const ::Jde::Markets::Edgar::Proto::InfoTable& _internal_holdings(int index) const;
  ::Jde::Markets::Edgar::Proto::InfoTable* _internal_add_holdings();
  public:
  const ::Jde::Markets::Edgar::Proto::InfoTable& holdings(int index) const;
  ::Jde::Markets::Edgar::Proto::InfoTable* add_holdings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::InfoTable >&
      holdings() const;

  // uint32 cik = 1;
  void clear_cik();
  ::PROTOBUF_NAMESPACE_ID::uint32 cik() const;
  void set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cik() const;
  void _internal_set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 quarter = 2;
  void clear_quarter();
  ::PROTOBUF_NAMESPACE_ID::uint32 quarter() const;
  void set_quarter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quarter() const;
  void _internal_set_quarter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 year = 3;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::uint32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 line_number = 4;
  void clear_line_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 line_number() const;
  void set_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_line_number() const;
  void _internal_set_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 value = 5;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Edgar.Proto.Form13F)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::InfoTable > holdings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cik_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quarter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 year_;
  ::PROTOBUF_NAMESPACE_ID::uint32 line_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_edgar_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT File13F final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Edgar.Proto.File13F) */ {
 public:
  inline File13F() : File13F(nullptr) {}
  ~File13F() override;
  explicit constexpr File13F(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  File13F(const File13F& from);
  File13F(File13F&& from) noexcept
    : File13F() {
    *this = ::std::move(from);
  }

  inline File13F& operator=(const File13F& from) {
    CopyFrom(from);
    return *this;
  }
  inline File13F& operator=(File13F&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const File13F& default_instance() {
    return *internal_default_instance();
  }
  static inline const File13F* internal_default_instance() {
    return reinterpret_cast<const File13F*>(
               &_File13F_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(File13F& a, File13F& b) {
    a.Swap(&b);
  }
  inline void Swap(File13F* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File13F* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline File13F* New() const final {
    return new File13F();
  }

  File13F* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<File13F>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const File13F& from);
  void MergeFrom(const File13F& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File13F* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Edgar.Proto.File13F";
  }
  protected:
  explicit File13F(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormsFieldNumber = 1,
  };
  // repeated .Jde.Markets.Edgar.Proto.Form13F forms = 1;
  int forms_size() const;
  private:
  int _internal_forms_size() const;
  public:
  void clear_forms();
  ::Jde::Markets::Edgar::Proto::Form13F* mutable_forms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Form13F >*
      mutable_forms();
  private:
  const ::Jde::Markets::Edgar::Proto::Form13F& _internal_forms(int index) const;
  ::Jde::Markets::Edgar::Proto::Form13F* _internal_add_forms();
  public:
  const ::Jde::Markets::Edgar::Proto::Form13F& forms(int index) const;
  ::Jde::Markets::Edgar::Proto::Form13F* add_forms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Form13F >&
      forms() const;

  // @@protoc_insertion_point(class_scope:Jde.Markets.Edgar.Proto.File13F)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Form13F > forms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_edgar_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Investment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Edgar.Proto.Investment) */ {
 public:
  inline Investment() : Investment(nullptr) {}
  ~Investment() override;
  explicit constexpr Investment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Investment(const Investment& from);
  Investment(Investment&& from) noexcept
    : Investment() {
    *this = ::std::move(from);
  }

  inline Investment& operator=(const Investment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Investment& operator=(Investment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Investment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Investment* internal_default_instance() {
    return reinterpret_cast<const Investment*>(
               &_Investment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Investment& a, Investment& b) {
    a.Swap(&b);
  }
  inline void Swap(Investment* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Investment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Investment* New() const final {
    return new Investment();
  }

  Investment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Investment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Investment& from);
  void MergeFrom(const Investment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Investment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Edgar.Proto.Investment";
  }
  protected:
  explicit Investment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 1,
    kPercentFieldNumber = 2,
  };
  // .Jde.Markets.Edgar.Proto.InfoTable table = 1;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const ::Jde::Markets::Edgar::Proto::InfoTable& table() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Markets::Edgar::Proto::InfoTable* release_table();
  ::Jde::Markets::Edgar::Proto::InfoTable* mutable_table();
  void set_allocated_table(::Jde::Markets::Edgar::Proto::InfoTable* table);
  private:
  const ::Jde::Markets::Edgar::Proto::InfoTable& _internal_table() const;
  ::Jde::Markets::Edgar::Proto::InfoTable* _internal_mutable_table();
  public:
  void unsafe_arena_set_allocated_table(
      ::Jde::Markets::Edgar::Proto::InfoTable* table);
  ::Jde::Markets::Edgar::Proto::InfoTable* unsafe_arena_release_table();

  // float percent = 2;
  void clear_percent();
  float percent() const;
  void set_percent(float value);
  private:
  float _internal_percent() const;
  void _internal_set_percent(float value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Edgar.Proto.Investment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Jde::Markets::Edgar::Proto::InfoTable* table_;
  float percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_edgar_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Investor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Edgar.Proto.Investor) */ {
 public:
  inline Investor() : Investor(nullptr) {}
  ~Investor() override;
  explicit constexpr Investor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Investor(const Investor& from);
  Investor(Investor&& from) noexcept
    : Investor() {
    *this = ::std::move(from);
  }

  inline Investor& operator=(const Investor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Investor& operator=(Investor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Investor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Investor* internal_default_instance() {
    return reinterpret_cast<const Investor*>(
               &_Investor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Investor& a, Investor& b) {
    a.Swap(&b);
  }
  inline void Swap(Investor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Investor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Investor* New() const final {
    return new Investor();
  }

  Investor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Investor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Investor& from);
  void MergeFrom(const Investor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Investor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Edgar.Proto.Investor";
  }
  protected:
  explicit Investor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentFieldNumber = 3,
    kPreviousFieldNumber = 4,
    kCikFieldNumber = 1,
    kEndPeriodFieldNumber = 2,
  };
  // repeated .Jde.Markets.Edgar.Proto.Investment current = 3;
  int current_size() const;
  private:
  int _internal_current_size() const;
  public:
  void clear_current();
  ::Jde::Markets::Edgar::Proto::Investment* mutable_current(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investment >*
      mutable_current();
  private:
  const ::Jde::Markets::Edgar::Proto::Investment& _internal_current(int index) const;
  ::Jde::Markets::Edgar::Proto::Investment* _internal_add_current();
  public:
  const ::Jde::Markets::Edgar::Proto::Investment& current(int index) const;
  ::Jde::Markets::Edgar::Proto::Investment* add_current();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investment >&
      current() const;

  // repeated .Jde.Markets.Edgar.Proto.Investment previous = 4;
  int previous_size() const;
  private:
  int _internal_previous_size() const;
  public:
  void clear_previous();
  ::Jde::Markets::Edgar::Proto::Investment* mutable_previous(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investment >*
      mutable_previous();
  private:
  const ::Jde::Markets::Edgar::Proto::Investment& _internal_previous(int index) const;
  ::Jde::Markets::Edgar::Proto::Investment* _internal_add_previous();
  public:
  const ::Jde::Markets::Edgar::Proto::Investment& previous(int index) const;
  ::Jde::Markets::Edgar::Proto::Investment* add_previous();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investment >&
      previous() const;

  // uint32 cik = 1;
  void clear_cik();
  ::PROTOBUF_NAMESPACE_ID::uint32 cik() const;
  void set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cik() const;
  void _internal_set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 end_period = 2;
  void clear_end_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_period() const;
  void set_end_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end_period() const;
  void _internal_set_end_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Edgar.Proto.Investor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investment > current_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investment > previous_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cik_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_edgar_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Company final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Edgar.Proto.Company) */ {
 public:
  inline Company() : Company(nullptr) {}
  ~Company() override;
  explicit constexpr Company(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Company(const Company& from);
  Company(Company&& from) noexcept
    : Company() {
    *this = ::std::move(from);
  }

  inline Company& operator=(const Company& from) {
    CopyFrom(from);
    return *this;
  }
  inline Company& operator=(Company&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Company& default_instance() {
    return *internal_default_instance();
  }
  static inline const Company* internal_default_instance() {
    return reinterpret_cast<const Company*>(
               &_Company_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Company& a, Company& b) {
    a.Swap(&b);
  }
  inline void Swap(Company* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Company* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Company* New() const final {
    return new Company();
  }

  Company* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Company>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Company& from);
  void MergeFrom(const Company& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Company* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Edgar.Proto.Company";
  }
  protected:
  explicit Company(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCikFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 cik = 1;
  void clear_cik();
  ::PROTOBUF_NAMESPACE_ID::uint32 cik() const;
  void set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cik() const;
  void _internal_set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Edgar.Proto.Company)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cik_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_edgar_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Investors final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Edgar.Proto.Investors) */ {
 public:
  inline Investors() : Investors(nullptr) {}
  ~Investors() override;
  explicit constexpr Investors(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Investors(const Investors& from);
  Investors(Investors&& from) noexcept
    : Investors() {
    *this = ::std::move(from);
  }

  inline Investors& operator=(const Investors& from) {
    CopyFrom(from);
    return *this;
  }
  inline Investors& operator=(Investors&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Investors& default_instance() {
    return *internal_default_instance();
  }
  static inline const Investors* internal_default_instance() {
    return reinterpret_cast<const Investors*>(
               &_Investors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Investors& a, Investors& b) {
    a.Swap(&b);
  }
  inline void Swap(Investors* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Investors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Investors* New() const final {
    return new Investors();
  }

  Investors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Investors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Investors& from);
  void MergeFrom(const Investors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Investors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Edgar.Proto.Investors";
  }
  protected:
  explicit Investors(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kCompaniesFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // repeated .Jde.Markets.Edgar.Proto.Investor values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::Jde::Markets::Edgar::Proto::Investor* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investor >*
      mutable_values();
  private:
  const ::Jde::Markets::Edgar::Proto::Investor& _internal_values(int index) const;
  ::Jde::Markets::Edgar::Proto::Investor* _internal_add_values();
  public:
  const ::Jde::Markets::Edgar::Proto::Investor& values(int index) const;
  ::Jde::Markets::Edgar::Proto::Investor* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investor >&
      values() const;

  // repeated .Jde.Markets.Edgar.Proto.Company companies = 3;
  int companies_size() const;
  private:
  int _internal_companies_size() const;
  public:
  void clear_companies();
  ::Jde::Markets::Edgar::Proto::Company* mutable_companies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Company >*
      mutable_companies();
  private:
  const ::Jde::Markets::Edgar::Proto::Company& _internal_companies(int index) const;
  ::Jde::Markets::Edgar::Proto::Company* _internal_add_companies();
  public:
  const ::Jde::Markets::Edgar::Proto::Company& companies(int index) const;
  ::Jde::Markets::Edgar::Proto::Company* add_companies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Company >&
      companies() const;

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Edgar.Proto.Investors)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investor > values_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Company > companies_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_edgar_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Filing final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Edgar.Proto.Filing) */ {
 public:
  inline Filing() : Filing(nullptr) {}
  ~Filing() override;
  explicit constexpr Filing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Filing(const Filing& from);
  Filing(Filing&& from) noexcept
    : Filing() {
    *this = ::std::move(from);
  }

  inline Filing& operator=(const Filing& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filing& operator=(Filing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Filing& default_instance() {
    return *internal_default_instance();
  }
  static inline const Filing* internal_default_instance() {
    return reinterpret_cast<const Filing*>(
               &_Filing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Filing& a, Filing& b) {
    a.Swap(&b);
  }
  inline void Swap(Filing* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Filing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Filing* New() const final {
    return new Filing();
  }

  Filing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Filing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Filing& from);
  void MergeFrom(const Filing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Edgar.Proto.Filing";
  }
  protected:
  explicit Filing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineNumberFieldNumber = 1,
    kCikFieldNumber = 2,
    kFormIdFieldNumber = 3,
    kSubmitterFieldNumber = 4,
    kYearFieldNumber = 5,
    kSequenceFieldNumber = 6,
    kFilingDayFieldNumber = 7,
    kPeriodEndFieldNumber = 8,
  };
  // uint32 line_number = 1;
  void clear_line_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 line_number() const;
  void set_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_line_number() const;
  void _internal_set_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cik = 2;
  void clear_cik();
  ::PROTOBUF_NAMESPACE_ID::uint32 cik() const;
  void set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cik() const;
  void _internal_set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 form_id = 3;
  void clear_form_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 form_id() const;
  void set_form_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_form_id() const;
  void _internal_set_form_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 submitter = 4;
  void clear_submitter();
  ::PROTOBUF_NAMESPACE_ID::uint32 submitter() const;
  void set_submitter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_submitter() const;
  void _internal_set_submitter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 year = 5;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::uint32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sequence = 6;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 filing_day = 7;
  void clear_filing_day();
  ::PROTOBUF_NAMESPACE_ID::uint32 filing_day() const;
  void set_filing_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filing_day() const;
  void _internal_set_filing_day(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 period_end = 8;
  void clear_period_end();
  ::PROTOBUF_NAMESPACE_ID::uint32 period_end() const;
  void set_period_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period_end() const;
  void _internal_set_period_end(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Edgar.Proto.Filing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 line_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cik_;
  ::PROTOBUF_NAMESPACE_ID::uint32 form_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 submitter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 year_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filing_day_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_edgar_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT Filings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Edgar.Proto.Filings) */ {
 public:
  inline Filings() : Filings(nullptr) {}
  ~Filings() override;
  explicit constexpr Filings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Filings(const Filings& from);
  Filings(Filings&& from) noexcept
    : Filings() {
    *this = ::std::move(from);
  }

  inline Filings& operator=(const Filings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filings& operator=(Filings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Filings& default_instance() {
    return *internal_default_instance();
  }
  static inline const Filings* internal_default_instance() {
    return reinterpret_cast<const Filings*>(
               &_Filings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Filings& a, Filings& b) {
    a.Swap(&b);
  }
  inline void Swap(Filings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Filings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Filings* New() const final {
    return new Filings();
  }

  Filings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Filings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Filings& from);
  void MergeFrom(const Filings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Edgar.Proto.Filings";
  }
  protected:
  explicit Filings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kRequestIdFieldNumber = 1,
  };
  // repeated .Jde.Markets.Edgar.Proto.Filing values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::Jde::Markets::Edgar::Proto::Filing* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Filing >*
      mutable_values();
  private:
  const ::Jde::Markets::Edgar::Proto::Filing& _internal_values(int index) const;
  ::Jde::Markets::Edgar::Proto::Filing* _internal_add_values();
  public:
  const ::Jde::Markets::Edgar::Proto::Filing& values(int index) const;
  ::Jde::Markets::Edgar::Proto::Filing* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Filing >&
      values() const;

  // uint32 request_id = 1;
  void clear_request_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id() const;
  void set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_request_id() const;
  void _internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Edgar.Proto.Filings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Filing > values_;
  ::PROTOBUF_NAMESPACE_ID::uint32 request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_edgar_2eproto;
};
// -------------------------------------------------------------------

class JDE_MARKETS_EXPORT MasterIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Markets.Edgar.Proto.MasterIndex) */ {
 public:
  inline MasterIndex() : MasterIndex(nullptr) {}
  ~MasterIndex() override;
  explicit constexpr MasterIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MasterIndex(const MasterIndex& from);
  MasterIndex(MasterIndex&& from) noexcept
    : MasterIndex() {
    *this = ::std::move(from);
  }

  inline MasterIndex& operator=(const MasterIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline MasterIndex& operator=(MasterIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MasterIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const MasterIndex* internal_default_instance() {
    return reinterpret_cast<const MasterIndex*>(
               &_MasterIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MasterIndex& a, MasterIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(MasterIndex* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MasterIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MasterIndex* New() const final {
    return new MasterIndex();
  }

  MasterIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MasterIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MasterIndex& from);
  void MergeFrom(const MasterIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Markets.Edgar.Proto.MasterIndex";
  }
  protected:
  explicit MasterIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilingsFieldNumber = 3,
    kQuarterFieldNumber = 1,
    kYearFieldNumber = 2,
  };
  // repeated .Jde.Markets.Edgar.Proto.Filing filings = 3;
  int filings_size() const;
  private:
  int _internal_filings_size() const;
  public:
  void clear_filings();
  ::Jde::Markets::Edgar::Proto::Filing* mutable_filings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Filing >*
      mutable_filings();
  private:
  const ::Jde::Markets::Edgar::Proto::Filing& _internal_filings(int index) const;
  ::Jde::Markets::Edgar::Proto::Filing* _internal_add_filings();
  public:
  const ::Jde::Markets::Edgar::Proto::Filing& filings(int index) const;
  ::Jde::Markets::Edgar::Proto::Filing* add_filings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Filing >&
      filings() const;

  // uint32 quarter = 1;
  void clear_quarter();
  ::PROTOBUF_NAMESPACE_ID::uint32 quarter() const;
  void set_quarter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_quarter() const;
  void _internal_set_quarter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 year = 2;
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::uint32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Markets.Edgar.Proto.MasterIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Filing > filings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quarter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 year_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_edgar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InfoTable

// string cusip = 1;
inline void InfoTable::clear_cusip() {
  cusip_.ClearToEmpty();
}
inline const std::string& InfoTable::cusip() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.InfoTable.cusip)
  return _internal_cusip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InfoTable::set_cusip(ArgT0&& arg0, ArgT... args) {
 
 cusip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.InfoTable.cusip)
}
inline std::string* InfoTable::mutable_cusip() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Edgar.Proto.InfoTable.cusip)
  return _internal_mutable_cusip();
}
inline const std::string& InfoTable::_internal_cusip() const {
  return cusip_.Get();
}
inline void InfoTable::_internal_set_cusip(const std::string& value) {
  
  cusip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InfoTable::_internal_mutable_cusip() {
  
  return cusip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InfoTable::release_cusip() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Edgar.Proto.InfoTable.cusip)
  return cusip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InfoTable::set_allocated_cusip(std::string* cusip) {
  if (cusip != nullptr) {
    
  } else {
    
  }
  cusip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cusip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Edgar.Proto.InfoTable.cusip)
}

// uint32 class_id = 2;
inline void InfoTable::clear_class_id() {
  class_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoTable::_internal_class_id() const {
  return class_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InfoTable::class_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.InfoTable.class_id)
  return _internal_class_id();
}
inline void InfoTable::_internal_set_class_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  class_id_ = value;
}
inline void InfoTable::set_class_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_class_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.InfoTable.class_id)
}

// int32 value = 3;
inline void InfoTable::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InfoTable::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InfoTable::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.InfoTable.value)
  return _internal_value();
}
inline void InfoTable::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void InfoTable::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.InfoTable.value)
}

// int32 shares = 4;
inline void InfoTable::clear_shares() {
  shares_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InfoTable::_internal_shares() const {
  return shares_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InfoTable::shares() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.InfoTable.shares)
  return _internal_shares();
}
inline void InfoTable::_internal_set_shares(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shares_ = value;
}
inline void InfoTable::set_shares(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shares(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.InfoTable.shares)
}

// bool is_principal = 5;
inline void InfoTable::clear_is_principal() {
  is_principal_ = false;
}
inline bool InfoTable::_internal_is_principal() const {
  return is_principal_;
}
inline bool InfoTable::is_principal() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.InfoTable.is_principal)
  return _internal_is_principal();
}
inline void InfoTable::_internal_set_is_principal(bool value) {
  
  is_principal_ = value;
}
inline void InfoTable::set_is_principal(bool value) {
  _internal_set_is_principal(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.InfoTable.is_principal)
}

// -------------------------------------------------------------------

// Form13F

// uint32 cik = 1;
inline void Form13F::clear_cik() {
  cik_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Form13F::_internal_cik() const {
  return cik_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Form13F::cik() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Form13F.cik)
  return _internal_cik();
}
inline void Form13F::_internal_set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cik_ = value;
}
inline void Form13F::set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cik(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Form13F.cik)
}

// uint32 quarter = 2;
inline void Form13F::clear_quarter() {
  quarter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Form13F::_internal_quarter() const {
  return quarter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Form13F::quarter() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Form13F.quarter)
  return _internal_quarter();
}
inline void Form13F::_internal_set_quarter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  quarter_ = value;
}
inline void Form13F::set_quarter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quarter(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Form13F.quarter)
}

// uint32 year = 3;
inline void Form13F::clear_year() {
  year_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Form13F::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Form13F::year() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Form13F.year)
  return _internal_year();
}
inline void Form13F::_internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  year_ = value;
}
inline void Form13F::set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Form13F.year)
}

// uint32 line_number = 4;
inline void Form13F::clear_line_number() {
  line_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Form13F::_internal_line_number() const {
  return line_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Form13F::line_number() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Form13F.line_number)
  return _internal_line_number();
}
inline void Form13F::_internal_set_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  line_number_ = value;
}
inline void Form13F::set_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_line_number(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Form13F.line_number)
}

// int64 value = 5;
inline void Form13F::clear_value() {
  value_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Form13F::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Form13F::value() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Form13F.value)
  return _internal_value();
}
inline void Form13F::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void Form13F::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Form13F.value)
}

// repeated .Jde.Markets.Edgar.Proto.InfoTable holdings = 6;
inline int Form13F::_internal_holdings_size() const {
  return holdings_.size();
}
inline int Form13F::holdings_size() const {
  return _internal_holdings_size();
}
inline void Form13F::clear_holdings() {
  holdings_.Clear();
}
inline ::Jde::Markets::Edgar::Proto::InfoTable* Form13F::mutable_holdings(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Edgar.Proto.Form13F.holdings)
  return holdings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::InfoTable >*
Form13F::mutable_holdings() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Edgar.Proto.Form13F.holdings)
  return &holdings_;
}
inline const ::Jde::Markets::Edgar::Proto::InfoTable& Form13F::_internal_holdings(int index) const {
  return holdings_.Get(index);
}
inline const ::Jde::Markets::Edgar::Proto::InfoTable& Form13F::holdings(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Form13F.holdings)
  return _internal_holdings(index);
}
inline ::Jde::Markets::Edgar::Proto::InfoTable* Form13F::_internal_add_holdings() {
  return holdings_.Add();
}
inline ::Jde::Markets::Edgar::Proto::InfoTable* Form13F::add_holdings() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Edgar.Proto.Form13F.holdings)
  return _internal_add_holdings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::InfoTable >&
Form13F::holdings() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Edgar.Proto.Form13F.holdings)
  return holdings_;
}

// -------------------------------------------------------------------

// File13F

// repeated .Jde.Markets.Edgar.Proto.Form13F forms = 1;
inline int File13F::_internal_forms_size() const {
  return forms_.size();
}
inline int File13F::forms_size() const {
  return _internal_forms_size();
}
inline void File13F::clear_forms() {
  forms_.Clear();
}
inline ::Jde::Markets::Edgar::Proto::Form13F* File13F::mutable_forms(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Edgar.Proto.File13F.forms)
  return forms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Form13F >*
File13F::mutable_forms() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Edgar.Proto.File13F.forms)
  return &forms_;
}
inline const ::Jde::Markets::Edgar::Proto::Form13F& File13F::_internal_forms(int index) const {
  return forms_.Get(index);
}
inline const ::Jde::Markets::Edgar::Proto::Form13F& File13F::forms(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.File13F.forms)
  return _internal_forms(index);
}
inline ::Jde::Markets::Edgar::Proto::Form13F* File13F::_internal_add_forms() {
  return forms_.Add();
}
inline ::Jde::Markets::Edgar::Proto::Form13F* File13F::add_forms() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Edgar.Proto.File13F.forms)
  return _internal_add_forms();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Form13F >&
File13F::forms() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Edgar.Proto.File13F.forms)
  return forms_;
}

// -------------------------------------------------------------------

// Investment

// .Jde.Markets.Edgar.Proto.InfoTable table = 1;
inline bool Investment::_internal_has_table() const {
  return this != internal_default_instance() && table_ != nullptr;
}
inline bool Investment::has_table() const {
  return _internal_has_table();
}
inline void Investment::clear_table() {
  if (GetArenaForAllocation() == nullptr && table_ != nullptr) {
    delete table_;
  }
  table_ = nullptr;
}
inline const ::Jde::Markets::Edgar::Proto::InfoTable& Investment::_internal_table() const {
  const ::Jde::Markets::Edgar::Proto::InfoTable* p = table_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Markets::Edgar::Proto::InfoTable&>(
      ::Jde::Markets::Edgar::Proto::_InfoTable_default_instance_);
}
inline const ::Jde::Markets::Edgar::Proto::InfoTable& Investment::table() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Investment.table)
  return _internal_table();
}
inline void Investment::unsafe_arena_set_allocated_table(
    ::Jde::Markets::Edgar::Proto::InfoTable* table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(table_);
  }
  table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Markets.Edgar.Proto.Investment.table)
}
inline ::Jde::Markets::Edgar::Proto::InfoTable* Investment::release_table() {
  
  ::Jde::Markets::Edgar::Proto::InfoTable* temp = table_;
  table_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Markets::Edgar::Proto::InfoTable* Investment::unsafe_arena_release_table() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Edgar.Proto.Investment.table)
  
  ::Jde::Markets::Edgar::Proto::InfoTable* temp = table_;
  table_ = nullptr;
  return temp;
}
inline ::Jde::Markets::Edgar::Proto::InfoTable* Investment::_internal_mutable_table() {
  
  if (table_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Markets::Edgar::Proto::InfoTable>(GetArenaForAllocation());
    table_ = p;
  }
  return table_;
}
inline ::Jde::Markets::Edgar::Proto::InfoTable* Investment::mutable_table() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Edgar.Proto.Investment.table)
  return _internal_mutable_table();
}
inline void Investment::set_allocated_table(::Jde::Markets::Edgar::Proto::InfoTable* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete table_;
  }
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Jde::Markets::Edgar::Proto::InfoTable>::GetOwningArena(table);
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Edgar.Proto.Investment.table)
}

// float percent = 2;
inline void Investment::clear_percent() {
  percent_ = 0;
}
inline float Investment::_internal_percent() const {
  return percent_;
}
inline float Investment::percent() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Investment.percent)
  return _internal_percent();
}
inline void Investment::_internal_set_percent(float value) {
  
  percent_ = value;
}
inline void Investment::set_percent(float value) {
  _internal_set_percent(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Investment.percent)
}

// -------------------------------------------------------------------

// Investor

// uint32 cik = 1;
inline void Investor::clear_cik() {
  cik_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Investor::_internal_cik() const {
  return cik_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Investor::cik() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Investor.cik)
  return _internal_cik();
}
inline void Investor::_internal_set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cik_ = value;
}
inline void Investor::set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cik(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Investor.cik)
}

// uint32 end_period = 2;
inline void Investor::clear_end_period() {
  end_period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Investor::_internal_end_period() const {
  return end_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Investor::end_period() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Investor.end_period)
  return _internal_end_period();
}
inline void Investor::_internal_set_end_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  end_period_ = value;
}
inline void Investor::set_end_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end_period(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Investor.end_period)
}

// repeated .Jde.Markets.Edgar.Proto.Investment current = 3;
inline int Investor::_internal_current_size() const {
  return current_.size();
}
inline int Investor::current_size() const {
  return _internal_current_size();
}
inline void Investor::clear_current() {
  current_.Clear();
}
inline ::Jde::Markets::Edgar::Proto::Investment* Investor::mutable_current(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Edgar.Proto.Investor.current)
  return current_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investment >*
Investor::mutable_current() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Edgar.Proto.Investor.current)
  return &current_;
}
inline const ::Jde::Markets::Edgar::Proto::Investment& Investor::_internal_current(int index) const {
  return current_.Get(index);
}
inline const ::Jde::Markets::Edgar::Proto::Investment& Investor::current(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Investor.current)
  return _internal_current(index);
}
inline ::Jde::Markets::Edgar::Proto::Investment* Investor::_internal_add_current() {
  return current_.Add();
}
inline ::Jde::Markets::Edgar::Proto::Investment* Investor::add_current() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Edgar.Proto.Investor.current)
  return _internal_add_current();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investment >&
Investor::current() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Edgar.Proto.Investor.current)
  return current_;
}

// repeated .Jde.Markets.Edgar.Proto.Investment previous = 4;
inline int Investor::_internal_previous_size() const {
  return previous_.size();
}
inline int Investor::previous_size() const {
  return _internal_previous_size();
}
inline void Investor::clear_previous() {
  previous_.Clear();
}
inline ::Jde::Markets::Edgar::Proto::Investment* Investor::mutable_previous(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Edgar.Proto.Investor.previous)
  return previous_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investment >*
Investor::mutable_previous() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Edgar.Proto.Investor.previous)
  return &previous_;
}
inline const ::Jde::Markets::Edgar::Proto::Investment& Investor::_internal_previous(int index) const {
  return previous_.Get(index);
}
inline const ::Jde::Markets::Edgar::Proto::Investment& Investor::previous(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Investor.previous)
  return _internal_previous(index);
}
inline ::Jde::Markets::Edgar::Proto::Investment* Investor::_internal_add_previous() {
  return previous_.Add();
}
inline ::Jde::Markets::Edgar::Proto::Investment* Investor::add_previous() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Edgar.Proto.Investor.previous)
  return _internal_add_previous();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investment >&
Investor::previous() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Edgar.Proto.Investor.previous)
  return previous_;
}

// -------------------------------------------------------------------

// Company

// uint32 cik = 1;
inline void Company::clear_cik() {
  cik_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Company::_internal_cik() const {
  return cik_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Company::cik() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Company.cik)
  return _internal_cik();
}
inline void Company::_internal_set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cik_ = value;
}
inline void Company::set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cik(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Company.cik)
}

// string name = 2;
inline void Company::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Company::name() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Company.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Company::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Company.name)
}
inline std::string* Company::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Edgar.Proto.Company.name)
  return _internal_mutable_name();
}
inline const std::string& Company::_internal_name() const {
  return name_.Get();
}
inline void Company::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Company::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Company::release_name() {
  // @@protoc_insertion_point(field_release:Jde.Markets.Edgar.Proto.Company.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Company::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Markets.Edgar.Proto.Company.name)
}

// -------------------------------------------------------------------

// Investors

// uint32 request_id = 1;
inline void Investors::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Investors::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Investors::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Investors.request_id)
  return _internal_request_id();
}
inline void Investors::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void Investors::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Investors.request_id)
}

// repeated .Jde.Markets.Edgar.Proto.Investor values = 2;
inline int Investors::_internal_values_size() const {
  return values_.size();
}
inline int Investors::values_size() const {
  return _internal_values_size();
}
inline void Investors::clear_values() {
  values_.Clear();
}
inline ::Jde::Markets::Edgar::Proto::Investor* Investors::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Edgar.Proto.Investors.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investor >*
Investors::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Edgar.Proto.Investors.values)
  return &values_;
}
inline const ::Jde::Markets::Edgar::Proto::Investor& Investors::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::Jde::Markets::Edgar::Proto::Investor& Investors::values(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Investors.values)
  return _internal_values(index);
}
inline ::Jde::Markets::Edgar::Proto::Investor* Investors::_internal_add_values() {
  return values_.Add();
}
inline ::Jde::Markets::Edgar::Proto::Investor* Investors::add_values() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Edgar.Proto.Investors.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Investor >&
Investors::values() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Edgar.Proto.Investors.values)
  return values_;
}

// repeated .Jde.Markets.Edgar.Proto.Company companies = 3;
inline int Investors::_internal_companies_size() const {
  return companies_.size();
}
inline int Investors::companies_size() const {
  return _internal_companies_size();
}
inline void Investors::clear_companies() {
  companies_.Clear();
}
inline ::Jde::Markets::Edgar::Proto::Company* Investors::mutable_companies(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Edgar.Proto.Investors.companies)
  return companies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Company >*
Investors::mutable_companies() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Edgar.Proto.Investors.companies)
  return &companies_;
}
inline const ::Jde::Markets::Edgar::Proto::Company& Investors::_internal_companies(int index) const {
  return companies_.Get(index);
}
inline const ::Jde::Markets::Edgar::Proto::Company& Investors::companies(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Investors.companies)
  return _internal_companies(index);
}
inline ::Jde::Markets::Edgar::Proto::Company* Investors::_internal_add_companies() {
  return companies_.Add();
}
inline ::Jde::Markets::Edgar::Proto::Company* Investors::add_companies() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Edgar.Proto.Investors.companies)
  return _internal_add_companies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Company >&
Investors::companies() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Edgar.Proto.Investors.companies)
  return companies_;
}

// -------------------------------------------------------------------

// Filing

// uint32 line_number = 1;
inline void Filing::clear_line_number() {
  line_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::_internal_line_number() const {
  return line_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::line_number() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Filing.line_number)
  return _internal_line_number();
}
inline void Filing::_internal_set_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  line_number_ = value;
}
inline void Filing::set_line_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_line_number(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Filing.line_number)
}

// uint32 cik = 2;
inline void Filing::clear_cik() {
  cik_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::_internal_cik() const {
  return cik_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::cik() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Filing.cik)
  return _internal_cik();
}
inline void Filing::_internal_set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cik_ = value;
}
inline void Filing::set_cik(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cik(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Filing.cik)
}

// uint32 form_id = 3;
inline void Filing::clear_form_id() {
  form_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::_internal_form_id() const {
  return form_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::form_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Filing.form_id)
  return _internal_form_id();
}
inline void Filing::_internal_set_form_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  form_id_ = value;
}
inline void Filing::set_form_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_form_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Filing.form_id)
}

// uint32 submitter = 4;
inline void Filing::clear_submitter() {
  submitter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::_internal_submitter() const {
  return submitter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::submitter() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Filing.submitter)
  return _internal_submitter();
}
inline void Filing::_internal_set_submitter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  submitter_ = value;
}
inline void Filing::set_submitter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_submitter(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Filing.submitter)
}

// uint32 year = 5;
inline void Filing::clear_year() {
  year_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::year() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Filing.year)
  return _internal_year();
}
inline void Filing::_internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  year_ = value;
}
inline void Filing::set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Filing.year)
}

// uint32 sequence = 6;
inline void Filing::clear_sequence() {
  sequence_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::sequence() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Filing.sequence)
  return _internal_sequence();
}
inline void Filing::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_ = value;
}
inline void Filing::set_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Filing.sequence)
}

// uint32 filing_day = 7;
inline void Filing::clear_filing_day() {
  filing_day_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::_internal_filing_day() const {
  return filing_day_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::filing_day() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Filing.filing_day)
  return _internal_filing_day();
}
inline void Filing::_internal_set_filing_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  filing_day_ = value;
}
inline void Filing::set_filing_day(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filing_day(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Filing.filing_day)
}

// uint32 period_end = 8;
inline void Filing::clear_period_end() {
  period_end_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::_internal_period_end() const {
  return period_end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filing::period_end() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Filing.period_end)
  return _internal_period_end();
}
inline void Filing::_internal_set_period_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_end_ = value;
}
inline void Filing::set_period_end(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period_end(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Filing.period_end)
}

// -------------------------------------------------------------------

// Filings

// uint32 request_id = 1;
inline void Filings::clear_request_id() {
  request_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filings::_internal_request_id() const {
  return request_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Filings::request_id() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Filings.request_id)
  return _internal_request_id();
}
inline void Filings::_internal_set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  request_id_ = value;
}
inline void Filings::set_request_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.Filings.request_id)
}

// repeated .Jde.Markets.Edgar.Proto.Filing values = 2;
inline int Filings::_internal_values_size() const {
  return values_.size();
}
inline int Filings::values_size() const {
  return _internal_values_size();
}
inline void Filings::clear_values() {
  values_.Clear();
}
inline ::Jde::Markets::Edgar::Proto::Filing* Filings::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Edgar.Proto.Filings.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Filing >*
Filings::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Edgar.Proto.Filings.values)
  return &values_;
}
inline const ::Jde::Markets::Edgar::Proto::Filing& Filings::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::Jde::Markets::Edgar::Proto::Filing& Filings::values(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.Filings.values)
  return _internal_values(index);
}
inline ::Jde::Markets::Edgar::Proto::Filing* Filings::_internal_add_values() {
  return values_.Add();
}
inline ::Jde::Markets::Edgar::Proto::Filing* Filings::add_values() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Edgar.Proto.Filings.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Filing >&
Filings::values() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Edgar.Proto.Filings.values)
  return values_;
}

// -------------------------------------------------------------------

// MasterIndex

// uint32 quarter = 1;
inline void MasterIndex::clear_quarter() {
  quarter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MasterIndex::_internal_quarter() const {
  return quarter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MasterIndex::quarter() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.MasterIndex.quarter)
  return _internal_quarter();
}
inline void MasterIndex::_internal_set_quarter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  quarter_ = value;
}
inline void MasterIndex::set_quarter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_quarter(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.MasterIndex.quarter)
}

// uint32 year = 2;
inline void MasterIndex::clear_year() {
  year_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MasterIndex::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MasterIndex::year() const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.MasterIndex.year)
  return _internal_year();
}
inline void MasterIndex::_internal_set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  year_ = value;
}
inline void MasterIndex::set_year(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:Jde.Markets.Edgar.Proto.MasterIndex.year)
}

// repeated .Jde.Markets.Edgar.Proto.Filing filings = 3;
inline int MasterIndex::_internal_filings_size() const {
  return filings_.size();
}
inline int MasterIndex::filings_size() const {
  return _internal_filings_size();
}
inline void MasterIndex::clear_filings() {
  filings_.Clear();
}
inline ::Jde::Markets::Edgar::Proto::Filing* MasterIndex::mutable_filings(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Markets.Edgar.Proto.MasterIndex.filings)
  return filings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Filing >*
MasterIndex::mutable_filings() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Markets.Edgar.Proto.MasterIndex.filings)
  return &filings_;
}
inline const ::Jde::Markets::Edgar::Proto::Filing& MasterIndex::_internal_filings(int index) const {
  return filings_.Get(index);
}
inline const ::Jde::Markets::Edgar::Proto::Filing& MasterIndex::filings(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Markets.Edgar.Proto.MasterIndex.filings)
  return _internal_filings(index);
}
inline ::Jde::Markets::Edgar::Proto::Filing* MasterIndex::_internal_add_filings() {
  return filings_.Add();
}
inline ::Jde::Markets::Edgar::Proto::Filing* MasterIndex::add_filings() {
  // @@protoc_insertion_point(field_add:Jde.Markets.Edgar.Proto.MasterIndex.filings)
  return _internal_add_filings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Markets::Edgar::Proto::Filing >&
MasterIndex::filings() const {
  // @@protoc_insertion_point(field_list:Jde.Markets.Edgar.Proto.MasterIndex.filings)
  return filings_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Edgar
}  // namespace Markets
}  // namespace Jde

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_edgar_2eproto
