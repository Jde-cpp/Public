// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: blockly.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_blockly_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_blockly_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_blockly_2eproto JDE_BLOCKLY
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct JDE_BLOCKLY TableStruct_blockly_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern JDE_BLOCKLY const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_blockly_2eproto;
namespace Jde {
namespace Blockly {
namespace Proto {
class Copy;
struct CopyDefaultTypeInternal;
JDE_BLOCKLY extern CopyDefaultTypeInternal _Copy_default_instance_;
class Function;
struct FunctionDefaultTypeInternal;
JDE_BLOCKLY extern FunctionDefaultTypeInternal _Function_default_instance_;
class Functions;
struct FunctionsDefaultTypeInternal;
JDE_BLOCKLY extern FunctionsDefaultTypeInternal _Functions_default_instance_;
class IdRequest;
struct IdRequestDefaultTypeInternal;
JDE_BLOCKLY extern IdRequestDefaultTypeInternal _IdRequest_default_instance_;
class RequestUnion;
struct RequestUnionDefaultTypeInternal;
JDE_BLOCKLY extern RequestUnionDefaultTypeInternal _RequestUnion_default_instance_;
class ResultUnion;
struct ResultUnionDefaultTypeInternal;
JDE_BLOCKLY extern ResultUnionDefaultTypeInternal _ResultUnion_default_instance_;
}  // namespace Proto
}  // namespace Blockly
}  // namespace Jde
PROTOBUF_NAMESPACE_OPEN
template<> JDE_BLOCKLY ::Jde::Blockly::Proto::Copy* Arena::CreateMaybeMessage<::Jde::Blockly::Proto::Copy>(Arena*);
template<> JDE_BLOCKLY ::Jde::Blockly::Proto::Function* Arena::CreateMaybeMessage<::Jde::Blockly::Proto::Function>(Arena*);
template<> JDE_BLOCKLY ::Jde::Blockly::Proto::Functions* Arena::CreateMaybeMessage<::Jde::Blockly::Proto::Functions>(Arena*);
template<> JDE_BLOCKLY ::Jde::Blockly::Proto::IdRequest* Arena::CreateMaybeMessage<::Jde::Blockly::Proto::IdRequest>(Arena*);
template<> JDE_BLOCKLY ::Jde::Blockly::Proto::RequestUnion* Arena::CreateMaybeMessage<::Jde::Blockly::Proto::RequestUnion>(Arena*);
template<> JDE_BLOCKLY ::Jde::Blockly::Proto::ResultUnion* Arena::CreateMaybeMessage<::Jde::Blockly::Proto::ResultUnion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Jde {
namespace Blockly {
namespace Proto {

enum ERequestType : int {
  Load = 0,
  Delete = 1,
  Build = 2,
  DeleteBuild = 3,
  Enable = 4,
  Disable = 5,
  ERequestType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ERequestType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
JDE_BLOCKLY bool ERequestType_IsValid(int value);
constexpr ERequestType ERequestType_MIN = Load;
constexpr ERequestType ERequestType_MAX = Disable;
constexpr int ERequestType_ARRAYSIZE = ERequestType_MAX + 1;

JDE_BLOCKLY const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERequestType_descriptor();
template<typename T>
inline const std::string& ERequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ERequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ERequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ERequestType_descriptor(), enum_t_value);
}
inline bool ERequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ERequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ERequestType>(
    ERequestType_descriptor(), name, value);
}
// ===================================================================

class JDE_BLOCKLY Copy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Blockly.Proto.Copy) */ {
 public:
  inline Copy() : Copy(nullptr) {}
  ~Copy() override;
  explicit constexpr Copy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Copy(const Copy& from);
  Copy(Copy&& from) noexcept
    : Copy() {
    *this = ::std::move(from);
  }

  inline Copy& operator=(const Copy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Copy& operator=(Copy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Copy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Copy* internal_default_instance() {
    return reinterpret_cast<const Copy*>(
               &_Copy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Copy& a, Copy& b) {
    a.Swap(&b);
  }
  inline void Swap(Copy* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Copy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Copy* New() const final {
    return new Copy();
  }

  Copy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Copy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Copy& from);
  void MergeFrom(const Copy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Copy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Blockly.Proto.Copy";
  }
  protected:
  explicit Copy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromIdFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // string from_id = 1;
  void clear_from_id();
  const std::string& from_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_from_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_from_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_from_id();
  void set_allocated_from_id(std::string* from_id);
  private:
  const std::string& _internal_from_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_from_id(const std::string& value);
  std::string* _internal_mutable_from_id();
  public:

  // .Jde.Blockly.Proto.Function to = 2;
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::Jde::Blockly::Proto::Function& to() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Blockly::Proto::Function* release_to();
  ::Jde::Blockly::Proto::Function* mutable_to();
  void set_allocated_to(::Jde::Blockly::Proto::Function* to);
  private:
  const ::Jde::Blockly::Proto::Function& _internal_to() const;
  ::Jde::Blockly::Proto::Function* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::Jde::Blockly::Proto::Function* to);
  ::Jde::Blockly::Proto::Function* unsafe_arena_release_to();

  // @@protoc_insertion_point(class_scope:Jde.Blockly.Proto.Copy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_id_;
  ::Jde::Blockly::Proto::Function* to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockly_2eproto;
};
// -------------------------------------------------------------------

class JDE_BLOCKLY IdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Blockly.Proto.IdRequest) */ {
 public:
  inline IdRequest() : IdRequest(nullptr) {}
  ~IdRequest() override;
  explicit constexpr IdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdRequest(const IdRequest& from);
  IdRequest(IdRequest&& from) noexcept
    : IdRequest() {
    *this = ::std::move(from);
  }

  inline IdRequest& operator=(const IdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdRequest& operator=(IdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdRequest* internal_default_instance() {
    return reinterpret_cast<const IdRequest*>(
               &_IdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IdRequest& a, IdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IdRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdRequest* New() const final {
    return new IdRequest();
  }

  IdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IdRequest& from);
  void MergeFrom(const IdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Blockly.Proto.IdRequest";
  }
  protected:
  explicit IdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .Jde.Blockly.Proto.ERequestType type = 2;
  void clear_type();
  ::Jde::Blockly::Proto::ERequestType type() const;
  void set_type(::Jde::Blockly::Proto::ERequestType value);
  private:
  ::Jde::Blockly::Proto::ERequestType _internal_type() const;
  void _internal_set_type(::Jde::Blockly::Proto::ERequestType value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Blockly.Proto.IdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockly_2eproto;
};
// -------------------------------------------------------------------

class JDE_BLOCKLY RequestUnion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Blockly.Proto.RequestUnion) */ {
 public:
  inline RequestUnion() : RequestUnion(nullptr) {}
  ~RequestUnion() override;
  explicit constexpr RequestUnion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestUnion(const RequestUnion& from);
  RequestUnion(RequestUnion&& from) noexcept
    : RequestUnion() {
    *this = ::std::move(from);
  }

  inline RequestUnion& operator=(const RequestUnion& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestUnion& operator=(RequestUnion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestUnion& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kIdRequest = 1,
    kSave = 4,
    kCopy = 5,
    VALUE_NOT_SET = 0,
  };

  static inline const RequestUnion* internal_default_instance() {
    return reinterpret_cast<const RequestUnion*>(
               &_RequestUnion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestUnion& a, RequestUnion& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestUnion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestUnion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestUnion* New() const final {
    return new RequestUnion();
  }

  RequestUnion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestUnion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestUnion& from);
  void MergeFrom(const RequestUnion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestUnion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Blockly.Proto.RequestUnion";
  }
  protected:
  explicit RequestUnion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdRequestFieldNumber = 1,
    kSaveFieldNumber = 4,
    kCopyFieldNumber = 5,
  };
  // .Jde.Blockly.Proto.IdRequest id_request = 1;
  bool has_id_request() const;
  private:
  bool _internal_has_id_request() const;
  public:
  void clear_id_request();
  const ::Jde::Blockly::Proto::IdRequest& id_request() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Blockly::Proto::IdRequest* release_id_request();
  ::Jde::Blockly::Proto::IdRequest* mutable_id_request();
  void set_allocated_id_request(::Jde::Blockly::Proto::IdRequest* id_request);
  private:
  const ::Jde::Blockly::Proto::IdRequest& _internal_id_request() const;
  ::Jde::Blockly::Proto::IdRequest* _internal_mutable_id_request();
  public:
  void unsafe_arena_set_allocated_id_request(
      ::Jde::Blockly::Proto::IdRequest* id_request);
  ::Jde::Blockly::Proto::IdRequest* unsafe_arena_release_id_request();

  // .Jde.Blockly.Proto.Function save = 4;
  bool has_save() const;
  private:
  bool _internal_has_save() const;
  public:
  void clear_save();
  const ::Jde::Blockly::Proto::Function& save() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Blockly::Proto::Function* release_save();
  ::Jde::Blockly::Proto::Function* mutable_save();
  void set_allocated_save(::Jde::Blockly::Proto::Function* save);
  private:
  const ::Jde::Blockly::Proto::Function& _internal_save() const;
  ::Jde::Blockly::Proto::Function* _internal_mutable_save();
  public:
  void unsafe_arena_set_allocated_save(
      ::Jde::Blockly::Proto::Function* save);
  ::Jde::Blockly::Proto::Function* unsafe_arena_release_save();

  // .Jde.Blockly.Proto.Copy copy = 5;
  bool has_copy() const;
  private:
  bool _internal_has_copy() const;
  public:
  void clear_copy();
  const ::Jde::Blockly::Proto::Copy& copy() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Blockly::Proto::Copy* release_copy();
  ::Jde::Blockly::Proto::Copy* mutable_copy();
  void set_allocated_copy(::Jde::Blockly::Proto::Copy* copy);
  private:
  const ::Jde::Blockly::Proto::Copy& _internal_copy() const;
  ::Jde::Blockly::Proto::Copy* _internal_mutable_copy();
  public:
  void unsafe_arena_set_allocated_copy(
      ::Jde::Blockly::Proto::Copy* copy);
  ::Jde::Blockly::Proto::Copy* unsafe_arena_release_copy();

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:Jde.Blockly.Proto.RequestUnion)
 private:
  class _Internal;
  void set_has_id_request();
  void set_has_save();
  void set_has_copy();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::Jde::Blockly::Proto::IdRequest* id_request_;
    ::Jde::Blockly::Proto::Function* save_;
    ::Jde::Blockly::Proto::Copy* copy_;
  } Value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blockly_2eproto;
};
// -------------------------------------------------------------------

class JDE_BLOCKLY Function final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Blockly.Proto.Function) */ {
 public:
  inline Function() : Function(nullptr) {}
  ~Function() override;
  explicit constexpr Function(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Function(const Function& from);
  Function(Function&& from) noexcept
    : Function() {
    *this = ::std::move(from);
  }

  inline Function& operator=(const Function& from) {
    CopyFrom(from);
    return *this;
  }
  inline Function& operator=(Function&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Function& default_instance() {
    return *internal_default_instance();
  }
  static inline const Function* internal_default_instance() {
    return reinterpret_cast<const Function*>(
               &_Function_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Function& a, Function& b) {
    a.Swap(&b);
  }
  inline void Swap(Function* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Function* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Function* New() const final {
    return new Function();
  }

  Function* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Function>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Function& from);
  void MergeFrom(const Function& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Function* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Blockly.Proto.Function";
  }
  protected:
  explicit Function(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kLibraryFieldNumber = 5,
    kXmlFieldNumber = 6,
    kEnabledFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string library = 5;
  void clear_library();
  const std::string& library() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_library(ArgT0&& arg0, ArgT... args);
  std::string* mutable_library();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_library();
  void set_allocated_library(std::string* library);
  private:
  const std::string& _internal_library() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_library(const std::string& value);
  std::string* _internal_mutable_library();
  public:

  // string xml = 6;
  void clear_xml();
  const std::string& xml() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xml(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xml();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_xml();
  void set_allocated_xml(std::string* xml);
  private:
  const std::string& _internal_xml() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xml(const std::string& value);
  std::string* _internal_mutable_xml();
  public:

  // bool enabled = 4;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Jde.Blockly.Proto.Function)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr library_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xml_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockly_2eproto;
};
// -------------------------------------------------------------------

class JDE_BLOCKLY Functions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Blockly.Proto.Functions) */ {
 public:
  inline Functions() : Functions(nullptr) {}
  ~Functions() override;
  explicit constexpr Functions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Functions(const Functions& from);
  Functions(Functions&& from) noexcept
    : Functions() {
    *this = ::std::move(from);
  }

  inline Functions& operator=(const Functions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Functions& operator=(Functions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Functions& default_instance() {
    return *internal_default_instance();
  }
  static inline const Functions* internal_default_instance() {
    return reinterpret_cast<const Functions*>(
               &_Functions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Functions& a, Functions& b) {
    a.Swap(&b);
  }
  inline void Swap(Functions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Functions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Functions* New() const final {
    return new Functions();
  }

  Functions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Functions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Functions& from);
  void MergeFrom(const Functions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Functions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Blockly.Proto.Functions";
  }
  protected:
  explicit Functions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionsFieldNumber = 1,
  };
  // repeated .Jde.Blockly.Proto.Function functions = 1;
  int functions_size() const;
  private:
  int _internal_functions_size() const;
  public:
  void clear_functions();
  ::Jde::Blockly::Proto::Function* mutable_functions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Blockly::Proto::Function >*
      mutable_functions();
  private:
  const ::Jde::Blockly::Proto::Function& _internal_functions(int index) const;
  ::Jde::Blockly::Proto::Function* _internal_add_functions();
  public:
  const ::Jde::Blockly::Proto::Function& functions(int index) const;
  ::Jde::Blockly::Proto::Function* add_functions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Blockly::Proto::Function >&
      functions() const;

  // @@protoc_insertion_point(class_scope:Jde.Blockly.Proto.Functions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Blockly::Proto::Function > functions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_blockly_2eproto;
};
// -------------------------------------------------------------------

class JDE_BLOCKLY ResultUnion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Jde.Blockly.Proto.ResultUnion) */ {
 public:
  inline ResultUnion() : ResultUnion(nullptr) {}
  ~ResultUnion() override;
  explicit constexpr ResultUnion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultUnion(const ResultUnion& from);
  ResultUnion(ResultUnion&& from) noexcept
    : ResultUnion() {
    *this = ::std::move(from);
  }

  inline ResultUnion& operator=(const ResultUnion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultUnion& operator=(ResultUnion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultUnion& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kSuccess = 2,
    kFunctions = 3,
    kFunction = 4,
    kError = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const ResultUnion* internal_default_instance() {
    return reinterpret_cast<const ResultUnion*>(
               &_ResultUnion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResultUnion& a, ResultUnion& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultUnion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultUnion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultUnion* New() const final {
    return new ResultUnion();
  }

  ResultUnion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultUnion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultUnion& from);
  void MergeFrom(const ResultUnion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultUnion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Jde.Blockly.Proto.ResultUnion";
  }
  protected:
  explicit ResultUnion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 2,
    kFunctionsFieldNumber = 3,
    kFunctionFieldNumber = 4,
    kErrorFieldNumber = 6,
  };
  // bool success = 2;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .Jde.Blockly.Proto.Functions functions = 3;
  bool has_functions() const;
  private:
  bool _internal_has_functions() const;
  public:
  void clear_functions();
  const ::Jde::Blockly::Proto::Functions& functions() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Blockly::Proto::Functions* release_functions();
  ::Jde::Blockly::Proto::Functions* mutable_functions();
  void set_allocated_functions(::Jde::Blockly::Proto::Functions* functions);
  private:
  const ::Jde::Blockly::Proto::Functions& _internal_functions() const;
  ::Jde::Blockly::Proto::Functions* _internal_mutable_functions();
  public:
  void unsafe_arena_set_allocated_functions(
      ::Jde::Blockly::Proto::Functions* functions);
  ::Jde::Blockly::Proto::Functions* unsafe_arena_release_functions();

  // .Jde.Blockly.Proto.Function function = 4;
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const ::Jde::Blockly::Proto::Function& function() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Jde::Blockly::Proto::Function* release_function();
  ::Jde::Blockly::Proto::Function* mutable_function();
  void set_allocated_function(::Jde::Blockly::Proto::Function* function);
  private:
  const ::Jde::Blockly::Proto::Function& _internal_function() const;
  ::Jde::Blockly::Proto::Function* _internal_mutable_function();
  public:
  void unsafe_arena_set_allocated_function(
      ::Jde::Blockly::Proto::Function* function);
  ::Jde::Blockly::Proto::Function* unsafe_arena_release_function();

  // string error = 6;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  void clear_Value();
  ValueCase Value_case() const;
  // @@protoc_insertion_point(class_scope:Jde.Blockly.Proto.ResultUnion)
 private:
  class _Internal;
  void set_has_success();
  void set_has_functions();
  void set_has_function();
  void set_has_error();

  inline bool has_Value() const;
  inline void clear_has_Value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool success_;
    ::Jde::Blockly::Proto::Functions* functions_;
    ::Jde::Blockly::Proto::Function* function_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  } Value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_blockly_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Copy

// string from_id = 1;
inline void Copy::clear_from_id() {
  from_id_.ClearToEmpty();
}
inline const std::string& Copy::from_id() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.Copy.from_id)
  return _internal_from_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Copy::set_from_id(ArgT0&& arg0, ArgT... args) {
 
 from_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Blockly.Proto.Copy.from_id)
}
inline std::string* Copy::mutable_from_id() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.Copy.from_id)
  return _internal_mutable_from_id();
}
inline const std::string& Copy::_internal_from_id() const {
  return from_id_.Get();
}
inline void Copy::_internal_set_from_id(const std::string& value) {
  
  from_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Copy::_internal_mutable_from_id() {
  
  return from_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Copy::release_from_id() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.Copy.from_id)
  return from_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Copy::set_allocated_from_id(std::string* from_id) {
  if (from_id != nullptr) {
    
  } else {
    
  }
  from_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Blockly.Proto.Copy.from_id)
}

// .Jde.Blockly.Proto.Function to = 2;
inline bool Copy::_internal_has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline bool Copy::has_to() const {
  return _internal_has_to();
}
inline void Copy::clear_to() {
  if (GetArenaForAllocation() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
inline const ::Jde::Blockly::Proto::Function& Copy::_internal_to() const {
  const ::Jde::Blockly::Proto::Function* p = to_;
  return p != nullptr ? *p : reinterpret_cast<const ::Jde::Blockly::Proto::Function&>(
      ::Jde::Blockly::Proto::_Function_default_instance_);
}
inline const ::Jde::Blockly::Proto::Function& Copy::to() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.Copy.to)
  return _internal_to();
}
inline void Copy::unsafe_arena_set_allocated_to(
    ::Jde::Blockly::Proto::Function* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to_);
  }
  to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Blockly.Proto.Copy.to)
}
inline ::Jde::Blockly::Proto::Function* Copy::release_to() {
  
  ::Jde::Blockly::Proto::Function* temp = to_;
  to_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Jde::Blockly::Proto::Function* Copy::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.Copy.to)
  
  ::Jde::Blockly::Proto::Function* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::Jde::Blockly::Proto::Function* Copy::_internal_mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::Jde::Blockly::Proto::Function>(GetArenaForAllocation());
    to_ = p;
  }
  return to_;
}
inline ::Jde::Blockly::Proto::Function* Copy::mutable_to() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.Copy.to)
  return _internal_mutable_to();
}
inline void Copy::set_allocated_to(::Jde::Blockly::Proto::Function* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Jde::Blockly::Proto::Function>::GetOwningArena(to);
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:Jde.Blockly.Proto.Copy.to)
}

// -------------------------------------------------------------------

// IdRequest

// string id = 1;
inline void IdRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& IdRequest::id() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.IdRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IdRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Blockly.Proto.IdRequest.id)
}
inline std::string* IdRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.IdRequest.id)
  return _internal_mutable_id();
}
inline const std::string& IdRequest::_internal_id() const {
  return id_.Get();
}
inline void IdRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IdRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IdRequest::release_id() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.IdRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IdRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Blockly.Proto.IdRequest.id)
}

// .Jde.Blockly.Proto.ERequestType type = 2;
inline void IdRequest::clear_type() {
  type_ = 0;
}
inline ::Jde::Blockly::Proto::ERequestType IdRequest::_internal_type() const {
  return static_cast< ::Jde::Blockly::Proto::ERequestType >(type_);
}
inline ::Jde::Blockly::Proto::ERequestType IdRequest::type() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.IdRequest.type)
  return _internal_type();
}
inline void IdRequest::_internal_set_type(::Jde::Blockly::Proto::ERequestType value) {
  
  type_ = value;
}
inline void IdRequest::set_type(::Jde::Blockly::Proto::ERequestType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Jde.Blockly.Proto.IdRequest.type)
}

// -------------------------------------------------------------------

// RequestUnion

// .Jde.Blockly.Proto.IdRequest id_request = 1;
inline bool RequestUnion::_internal_has_id_request() const {
  return Value_case() == kIdRequest;
}
inline bool RequestUnion::has_id_request() const {
  return _internal_has_id_request();
}
inline void RequestUnion::set_has_id_request() {
  _oneof_case_[0] = kIdRequest;
}
inline void RequestUnion::clear_id_request() {
  if (_internal_has_id_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.id_request_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Blockly::Proto::IdRequest* RequestUnion::release_id_request() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.RequestUnion.id_request)
  if (_internal_has_id_request()) {
    clear_has_Value();
      ::Jde::Blockly::Proto::IdRequest* temp = Value_.id_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.id_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Blockly::Proto::IdRequest& RequestUnion::_internal_id_request() const {
  return _internal_has_id_request()
      ? *Value_.id_request_
      : reinterpret_cast< ::Jde::Blockly::Proto::IdRequest&>(::Jde::Blockly::Proto::_IdRequest_default_instance_);
}
inline const ::Jde::Blockly::Proto::IdRequest& RequestUnion::id_request() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.RequestUnion.id_request)
  return _internal_id_request();
}
inline ::Jde::Blockly::Proto::IdRequest* RequestUnion::unsafe_arena_release_id_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Blockly.Proto.RequestUnion.id_request)
  if (_internal_has_id_request()) {
    clear_has_Value();
    ::Jde::Blockly::Proto::IdRequest* temp = Value_.id_request_;
    Value_.id_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestUnion::unsafe_arena_set_allocated_id_request(::Jde::Blockly::Proto::IdRequest* id_request) {
  clear_Value();
  if (id_request) {
    set_has_id_request();
    Value_.id_request_ = id_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Blockly.Proto.RequestUnion.id_request)
}
inline ::Jde::Blockly::Proto::IdRequest* RequestUnion::_internal_mutable_id_request() {
  if (!_internal_has_id_request()) {
    clear_Value();
    set_has_id_request();
    Value_.id_request_ = CreateMaybeMessage< ::Jde::Blockly::Proto::IdRequest >(GetArenaForAllocation());
  }
  return Value_.id_request_;
}
inline ::Jde::Blockly::Proto::IdRequest* RequestUnion::mutable_id_request() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.RequestUnion.id_request)
  return _internal_mutable_id_request();
}

// .Jde.Blockly.Proto.Function save = 4;
inline bool RequestUnion::_internal_has_save() const {
  return Value_case() == kSave;
}
inline bool RequestUnion::has_save() const {
  return _internal_has_save();
}
inline void RequestUnion::set_has_save() {
  _oneof_case_[0] = kSave;
}
inline void RequestUnion::clear_save() {
  if (_internal_has_save()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.save_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Blockly::Proto::Function* RequestUnion::release_save() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.RequestUnion.save)
  if (_internal_has_save()) {
    clear_has_Value();
      ::Jde::Blockly::Proto::Function* temp = Value_.save_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.save_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Blockly::Proto::Function& RequestUnion::_internal_save() const {
  return _internal_has_save()
      ? *Value_.save_
      : reinterpret_cast< ::Jde::Blockly::Proto::Function&>(::Jde::Blockly::Proto::_Function_default_instance_);
}
inline const ::Jde::Blockly::Proto::Function& RequestUnion::save() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.RequestUnion.save)
  return _internal_save();
}
inline ::Jde::Blockly::Proto::Function* RequestUnion::unsafe_arena_release_save() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Blockly.Proto.RequestUnion.save)
  if (_internal_has_save()) {
    clear_has_Value();
    ::Jde::Blockly::Proto::Function* temp = Value_.save_;
    Value_.save_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestUnion::unsafe_arena_set_allocated_save(::Jde::Blockly::Proto::Function* save) {
  clear_Value();
  if (save) {
    set_has_save();
    Value_.save_ = save;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Blockly.Proto.RequestUnion.save)
}
inline ::Jde::Blockly::Proto::Function* RequestUnion::_internal_mutable_save() {
  if (!_internal_has_save()) {
    clear_Value();
    set_has_save();
    Value_.save_ = CreateMaybeMessage< ::Jde::Blockly::Proto::Function >(GetArenaForAllocation());
  }
  return Value_.save_;
}
inline ::Jde::Blockly::Proto::Function* RequestUnion::mutable_save() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.RequestUnion.save)
  return _internal_mutable_save();
}

// .Jde.Blockly.Proto.Copy copy = 5;
inline bool RequestUnion::_internal_has_copy() const {
  return Value_case() == kCopy;
}
inline bool RequestUnion::has_copy() const {
  return _internal_has_copy();
}
inline void RequestUnion::set_has_copy() {
  _oneof_case_[0] = kCopy;
}
inline void RequestUnion::clear_copy() {
  if (_internal_has_copy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.copy_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Blockly::Proto::Copy* RequestUnion::release_copy() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.RequestUnion.copy)
  if (_internal_has_copy()) {
    clear_has_Value();
      ::Jde::Blockly::Proto::Copy* temp = Value_.copy_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.copy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Blockly::Proto::Copy& RequestUnion::_internal_copy() const {
  return _internal_has_copy()
      ? *Value_.copy_
      : reinterpret_cast< ::Jde::Blockly::Proto::Copy&>(::Jde::Blockly::Proto::_Copy_default_instance_);
}
inline const ::Jde::Blockly::Proto::Copy& RequestUnion::copy() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.RequestUnion.copy)
  return _internal_copy();
}
inline ::Jde::Blockly::Proto::Copy* RequestUnion::unsafe_arena_release_copy() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Blockly.Proto.RequestUnion.copy)
  if (_internal_has_copy()) {
    clear_has_Value();
    ::Jde::Blockly::Proto::Copy* temp = Value_.copy_;
    Value_.copy_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestUnion::unsafe_arena_set_allocated_copy(::Jde::Blockly::Proto::Copy* copy) {
  clear_Value();
  if (copy) {
    set_has_copy();
    Value_.copy_ = copy;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Blockly.Proto.RequestUnion.copy)
}
inline ::Jde::Blockly::Proto::Copy* RequestUnion::_internal_mutable_copy() {
  if (!_internal_has_copy()) {
    clear_Value();
    set_has_copy();
    Value_.copy_ = CreateMaybeMessage< ::Jde::Blockly::Proto::Copy >(GetArenaForAllocation());
  }
  return Value_.copy_;
}
inline ::Jde::Blockly::Proto::Copy* RequestUnion::mutable_copy() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.RequestUnion.copy)
  return _internal_mutable_copy();
}

inline bool RequestUnion::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void RequestUnion::clear_has_Value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline RequestUnion::ValueCase RequestUnion::Value_case() const {
  return RequestUnion::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Function

// string id = 1;
inline void Function::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Function::id() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.Function.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Function::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Blockly.Proto.Function.id)
}
inline std::string* Function::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.Function.id)
  return _internal_mutable_id();
}
inline const std::string& Function::_internal_id() const {
  return id_.Get();
}
inline void Function::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Function::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Function::release_id() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.Function.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Function::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Blockly.Proto.Function.id)
}

// string name = 2;
inline void Function::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Function::name() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.Function.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Function::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Blockly.Proto.Function.name)
}
inline std::string* Function::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.Function.name)
  return _internal_mutable_name();
}
inline const std::string& Function::_internal_name() const {
  return name_.Get();
}
inline void Function::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Function::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Function::release_name() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.Function.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Function::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Blockly.Proto.Function.name)
}

// string description = 3;
inline void Function::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Function::description() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.Function.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Function::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Blockly.Proto.Function.description)
}
inline std::string* Function::mutable_description() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.Function.description)
  return _internal_mutable_description();
}
inline const std::string& Function::_internal_description() const {
  return description_.Get();
}
inline void Function::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Function::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Function::release_description() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.Function.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Function::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Blockly.Proto.Function.description)
}

// bool enabled = 4;
inline void Function::clear_enabled() {
  enabled_ = false;
}
inline bool Function::_internal_enabled() const {
  return enabled_;
}
inline bool Function::enabled() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.Function.enabled)
  return _internal_enabled();
}
inline void Function::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Function::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:Jde.Blockly.Proto.Function.enabled)
}

// string library = 5;
inline void Function::clear_library() {
  library_.ClearToEmpty();
}
inline const std::string& Function::library() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.Function.library)
  return _internal_library();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Function::set_library(ArgT0&& arg0, ArgT... args) {
 
 library_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Blockly.Proto.Function.library)
}
inline std::string* Function::mutable_library() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.Function.library)
  return _internal_mutable_library();
}
inline const std::string& Function::_internal_library() const {
  return library_.Get();
}
inline void Function::_internal_set_library(const std::string& value) {
  
  library_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Function::_internal_mutable_library() {
  
  return library_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Function::release_library() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.Function.library)
  return library_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Function::set_allocated_library(std::string* library) {
  if (library != nullptr) {
    
  } else {
    
  }
  library_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), library,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Blockly.Proto.Function.library)
}

// string xml = 6;
inline void Function::clear_xml() {
  xml_.ClearToEmpty();
}
inline const std::string& Function::xml() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.Function.xml)
  return _internal_xml();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Function::set_xml(ArgT0&& arg0, ArgT... args) {
 
 xml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Blockly.Proto.Function.xml)
}
inline std::string* Function::mutable_xml() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.Function.xml)
  return _internal_mutable_xml();
}
inline const std::string& Function::_internal_xml() const {
  return xml_.Get();
}
inline void Function::_internal_set_xml(const std::string& value) {
  
  xml_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Function::_internal_mutable_xml() {
  
  return xml_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Function::release_xml() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.Function.xml)
  return xml_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Function::set_allocated_xml(std::string* xml) {
  if (xml != nullptr) {
    
  } else {
    
  }
  xml_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xml,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Jde.Blockly.Proto.Function.xml)
}

// -------------------------------------------------------------------

// Functions

// repeated .Jde.Blockly.Proto.Function functions = 1;
inline int Functions::_internal_functions_size() const {
  return functions_.size();
}
inline int Functions::functions_size() const {
  return _internal_functions_size();
}
inline void Functions::clear_functions() {
  functions_.Clear();
}
inline ::Jde::Blockly::Proto::Function* Functions::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.Functions.functions)
  return functions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Blockly::Proto::Function >*
Functions::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:Jde.Blockly.Proto.Functions.functions)
  return &functions_;
}
inline const ::Jde::Blockly::Proto::Function& Functions::_internal_functions(int index) const {
  return functions_.Get(index);
}
inline const ::Jde::Blockly::Proto::Function& Functions::functions(int index) const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.Functions.functions)
  return _internal_functions(index);
}
inline ::Jde::Blockly::Proto::Function* Functions::_internal_add_functions() {
  return functions_.Add();
}
inline ::Jde::Blockly::Proto::Function* Functions::add_functions() {
  // @@protoc_insertion_point(field_add:Jde.Blockly.Proto.Functions.functions)
  return _internal_add_functions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Jde::Blockly::Proto::Function >&
Functions::functions() const {
  // @@protoc_insertion_point(field_list:Jde.Blockly.Proto.Functions.functions)
  return functions_;
}

// -------------------------------------------------------------------

// ResultUnion

// bool success = 2;
inline bool ResultUnion::_internal_has_success() const {
  return Value_case() == kSuccess;
}
inline bool ResultUnion::has_success() const {
  return _internal_has_success();
}
inline void ResultUnion::set_has_success() {
  _oneof_case_[0] = kSuccess;
}
inline void ResultUnion::clear_success() {
  if (_internal_has_success()) {
    Value_.success_ = false;
    clear_has_Value();
  }
}
inline bool ResultUnion::_internal_success() const {
  if (_internal_has_success()) {
    return Value_.success_;
  }
  return false;
}
inline void ResultUnion::_internal_set_success(bool value) {
  if (!_internal_has_success()) {
    clear_Value();
    set_has_success();
  }
  Value_.success_ = value;
}
inline bool ResultUnion::success() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.ResultUnion.success)
  return _internal_success();
}
inline void ResultUnion::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Jde.Blockly.Proto.ResultUnion.success)
}

// .Jde.Blockly.Proto.Functions functions = 3;
inline bool ResultUnion::_internal_has_functions() const {
  return Value_case() == kFunctions;
}
inline bool ResultUnion::has_functions() const {
  return _internal_has_functions();
}
inline void ResultUnion::set_has_functions() {
  _oneof_case_[0] = kFunctions;
}
inline void ResultUnion::clear_functions() {
  if (_internal_has_functions()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.functions_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Blockly::Proto::Functions* ResultUnion::release_functions() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.ResultUnion.functions)
  if (_internal_has_functions()) {
    clear_has_Value();
      ::Jde::Blockly::Proto::Functions* temp = Value_.functions_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.functions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Blockly::Proto::Functions& ResultUnion::_internal_functions() const {
  return _internal_has_functions()
      ? *Value_.functions_
      : reinterpret_cast< ::Jde::Blockly::Proto::Functions&>(::Jde::Blockly::Proto::_Functions_default_instance_);
}
inline const ::Jde::Blockly::Proto::Functions& ResultUnion::functions() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.ResultUnion.functions)
  return _internal_functions();
}
inline ::Jde::Blockly::Proto::Functions* ResultUnion::unsafe_arena_release_functions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Blockly.Proto.ResultUnion.functions)
  if (_internal_has_functions()) {
    clear_has_Value();
    ::Jde::Blockly::Proto::Functions* temp = Value_.functions_;
    Value_.functions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ResultUnion::unsafe_arena_set_allocated_functions(::Jde::Blockly::Proto::Functions* functions) {
  clear_Value();
  if (functions) {
    set_has_functions();
    Value_.functions_ = functions;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Blockly.Proto.ResultUnion.functions)
}
inline ::Jde::Blockly::Proto::Functions* ResultUnion::_internal_mutable_functions() {
  if (!_internal_has_functions()) {
    clear_Value();
    set_has_functions();
    Value_.functions_ = CreateMaybeMessage< ::Jde::Blockly::Proto::Functions >(GetArenaForAllocation());
  }
  return Value_.functions_;
}
inline ::Jde::Blockly::Proto::Functions* ResultUnion::mutable_functions() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.ResultUnion.functions)
  return _internal_mutable_functions();
}

// .Jde.Blockly.Proto.Function function = 4;
inline bool ResultUnion::_internal_has_function() const {
  return Value_case() == kFunction;
}
inline bool ResultUnion::has_function() const {
  return _internal_has_function();
}
inline void ResultUnion::set_has_function() {
  _oneof_case_[0] = kFunction;
}
inline void ResultUnion::clear_function() {
  if (_internal_has_function()) {
    if (GetArenaForAllocation() == nullptr) {
      delete Value_.function_;
    }
    clear_has_Value();
  }
}
inline ::Jde::Blockly::Proto::Function* ResultUnion::release_function() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.ResultUnion.function)
  if (_internal_has_function()) {
    clear_has_Value();
      ::Jde::Blockly::Proto::Function* temp = Value_.function_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    Value_.function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::Jde::Blockly::Proto::Function& ResultUnion::_internal_function() const {
  return _internal_has_function()
      ? *Value_.function_
      : reinterpret_cast< ::Jde::Blockly::Proto::Function&>(::Jde::Blockly::Proto::_Function_default_instance_);
}
inline const ::Jde::Blockly::Proto::Function& ResultUnion::function() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.ResultUnion.function)
  return _internal_function();
}
inline ::Jde::Blockly::Proto::Function* ResultUnion::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Jde.Blockly.Proto.ResultUnion.function)
  if (_internal_has_function()) {
    clear_has_Value();
    ::Jde::Blockly::Proto::Function* temp = Value_.function_;
    Value_.function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ResultUnion::unsafe_arena_set_allocated_function(::Jde::Blockly::Proto::Function* function) {
  clear_Value();
  if (function) {
    set_has_function();
    Value_.function_ = function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Jde.Blockly.Proto.ResultUnion.function)
}
inline ::Jde::Blockly::Proto::Function* ResultUnion::_internal_mutable_function() {
  if (!_internal_has_function()) {
    clear_Value();
    set_has_function();
    Value_.function_ = CreateMaybeMessage< ::Jde::Blockly::Proto::Function >(GetArenaForAllocation());
  }
  return Value_.function_;
}
inline ::Jde::Blockly::Proto::Function* ResultUnion::mutable_function() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.ResultUnion.function)
  return _internal_mutable_function();
}

// string error = 6;
inline bool ResultUnion::_internal_has_error() const {
  return Value_case() == kError;
}
inline bool ResultUnion::has_error() const {
  return _internal_has_error();
}
inline void ResultUnion::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void ResultUnion::clear_error() {
  if (_internal_has_error()) {
    Value_.error_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_Value();
  }
}
inline const std::string& ResultUnion::error() const {
  // @@protoc_insertion_point(field_get:Jde.Blockly.Proto.ResultUnion.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline void ResultUnion::set_error(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_error()) {
    clear_Value();
    set_has_error();
    Value_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Value_.error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Jde.Blockly.Proto.ResultUnion.error)
}
inline std::string* ResultUnion::mutable_error() {
  // @@protoc_insertion_point(field_mutable:Jde.Blockly.Proto.ResultUnion.error)
  return _internal_mutable_error();
}
inline const std::string& ResultUnion::_internal_error() const {
  if (_internal_has_error()) {
    return Value_.error_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ResultUnion::_internal_set_error(const std::string& value) {
  if (!_internal_has_error()) {
    clear_Value();
    set_has_error();
    Value_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  Value_.error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResultUnion::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_Value();
    set_has_error();
    Value_.error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return Value_.error_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResultUnion::release_error() {
  // @@protoc_insertion_point(field_release:Jde.Blockly.Proto.ResultUnion.error)
  if (_internal_has_error()) {
    clear_has_Value();
    return Value_.error_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void ResultUnion::set_allocated_error(std::string* error) {
  if (has_Value()) {
    clear_Value();
  }
  if (error != nullptr) {
    set_has_error();
    Value_.error_.UnsafeSetDefault(error);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(error);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:Jde.Blockly.Proto.ResultUnion.error)
}

inline bool ResultUnion::has_Value() const {
  return Value_case() != VALUE_NOT_SET;
}
inline void ResultUnion::clear_has_Value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline ResultUnion::ValueCase ResultUnion::Value_case() const {
  return ResultUnion::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto
}  // namespace Blockly
}  // namespace Jde

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Jde::Blockly::Proto::ERequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Jde::Blockly::Proto::ERequestType>() {
  return ::Jde::Blockly::Proto::ERequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_blockly_2eproto
