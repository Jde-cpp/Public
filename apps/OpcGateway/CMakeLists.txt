cmake_minimum_required( VERSION ${MIN_REQ_CMAKE_VERSION} )

include( $ENV{JDE_BASH}/Public/build/functions.cmake )
message( "Jde.Opc.Gateway" )
project( Jde.Opc.Gateway VERSION ${JDE_VERSION} LANGUAGES CXX )
include( ../../build/dependencies.cmake )
if( WIN32 )
	set( OPENSSL_USE_STATIC_LIBS ON )
endif()
find_package( OpenSSL REQUIRED )

find_package( open62541 REQUIRED )
set( open62541Dir ${open62541_DIR}/../../.. )
cmake_path( ABSOLUTE_PATH open62541Dir NORMALIZE OUTPUT_VARIABLE open62541Dir )
if( WIN32 )
	add_definitions( -DZLIB_USE_STATIC_LIBS -D )
	set( ZLIB_ROOT ${LIB_DIR}/zlib )
endif()
find_package( ZLIB REQUIRED )

add_subdirectory( $ENV{JDE_BASH}/Framework/source ../../libs/framework/lib )
set( libDir $ENV{JDE_BASH}/Public/libs )
add_subdirectory( ${libDir}/crypto/src ../../libs/crypto/lib )
add_subdirectory( ${libDir}/db/src ../../libs/db/lib )
if( WIN32 )
	add_subdirectory( ${libDir}/db/drivers/odbc ../../libs/db/drivers/odbc )
else()
	add_subdirectory( ${libDir}/db/drivers/mysql ../../libs/db/drivers/mysql )
endif()
add_subdirectory( ${libDir}/ql ../../libs/ql )
add_subdirectory( ${libDir}/access/src ../../libs/access/lib )
add_subdirectory( ${libDir}/web/client ../../libs/web/client )
add_subdirectory( ${libDir}/web/server ../../libs/web/server )
add_subdirectory( ${libDir}/app/shared ../../libs/app/shared )
add_subdirectory( ${libDir}/app/client ../../libs/app/client )
add_subdirectory( ${libDir}/opc/src ../../libs/opc )
add_subdirectory( src lib )

#if( buildTests )
	# add_subdirectory( tests )
	# set( CMAKE_CTEST_ARGUMENTS -tests -settings=$ENV{JDE_DIR}/Public/apps/OpcGateway/config/Opc.Gateway.jsonnet )
	# add_test( NAME GatewayTests COMMAND $<TARGET_FILE:Jde.Opc.Gateway.Tests> )
#endif()


set( targetName Jde.Opc.Gateway )
project( ${targetName} )

message( ${JSONNET_DIR}/lib )
link_directories( ${JSONNET_DIR}/lib )
link_directories( ${open62541Dir}/lib )
#add_definitions( -DUA_ENABLE_ENCRYPTION )

add_executable( ${targetName} )
compileOptions( ${targetName} )
file( GLOB sources *.cpp src/main.cpp )
file( GLOB headers *.h )
if( WIN32)
	list( APPEND sources src/OpcGateway.rc )
	set_target_properties( ${targetName} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin/$<CONFIG>" )
endif()
target_sources( ${targetName} PRIVATE ${sources} ${resources} ${headers} )

if( WIN32 )
	target_link_libraries( ${targetName} ZLIB::ZLIB )
	target_link_libraries( ${targetName} Iphlpapi.lib )
else()
	message( "Linking with stdc++exp for stacktrace" )
	target_link_libraries( ${targetName} stdc++exp )#for stacktrace
endif()
target_link_libraries( ${targetName} OpenSSL::SSL )
include_directories( ${open62541Dir}include )
target_link_libraries( ${targetName} Jde.Opc.GatewayLib )
target_link_libraries( ${targetName} open62541 )
target_link_libraries( ${targetName} Boost::json )

add_custom_command( TARGET ${targetName} POST_BUILD COMMAND ${CMAKE_COMMAND} -E create_symlink "$ENV{JDE_BASH}/Public/libs/db/config/common-meta.libsonnet" "${CMAKE_CURRENT_SOURCE_DIR}/config/common-meta.libsonnet" COMMENT "mklink common-meta.libsonnet" )
if( WIN32 )
	set_target_properties( ${targetName} PROPERTIES VS_DEBUGGER_COMMAND_ARGUMENTS "-c -tests -settings=${CMAKE_CURRENT_SOURCE_DIR}/../config/Opc.Gateway.jsonnet" )
	copyCommonDlls()
endif()