<?xml version="1.0" encoding="utf-8"?>
<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">
	<Type Name="std::optional&lt;*&gt;">
		<DisplayString Condition="_M_payload._M_engaged == false">null</DisplayString>
		<DisplayString>{_M_payload._M_payload._M_value}</DisplayString>
		<Expand>
				<ExpandedItem Condition="_M_payload._M_engaged == true">_M_payload._M_payload._M_value</ExpandedItem>
		</Expand>
	</Type>	
	<Type Name="std::filesystem::path">
		<AlternativeType Name="std::filesystem::__cxx11::path"/>
		<AlternativeType Name="const std::filesystem::__cxx11::path &amp;"/>
		<DisplayString>{{p2={_M_pathname._M_dataplus._M_p,s}}}</DisplayString>
		<Expand>
				<ExpandedItem>p={_M_pathname._M_dataplus}</ExpandedItem>
		</Expand>
  </Type>
	<Type Name="std::map&lt;*&gt;">
		<DisplayString>{{ size={_M_t._M_impl._M_node_count} }}</DisplayString>
		<Expand>
				<Item Name="size">_M_t._M_impl._M_node_count</Item>
				<TreeItems>
						<Size>_M_t._M_impl._M_node_count</Size>
						<HeadPointer>(std::map&lt;$T1,$T2,$T3,$T4&gt;::_Rep_type::_Link_type)_M_t._M_impl._M_header._M_parent</HeadPointer>
						<LeftPointer>_M_left</LeftPointer>
						<RightPointer>_M_right</RightPointer>
						<ValueNode>(std::pair&lt;$T1,$T2&gt;)_M_storage</ValueNode>
				</TreeItems>
		</Expand>
	</Type>
	<Type Name="std::string">
		<AlternativeType Name="std::__cxx11::basic_string&lt;*&gt;"/>
		<AlternativeType Name="Jde::str"/>
		<AlternativeType Name="std::string&amp;&amp;"/>
		<AlternativeType Name="Jde::DB::SchemaName"/>
		<DisplayString>{{s={_M_dataplus._M_p,s}}}</DisplayString>
		<Expand>
				<Item Name="size">_M_string_length</Item>
				<Item Name="string">_M_dataplus._M_p,s</Item>
		</Expand>
	</Type>	
	<Type Name="std::string_view">
		<AlternativeType Name="Jde::sv"/>
		<DisplayString>_M_str,s</DisplayString>
		<Expand>
				<Item Name="size">_M_len</Item>
				<Item Name="string">_M_str,s</Item>
		</Expand>
	</Type>	
	<Type Name="std::shared_ptr&lt;*&gt;">
		<!-- <DisplayString Condition="_M_ptr!=0">{*_M_ptr}</DisplayString> -->
    <DisplayString Condition="_M_ptr!=0">p={*_M_ptr}</DisplayString>
		<DisplayString Condition="_M_ptr==0">{{nullptr}}</DisplayString>
		<Expand>
			<Item Name="strong">_M_refcount._M_pi-&gt;_M_use_count</Item>
			<Item Name="weak">_M_refcount._M_pi-&gt;_M_weak_count</Item>
    </Expand>		
	</Type>
 <Type Name="std::unique_ptr&lt;*&gt;">
 		<AlternativeType Name="Jde::up&lt;*&gt;"/>
		<DisplayString Condition="_M_t._M_t.std::_Head_base&lt;0, $T1*, false&gt;::_M_head_impl == 0">{{nullptr}}</DisplayString>
		<DisplayString>{*std::_Head_base&lt;0, $T1*, false&gt;::_M_head(_M_t._M_t)}</DisplayString>
		<Expand>
				<ExpandedItem>*std::_Head_base&lt;0, $T1*, false&gt;::_M_head(_M_t._M_t)</ExpandedItem>
		</Expand>
	</Type>
	<Type Name="std::vector&lt;*&gt;">
		<AlternativeType Name="std::__debug::vector&lt;*&gt;"/>
		<AlternativeType Name="std::__cxx1998::_Vector_base&lt;*&gt;"/>
		<!-- <AlternativeType Name="nlohmann::basic_json&lt;*&gt;::array_t"/> -->
    <DisplayString>{{size={_M_impl._M_finish - _M_impl._M_start}}}</DisplayString>
    <Expand>
      <Item Name="[size]" ExcludeView="simple">_M_impl._M_finish - _M_impl._M_start</Item>
      <ArrayItems>
        <Size>_M_impl._M_finish - _M_impl._M_start</Size>
        <ValuePointer>_M_impl._M_start</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
 	<Type Name="nlohmann::basic_json&lt;*&gt;">
		<AlternativeType Name="nlohmann::json"/>
		<AlternativeType Name="nlohmann::basic_json&lt;*,*,*,*,*,*,*,*,*,*&gt;"/>
		<!-- <AlternativeType Name="nlohmann::basic_json&lt;std::__debug::map, std::__debug::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer, std::__debug::vector&lt;unsigned char, std::allocator&lt;unsigned char&gt; &gt; &gt;"/> -->
		<DisplayString Condition="m_type == nlohmann::detail::value_t::null">null</DisplayString>
		<DisplayString Condition="m_type == nlohmann::detail::value_t::object">o={*(m_value.object)}</DisplayString>
		<DisplayString Condition="m_type == nlohmann::detail::value_t::array">{{array={*(m_value.array)}}}</DisplayString>
		<DisplayString Condition="m_type == nlohmann::detail::value_t::string">{*(m_value.string)}</DisplayString>
		<DisplayString Condition="m_type == nlohmann::detail::value_t::boolean">{m_value.boolean}</DisplayString>
		<DisplayString Condition="m_type == nlohmann::detail::value_t::number_integer">{m_value.number_integer}</DisplayString>
		<DisplayString Condition="m_type == nlohmann::detail::value_t::number_unsigned">{m_value.number_unsigned}</DisplayString>
		<DisplayString Condition="m_type == nlohmann::detail::value_t::number_float">{m_value.number_float}</DisplayString>
		<DisplayString Condition="m_type == nlohmann::detail::value_t::discarded">discarded</DisplayString>
		<!-- <Expand>
				 <ExpandedItem Condition="m_type == nlohmann::detail::value_t::object">
						*(m_value.object),view(simple)
				</ExpandedItem> 
				<ExpandedItem Condition="m_type == nlohmann::detail::value_t::array">
						*(m_value.array),view(simple)
				</ExpandedItem>
		</Expand> -->
	</Type>	
	<Type Name="boost::container::flat_map&lt;*&gt;">
		<DisplayString>{{size={m_flat_tree.m_data.m_seq.m_holder.m_size}}}</DisplayString>
		<Expand>
			<ArrayItems>
				<Size>m_flat_tree.m_data.m_seq.m_holder.m_size</Size>
				<ValuePointer>m_flat_tree.m_data.m_seq.m_holder.m_start</ValuePointer>
			</ArrayItems>
		</Expand>
	</Type>
 <Type Name="std::list&lt;*&gt;">
	<AlternativeType Name="std::__cxx11::list&lt;*&gt;"/>
	<AlternativeType Name="std::__debug::list&lt;*&gt;"/>
	<DisplayString>{{ size={_M_impl._M_node._M_size} }}</DisplayString>
	<Expand>
			<Item Name="size">_M_impl._M_node._M_size</Item>
			<LinkedListItems Condition="_M_impl._M_node._M_next != &amp;_M_impl._M_node"> <!-- this condition doesn't affect anything here. <Size> matters -->
					<Size>_M_impl._M_node._M_size</Size>
					<HeadPointer>(std::__cxx11::list&lt;$T1,$T2&gt;::_Node*)_M_impl._M_node</HeadPointer>
					<NextPointer>_M_next</NextPointer>
					<ValueNode>($T1)_M_storage</ValueNode>
			</LinkedListItems>
	</Expand>
</Type>	
<Type Name="std::variant&lt;*&gt;">
	<DisplayString Condition="_M_index == 0">{_M_u._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 1">{_M_u._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 2">{_M_u._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 3">{_M_u._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 4">{_M_u._M_rest._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 5">{_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 6">{_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 7">{_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 8">{_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 9">{_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 10">{_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 11">{_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 12">{_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 13">{_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 14">{_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<DisplayString Condition="_M_index == 15">{_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage}</DisplayString>
	<Expand>
		<Item Name="type" Condition="_M_index == 0">"$T1",s</Item>
		<Item Name="value" Condition="_M_index == 0">_M_u._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 1">"$T2",s</Item>
		<Item Name="value" Condition="_M_index == 1">_M_u._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 2">"$T3",s</Item>
		<Item Name="value" Condition="_M_index == 2">_M_u._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 3">"$T4",s</Item>
		<Item Name="value" Condition="_M_index == 3">_M_u._M_rest._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 4">"$T5",s</Item>
		<Item Name="value" Condition="_M_index == 4">_M_u._M_rest._M_rest._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 5">"$T6",s</Item>
		<Item Name="value" Condition="_M_index == 5">_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 6">"$T7",s</Item>
		<Item Name="value" Condition="_M_index == 6">_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 7">"$T8",s</Item>
		<Item Name="value" Condition="_M_index == 7">_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 8">"$T9",s</Item>
		<Item Name="value" Condition="_M_index == 8">_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 9">"$T10",s</Item>
		<Item Name="value" Condition="_M_index == 9">_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 10">"$T11",s</Item>
		<Item Name="value" Condition="_M_index == 10">_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 11">"$T12",s</Item>
		<Item Name="value" Condition="_M_index == 11">_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 12">"$T13",s</Item>
		<Item Name="value" Condition="_M_index == 12">_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 13">"$T14",s</Item>
		<Item Name="value" Condition="_M_index == 13">_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 14">"$T15",s</Item>
		<Item Name="value" Condition="_M_index == 14">_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage</Item>
		<Item Name="type" Condition="_M_index == 15">"$T16",s</Item>
		<Item Name="value" Condition="_M_index == 15">_M_u._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_rest._M_first._M_storage</Item>
	</Expand>
</Type>

</AutoVisualizer>