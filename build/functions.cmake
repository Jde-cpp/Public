function(boost)
#	message( Boost_INCLUDE_DIR=${LIB_ROOT}/boost/include)
	if( WIN32 )
		set( Boost_NO_WARN_NEW_VERSIONS ON )
		#set( Boost_INCLUDE_DIR ${LIB_ROOT}/boost/include/boost-1_88 )
		set( Boost_LIBRARY_DIR ${LIB_ROOT}/boost/lib CACHE STRING "Boost library path" )
	else()
		#set( Boost_INCLUDE_DIR $ENV{LIB_DIR}/boost/include )
	endif()
	find_package( Boost ${BOOST_VERSION} REQUIRED COMPONENTS json )

	include_directories( ${Boost_INCLUDE_DIRS} )
	#message( Boost_INCLUDE_DIRS=${Boost_INCLUDE_DIRS} )
endfunction()

function(dumpVariables)
	get_cmake_property(_variableNames VARIABLES)
	list (SORT _variableNames)
	foreach (_variableName ${_variableNames})
#        if ((NOT DEFINED ${ARGV0}) OR _variableName MATCHES ${ARGV0})
					message(STATUS "${_variableName}=${${_variableName}}")
#        endif()
	endforeach()
endfunction()

function(compileOptions)
	if (MSVC)
		target_compile_options( ${ARGV0} PRIVATE /Zc:preprocessor /utf-8 /W4 /wd4068 /wd4251 /wd4275 /wd4297 /wd4456 /wd4652 /wd5104 /wd5105 )
		add_definitions( -D_WIN32_WINNT=0x0601 )
		set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO" )
		set( CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /INCREMENTAL:NO" )
	else()
		target_compile_options( ${ARGV0} PRIVATE -Wall -Wextra -pedantic -Werror )
		set_property( TARGET ${ARGV0} PROPERTY POSITION_INDEPENDENT_CODE ON )
	endif()
endfunction()